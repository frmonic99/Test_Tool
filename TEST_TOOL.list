
TEST_TOOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000748c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08007690  08007690  00017690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce8  08007ce8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d4  08007ec4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08007ec4  00020428  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce5c  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc7  00000000  00000000  0002d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084f  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002807e  00000000  00000000  00030077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb57  00000000  00000000  000580f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f45b1  00000000  00000000  00066c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dfc  00000000  00000000  0015b200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015effc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08007674 	.word	0x08007674

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08007674 	.word	0x08007674

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a8 	b.w	80009f0 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9e08      	ldr	r6, [sp, #32]
 800072e:	460d      	mov	r5, r1
 8000730:	4604      	mov	r4, r0
 8000732:	460f      	mov	r7, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4694      	mov	ip, r2
 800073c:	d965      	bls.n	800080a <__udivmoddi4+0xe2>
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	b143      	cbz	r3, 8000756 <__udivmoddi4+0x2e>
 8000744:	fa02 fc03 	lsl.w	ip, r2, r3
 8000748:	f1c3 0220 	rsb	r2, r3, #32
 800074c:	409f      	lsls	r7, r3
 800074e:	fa20 f202 	lsr.w	r2, r0, r2
 8000752:	4317      	orrs	r7, r2
 8000754:	409c      	lsls	r4, r3
 8000756:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075a:	fa1f f58c 	uxth.w	r5, ip
 800075e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000762:	0c22      	lsrs	r2, r4, #16
 8000764:	fb0e 7711 	mls	r7, lr, r1, r7
 8000768:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800076c:	fb01 f005 	mul.w	r0, r1, r5
 8000770:	4290      	cmp	r0, r2
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x62>
 8000774:	eb1c 0202 	adds.w	r2, ip, r2
 8000778:	f101 37ff 	add.w	r7, r1, #4294967295
 800077c:	f080 811c 	bcs.w	80009b8 <__udivmoddi4+0x290>
 8000780:	4290      	cmp	r0, r2
 8000782:	f240 8119 	bls.w	80009b8 <__udivmoddi4+0x290>
 8000786:	3902      	subs	r1, #2
 8000788:	4462      	add	r2, ip
 800078a:	1a12      	subs	r2, r2, r0
 800078c:	b2a4      	uxth	r4, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079a:	fb00 f505 	mul.w	r5, r0, r5
 800079e:	42a5      	cmp	r5, r4
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x90>
 80007a2:	eb1c 0404 	adds.w	r4, ip, r4
 80007a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007aa:	f080 8107 	bcs.w	80009bc <__udivmoddi4+0x294>
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	f240 8104 	bls.w	80009bc <__udivmoddi4+0x294>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	2100      	movs	r1, #0
 80007c0:	b11e      	cbz	r6, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40dc      	lsrs	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0xbc>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f000 80ed 	beq.w	80009b2 <__udivmoddi4+0x28a>
 80007d8:	2100      	movs	r1, #0
 80007da:	e9c6 0500 	strd	r0, r5, [r6]
 80007de:	4608      	mov	r0, r1
 80007e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e4:	fab3 f183 	clz	r1, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d149      	bne.n	8000880 <__udivmoddi4+0x158>
 80007ec:	42ab      	cmp	r3, r5
 80007ee:	d302      	bcc.n	80007f6 <__udivmoddi4+0xce>
 80007f0:	4282      	cmp	r2, r0
 80007f2:	f200 80f8 	bhi.w	80009e6 <__udivmoddi4+0x2be>
 80007f6:	1a84      	subs	r4, r0, r2
 80007f8:	eb65 0203 	sbc.w	r2, r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	4617      	mov	r7, r2
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0e2      	beq.n	80007ca <__udivmoddi4+0xa2>
 8000804:	e9c6 4700 	strd	r4, r7, [r6]
 8000808:	e7df      	b.n	80007ca <__udivmoddi4+0xa2>
 800080a:	b902      	cbnz	r2, 800080e <__udivmoddi4+0xe6>
 800080c:	deff      	udf	#255	; 0xff
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8090 	bne.w	8000938 <__udivmoddi4+0x210>
 8000818:	1a8a      	subs	r2, r1, r2
 800081a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800081e:	fa1f fe8c 	uxth.w	lr, ip
 8000822:	2101      	movs	r1, #1
 8000824:	fbb2 f5f7 	udiv	r5, r2, r7
 8000828:	fb07 2015 	mls	r0, r7, r5, r2
 800082c:	0c22      	lsrs	r2, r4, #16
 800082e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000832:	fb0e f005 	mul.w	r0, lr, r5
 8000836:	4290      	cmp	r0, r2
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x124>
 800083a:	eb1c 0202 	adds.w	r2, ip, r2
 800083e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x122>
 8000844:	4290      	cmp	r0, r2
 8000846:	f200 80cb 	bhi.w	80009e0 <__udivmoddi4+0x2b8>
 800084a:	4645      	mov	r5, r8
 800084c:	1a12      	subs	r2, r2, r0
 800084e:	b2a4      	uxth	r4, r4
 8000850:	fbb2 f0f7 	udiv	r0, r2, r7
 8000854:	fb07 2210 	mls	r2, r7, r0, r2
 8000858:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800085c:	fb0e fe00 	mul.w	lr, lr, r0
 8000860:	45a6      	cmp	lr, r4
 8000862:	d908      	bls.n	8000876 <__udivmoddi4+0x14e>
 8000864:	eb1c 0404 	adds.w	r4, ip, r4
 8000868:	f100 32ff 	add.w	r2, r0, #4294967295
 800086c:	d202      	bcs.n	8000874 <__udivmoddi4+0x14c>
 800086e:	45a6      	cmp	lr, r4
 8000870:	f200 80bb 	bhi.w	80009ea <__udivmoddi4+0x2c2>
 8000874:	4610      	mov	r0, r2
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800087e:	e79f      	b.n	80007c0 <__udivmoddi4+0x98>
 8000880:	f1c1 0720 	rsb	r7, r1, #32
 8000884:	408b      	lsls	r3, r1
 8000886:	fa22 fc07 	lsr.w	ip, r2, r7
 800088a:	ea4c 0c03 	orr.w	ip, ip, r3
 800088e:	fa05 f401 	lsl.w	r4, r5, r1
 8000892:	fa20 f307 	lsr.w	r3, r0, r7
 8000896:	40fd      	lsrs	r5, r7
 8000898:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800089c:	4323      	orrs	r3, r4
 800089e:	fbb5 f8f9 	udiv	r8, r5, r9
 80008a2:	fa1f fe8c 	uxth.w	lr, ip
 80008a6:	fb09 5518 	mls	r5, r9, r8, r5
 80008aa:	0c1c      	lsrs	r4, r3, #16
 80008ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008b0:	fb08 f50e 	mul.w	r5, r8, lr
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ba:	fa00 f001 	lsl.w	r0, r0, r1
 80008be:	d90b      	bls.n	80008d8 <__udivmoddi4+0x1b0>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008c8:	f080 8088 	bcs.w	80009dc <__udivmoddi4+0x2b4>
 80008cc:	42a5      	cmp	r5, r4
 80008ce:	f240 8085 	bls.w	80009dc <__udivmoddi4+0x2b4>
 80008d2:	f1a8 0802 	sub.w	r8, r8, #2
 80008d6:	4464      	add	r4, ip
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	b29d      	uxth	r5, r3
 80008dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e0:	fb09 4413 	mls	r4, r9, r3, r4
 80008e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x1da>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008f8:	d26c      	bcs.n	80009d4 <__udivmoddi4+0x2ac>
 80008fa:	45a6      	cmp	lr, r4
 80008fc:	d96a      	bls.n	80009d4 <__udivmoddi4+0x2ac>
 80008fe:	3b02      	subs	r3, #2
 8000900:	4464      	add	r4, ip
 8000902:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000906:	fba3 9502 	umull	r9, r5, r3, r2
 800090a:	eba4 040e 	sub.w	r4, r4, lr
 800090e:	42ac      	cmp	r4, r5
 8000910:	46c8      	mov	r8, r9
 8000912:	46ae      	mov	lr, r5
 8000914:	d356      	bcc.n	80009c4 <__udivmoddi4+0x29c>
 8000916:	d053      	beq.n	80009c0 <__udivmoddi4+0x298>
 8000918:	b156      	cbz	r6, 8000930 <__udivmoddi4+0x208>
 800091a:	ebb0 0208 	subs.w	r2, r0, r8
 800091e:	eb64 040e 	sbc.w	r4, r4, lr
 8000922:	fa04 f707 	lsl.w	r7, r4, r7
 8000926:	40ca      	lsrs	r2, r1
 8000928:	40cc      	lsrs	r4, r1
 800092a:	4317      	orrs	r7, r2
 800092c:	e9c6 7400 	strd	r7, r4, [r6]
 8000930:	4618      	mov	r0, r3
 8000932:	2100      	movs	r1, #0
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	f1c3 0120 	rsb	r1, r3, #32
 800093c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000940:	fa20 f201 	lsr.w	r2, r0, r1
 8000944:	fa25 f101 	lsr.w	r1, r5, r1
 8000948:	409d      	lsls	r5, r3
 800094a:	432a      	orrs	r2, r5
 800094c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1510 	mls	r5, r7, r0, r1
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000962:	fb00 f50e 	mul.w	r5, r0, lr
 8000966:	428d      	cmp	r5, r1
 8000968:	fa04 f403 	lsl.w	r4, r4, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x258>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f100 38ff 	add.w	r8, r0, #4294967295
 8000976:	d22f      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 8000978:	428d      	cmp	r5, r1
 800097a:	d92d      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 800097c:	3802      	subs	r0, #2
 800097e:	4461      	add	r1, ip
 8000980:	1b49      	subs	r1, r1, r5
 8000982:	b292      	uxth	r2, r2
 8000984:	fbb1 f5f7 	udiv	r5, r1, r7
 8000988:	fb07 1115 	mls	r1, r7, r5, r1
 800098c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000990:	fb05 f10e 	mul.w	r1, r5, lr
 8000994:	4291      	cmp	r1, r2
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x282>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f105 38ff 	add.w	r8, r5, #4294967295
 80009a0:	d216      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 80009a2:	4291      	cmp	r1, r2
 80009a4:	d914      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 80009a6:	3d02      	subs	r5, #2
 80009a8:	4462      	add	r2, ip
 80009aa:	1a52      	subs	r2, r2, r1
 80009ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009b0:	e738      	b.n	8000824 <__udivmoddi4+0xfc>
 80009b2:	4631      	mov	r1, r6
 80009b4:	4630      	mov	r0, r6
 80009b6:	e708      	b.n	80007ca <__udivmoddi4+0xa2>
 80009b8:	4639      	mov	r1, r7
 80009ba:	e6e6      	b.n	800078a <__udivmoddi4+0x62>
 80009bc:	4610      	mov	r0, r2
 80009be:	e6fb      	b.n	80007b8 <__udivmoddi4+0x90>
 80009c0:	4548      	cmp	r0, r9
 80009c2:	d2a9      	bcs.n	8000918 <__udivmoddi4+0x1f0>
 80009c4:	ebb9 0802 	subs.w	r8, r9, r2
 80009c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009cc:	3b01      	subs	r3, #1
 80009ce:	e7a3      	b.n	8000918 <__udivmoddi4+0x1f0>
 80009d0:	4645      	mov	r5, r8
 80009d2:	e7ea      	b.n	80009aa <__udivmoddi4+0x282>
 80009d4:	462b      	mov	r3, r5
 80009d6:	e794      	b.n	8000902 <__udivmoddi4+0x1da>
 80009d8:	4640      	mov	r0, r8
 80009da:	e7d1      	b.n	8000980 <__udivmoddi4+0x258>
 80009dc:	46d0      	mov	r8, sl
 80009de:	e77b      	b.n	80008d8 <__udivmoddi4+0x1b0>
 80009e0:	3d02      	subs	r5, #2
 80009e2:	4462      	add	r2, ip
 80009e4:	e732      	b.n	800084c <__udivmoddi4+0x124>
 80009e6:	4608      	mov	r0, r1
 80009e8:	e70a      	b.n	8000800 <__udivmoddi4+0xd8>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	e742      	b.n	8000876 <__udivmoddi4+0x14e>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <formatoValido>:
uint16_t voltage_value = 0x00;
uint8_t voltage_byte_0 = 0x00;
uint8_t voltage_byte_1 = 0x00;
uint8_t tmp = 0x00;

int formatoValido (const char *comando){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	int longitudComando = strlen(comando);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fc29 	bl	8000254 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	60bb      	str	r3, [r7, #8]
	if (comando[0] != ':'){
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b3a      	cmp	r3, #58	; 0x3a
 8000a0c:	d001      	beq.n	8000a12 <formatoValido+0x1e>
		return 0; // no válido
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e01f      	b.n	8000a52 <formatoValido+0x5e>
	}
	for (int i=0; i<(longitudComando-1); i++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e011      	b.n	8000a3c <formatoValido+0x48>
        if (comando[i] == ':' && comando[i + 1] == ':') {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b3a      	cmp	r3, #58	; 0x3a
 8000a22:	d108      	bne.n	8000a36 <formatoValido+0x42>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3301      	adds	r3, #1
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b3a      	cmp	r3, #58	; 0x3a
 8000a30:	d101      	bne.n	8000a36 <formatoValido+0x42>
            return 0; // Comando no válido
 8000a32:	2300      	movs	r3, #0
 8000a34:	e00d      	b.n	8000a52 <formatoValido+0x5e>
	for (int i=0; i<(longitudComando-1); i++){
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dbe8      	blt.n	8000a18 <formatoValido+0x24>
        }
	}
	if (longitudComando < 3){
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	dc01      	bgt.n	8000a50 <formatoValido+0x5c>
		return 0; // no válido
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e000      	b.n	8000a52 <formatoValido+0x5e>
	}
/*	if (comando[longitudComando-1] != ';'){
		return 0; // no válido
	}*/
	return 1; // Válido
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <numArgumentos>:

int numArgumentos(const char *comando){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	int longitudComando = strlen(comando);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fbf6 	bl	8000254 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60fb      	str	r3, [r7, #12]
	int argumentos = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
	if (formatoValido (comando)){
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffbf 	bl	80009f4 <formatoValido>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d013      	beq.n	8000aa4 <numArgumentos+0x4a>
		for (int i=0; i<(longitudComando-1); i++){
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	e00b      	b.n	8000a9a <numArgumentos+0x40>
	        if (comando[i] == ':') {
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b3a      	cmp	r3, #58	; 0x3a
 8000a8c:	d102      	bne.n	8000a94 <numArgumentos+0x3a>
	        	argumentos++;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
		for (int i=0; i<(longitudComando-1); i++){
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	3301      	adds	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbee      	blt.n	8000a82 <numArgumentos+0x28>
	        }
	    }
	}
	return argumentos;
 8000aa4:	697b      	ldr	r3, [r7, #20]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <saveArguments>:

struct Comando saveArguments (const char *comando){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0c4      	sub	sp, #272	; 0x110
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000abe:	6018      	str	r0, [r3, #0]
 8000ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ac8:	6019      	str	r1, [r3, #0]
	struct Comando resultado;
	char *argumento;
	char copiaComando[50];
	int posicion = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int nArgs = numArgumentos(comando);
 8000ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ad4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f7ff ffbe 	bl	8000a5a <numArgumentos>
 8000ade:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	strcpy(copiaComando, comando);
 8000ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000aea:	f107 0208 	add.w	r2, r7, #8
 8000aee:	6819      	ldr	r1, [r3, #0]
 8000af0:	4610      	mov	r0, r2
 8000af2:	f004 fd92 	bl	800561a <strcpy>
	// Dividimos el comando en argumentos usando ":"
	argumento = strtok(copiaComando, ":");
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4930      	ldr	r1, [pc, #192]	; (8000bbc <saveArguments+0x10c>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 fcbd 	bl	800547c <strtok>
 8000b02:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (posicion < nArgs ){
 8000b06:	e03d      	b.n	8000b84 <saveArguments+0xd4>
		switch(posicion){
 8000b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d82e      	bhi.n	8000b6e <saveArguments+0xbe>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <saveArguments+0x68>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b39 	.word	0x08000b39
 8000b20:	08000b4b 	.word	0x08000b4b
 8000b24:	08000b5d 	.word	0x08000b5d
		case 0:
			strcpy(resultado.arg1, argumento);
 8000b28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b2c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fd72 	bl	800561a <strcpy>
			break;
 8000b36:	e01a      	b.n	8000b6e <saveArguments+0xbe>
		case 1:
			strcpy(resultado.arg2, argumento);
 8000b38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b3c:	3332      	adds	r3, #50	; 0x32
 8000b3e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fd69 	bl	800561a <strcpy>
			break;
 8000b48:	e011      	b.n	8000b6e <saveArguments+0xbe>
		case 2:
			strcpy(resultado.arg3, argumento);
 8000b4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b4e:	3364      	adds	r3, #100	; 0x64
 8000b50:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fd60 	bl	800561a <strcpy>
			break;
 8000b5a:	e008      	b.n	8000b6e <saveArguments+0xbe>
		case 3:
			strcpy(resultado.arg4, argumento);
 8000b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b60:	3396      	adds	r3, #150	; 0x96
 8000b62:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fd57 	bl	800561a <strcpy>
			break;
 8000b6c:	bf00      	nop
		}
	 posicion++;
 8000b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b72:	3301      	adds	r3, #1
 8000b74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	 argumento = strtok(NULL, ":"); //siguiente argumento
 8000b78:	4910      	ldr	r1, [pc, #64]	; (8000bbc <saveArguments+0x10c>)
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f004 fc7e 	bl	800547c <strtok>
 8000b80:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (posicion < nArgs ){
 8000b84:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbbb      	blt.n	8000b08 <saveArguments+0x58>
	}
	return resultado;
 8000b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ba0:	22c8      	movs	r2, #200	; 0xc8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f004 fd41 	bl	800562a <memcpy>
}
 8000ba8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	08007690 	.word	0x08007690

08000bc0 <comandoParaTestTool>:

int comandoParaTestTool (const char *comando){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0b4      	sub	sp, #208	; 0xd0
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	struct Comando c = saveArguments(comando);
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff6e 	bl	8000ab0 <saveArguments>
	if (strcmp(c.arg1, "testtool") == 0) {
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <comandoParaTestTool+0x34>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb30 	bl	8000240 <strcmp>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <comandoParaTestTool+0x2a>
		return 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <comandoParaTestTool+0x2c>
	}
	return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	37d0      	adds	r7, #208	; 0xd0
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08007694 	.word	0x08007694

08000bf8 <segundoArgumento>:

int segundoArgumento (const char *comando){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0b4      	sub	sp, #208	; 0xd0
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	struct Comando c = saveArguments(comando);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff52 	bl	8000ab0 <saveArguments>
	if ((strcmp(c.arg2, "relay") == 0) || (strcmp(c.arg2, "relay;") == 0)){
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	3332      	adds	r3, #50	; 0x32
 8000c12:	4922      	ldr	r1, [pc, #136]	; (8000c9c <segundoArgumento+0xa4>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fb13 	bl	8000240 <strcmp>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d009      	beq.n	8000c34 <segundoArgumento+0x3c>
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	3332      	adds	r3, #50	; 0x32
 8000c26:	491e      	ldr	r1, [pc, #120]	; (8000ca0 <segundoArgumento+0xa8>)
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fb09 	bl	8000240 <strcmp>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <segundoArgumento+0x40>
		return 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e02c      	b.n	8000c92 <segundoArgumento+0x9a>
	} else if ((strcmp(c.arg2, "dac") == 0) || (strcmp(c.arg2, "dac;") == 0)) {
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	3332      	adds	r3, #50	; 0x32
 8000c3e:	4919      	ldr	r1, [pc, #100]	; (8000ca4 <segundoArgumento+0xac>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fafd 	bl	8000240 <strcmp>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <segundoArgumento+0x68>
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	3332      	adds	r3, #50	; 0x32
 8000c52:	4915      	ldr	r1, [pc, #84]	; (8000ca8 <segundoArgumento+0xb0>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff faf3 	bl	8000240 <strcmp>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <segundoArgumento+0x6c>
		return 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	e016      	b.n	8000c92 <segundoArgumento+0x9a>
	} else  if ((strcmp(c.arg2, "current") == 0) || (strcmp(c.arg2, "current;") == 0)){
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	3332      	adds	r3, #50	; 0x32
 8000c6a:	4910      	ldr	r1, [pc, #64]	; (8000cac <segundoArgumento+0xb4>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fae7 	bl	8000240 <strcmp>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d009      	beq.n	8000c8c <segundoArgumento+0x94>
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	3332      	adds	r3, #50	; 0x32
 8000c7e:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <segundoArgumento+0xb8>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fadd 	bl	8000240 <strcmp>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <segundoArgumento+0x98>
		return 3;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <segundoArgumento+0x9a>
	}
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	37d0      	adds	r7, #208	; 0xd0
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	080076a0 	.word	0x080076a0
 8000ca0:	080076a8 	.word	0x080076a8
 8000ca4:	080076b0 	.word	0x080076b0
 8000ca8:	080076b4 	.word	0x080076b4
 8000cac:	080076bc 	.word	0x080076bc
 8000cb0:	080076c4 	.word	0x080076c4

08000cb4 <tercerArgumento>:

int tercerArgumento (const char *comando){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0b4      	sub	sp, #208	; 0xd0
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	struct Comando c = saveArguments(comando);
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fef4 	bl	8000ab0 <saveArguments>
	if ((strcmp(c.arg3, "set_voltage") == 0) || (strcmp(c.arg2, "set_voltage;") == 0)){
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	3364      	adds	r3, #100	; 0x64
 8000cce:	490c      	ldr	r1, [pc, #48]	; (8000d00 <tercerArgumento+0x4c>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fab5 	bl	8000240 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d009      	beq.n	8000cf0 <tercerArgumento+0x3c>
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	3332      	adds	r3, #50	; 0x32
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <tercerArgumento+0x50>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff faab 	bl	8000240 <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <tercerArgumento+0x40>
		return 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <tercerArgumento+0x42>
	}
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	37d0      	adds	r7, #208	; 0xd0
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	080076d0 	.word	0x080076d0
 8000d04:	080076dc 	.word	0x080076dc

08000d08 <cuartoArgumento>:

float cuartoArgumento (const char *comando){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b6      	sub	sp, #216	; 0xd8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	struct Comando c = saveArguments(comando);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff feca 	bl	8000ab0 <saveArguments>
	char *endptr;
	float voltage = strtof(c.arg4, &endptr);
 8000d1c:	f107 0208 	add.w	r2, r7, #8
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	3396      	adds	r3, #150	; 0x96
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 fa05 	bl	8005138 <strtof>
 8000d2e:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	return voltage;
 8000d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000d36:	ee07 3a90 	vmov	s15, r3
}
 8000d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3e:	37d8      	adds	r7, #216	; 0xd8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <calculate_voltage_register>:

uint16_t calculate_voltage_register(float voltage){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0a01 	vstr	s0, [r7, #4]
	  uint16_t volt = (voltage * 1023) / TENSION_MAX;
 8000d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d56:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000d90 <calculate_voltage_register+0x48>
 8000d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d62:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000d88 <calculate_voltage_register+0x40>
 8000d66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d6e:	ee17 3a90 	vmov	r3, s15
 8000d72:	81fb      	strh	r3, [r7, #14]
	  return volt;
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 }
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	f3af 8000 	nop.w
 8000d88:	66666666 	.word	0x66666666
 8000d8c:	400a6666 	.word	0x400a6666
 8000d90:	447fc000 	.word	0x447fc000

08000d94 <dac_set_voltage>:

void dac_set_voltage(uint8_t cmd, uint8_t *cmd_str, uint8_t vref, uint8_t pd, uint8_t gain, float voltage){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	461a      	mov	r2, r3
 8000da0:	ed87 0a01 	vstr	s0, [r7, #4]
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	460b      	mov	r3, r1
 8000daa:	73bb      	strb	r3, [r7, #14]
 8000dac:	4613      	mov	r3, r2
 8000dae:	737b      	strb	r3, [r7, #13]
	  voltage_value = calculate_voltage_register(voltage);
 8000db0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000db4:	f7ff ffc8 	bl	8000d48 <calculate_voltage_register>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <dac_set_voltage+0xc4>)
 8000dbe:	801a      	strh	r2, [r3, #0]
	  tmp = (cmd & 0x07) << 5; //primeros 3 bits de cfg_byte
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	015b      	lsls	r3, r3, #5
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <dac_set_voltage+0xc8>)
 8000dc8:	701a      	strb	r2, [r3, #0]
	  tmp = tmp | ((vref & 0x03) << 4); // 4º y 5º bit de cfg_byte
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <dac_set_voltage+0xc8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <dac_set_voltage+0xc8>)
 8000de4:	701a      	strb	r2, [r3, #0]
	  tmp = tmp | ((pd & 0x03) << 1); // 6º y 7º bit de cfg_byte
 8000de6:	7b7b      	ldrb	r3, [r7, #13]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f003 0306 	and.w	r3, r3, #6
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <dac_set_voltage+0xc8>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <dac_set_voltage+0xc8>)
 8000e00:	701a      	strb	r2, [r3, #0]
	  tmp = tmp | gain; // 8º bit de cfg_byte
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <dac_set_voltage+0xc8>)
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	7e3b      	ldrb	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <dac_set_voltage+0xc8>)
 8000e0e:	701a      	strb	r2, [r3, #0]
	  cfg_byte = tmp;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <dac_set_voltage+0xc8>)
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <dac_set_voltage+0xcc>)
 8000e16:	701a      	strb	r2, [r3, #0]
	  voltage_byte_0 = voltage_value >> 2; // 8 primeros bits de voltage_value
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <dac_set_voltage+0xc4>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <dac_set_voltage+0xd0>)
 8000e24:	701a      	strb	r2, [r3, #0]
	  voltage_byte_1 = (voltage_value & 0x03) << 6; // 2 últimos bits de voltage_value
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <dac_set_voltage+0xc4>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <dac_set_voltage+0xd4>)
 8000e30:	701a      	strb	r2, [r3, #0]
	  cmd_str[0] = cfg_byte;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <dac_set_voltage+0xcc>)
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	701a      	strb	r2, [r3, #0]
	  cmd_str[1] = voltage_byte_0;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <dac_set_voltage+0xd0>)
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	701a      	strb	r2, [r3, #0]
	  cmd_str[2] = voltage_byte_1;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3302      	adds	r3, #2
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <dac_set_voltage+0xd4>)
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001f2 	.word	0x200001f2
 8000e5c:	200001f6 	.word	0x200001f6
 8000e60:	200001f0 	.word	0x200001f0
 8000e64:	200001f4 	.word	0x200001f4
 8000e68:	200001f5 	.word	0x200001f5

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e72:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 fe0d 	bl	8001a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 fac8 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 fb92 	bl	80015a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e80:	f000 fb60 	bl	8001544 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000e84:	f000 fb1e 	bl	80014c4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t dataR[BUFFER_SIZE]; //Buffer para almacenar los datos recibidos
  uint8_t charRecibido; //Variable para almacenar el carácter recibido
  int indice = 0; // �?ndice para rastrear la posición actual en el buffer
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //const char *comandoUsuario = ":testtool;";
  uint8_t comandoValido[] = "El formato del comando es válido \r\n";
 8000e8e:	4bc0      	ldr	r3, [pc, #768]	; (8001190 <main+0x324>)
 8000e90:	f507 745d 	add.w	r4, r7, #884	; 0x374
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ea2:	6020      	str	r0, [r4, #0]
 8000ea4:	3404      	adds	r4, #4
 8000ea6:	7021      	strb	r1, [r4, #0]
  uint8_t comandoIncorrecto[] = "El formato del comando no es válido \r\n";
 8000ea8:	4bba      	ldr	r3, [pc, #744]	; (8001194 <main+0x328>)
 8000eaa:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 8000eae:	461d      	mov	r5, r3
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ebc:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t comandoTestTool[] = "Comando para TestTool \r\n";
 8000ec0:	4bb5      	ldr	r3, [pc, #724]	; (8001198 <main+0x32c>)
 8000ec2:	f507 744c 	add.w	r4, r7, #816	; 0x330
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ecc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ed0:	c403      	stmia	r4!, {r0, r1}
 8000ed2:	7022      	strb	r2, [r4, #0]
  uint8_t comandoDevice[] = "Comando para device \r\n";
 8000ed4:	4bb1      	ldr	r3, [pc, #708]	; (800119c <main+0x330>)
 8000ed6:	f507 7446 	add.w	r4, r7, #792	; 0x318
 8000eda:	461d      	mov	r5, r3
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee4:	6020      	str	r0, [r4, #0]
 8000ee6:	3404      	adds	r4, #4
 8000ee8:	8021      	strh	r1, [r4, #0]
 8000eea:	3402      	adds	r4, #2
 8000eec:	0c0b      	lsrs	r3, r1, #16
 8000eee:	7023      	strb	r3, [r4, #0]
  char *error = "Error al enviar el valor al DAC \r\n";
 8000ef0:	4bab      	ldr	r3, [pc, #684]	; (80011a0 <main+0x334>)
 8000ef2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
  char *valido = "Valor enviado al DAC con éxito \r\n";
 8000ef6:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <main+0x338>)
 8000ef8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

  uint8_t e[] = "Error \r\n";
 8000efc:	4aaa      	ldr	r2, [pc, #680]	; (80011a8 <main+0x33c>)
 8000efe:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8000f02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f04:	c303      	stmia	r3!, {r0, r1}
 8000f06:	701a      	strb	r2, [r3, #0]
  uint8_t comandoRelay[] = "Comando para relay \r\n";
 8000f08:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f10:	4aa6      	ldr	r2, [pc, #664]	; (80011ac <main+0x340>)
 8000f12:	461c      	mov	r4, r3
 8000f14:	4615      	mov	r5, r2
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f1e:	6020      	str	r0, [r4, #0]
 8000f20:	3404      	adds	r4, #4
 8000f22:	8021      	strh	r1, [r4, #0]
  uint8_t comandoDac[] = "Comando para dac \r\n";
 8000f24:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000f28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f2c:	4aa0      	ldr	r2, [pc, #640]	; (80011b0 <main+0x344>)
 8000f2e:	461c      	mov	r4, r3
 8000f30:	4615      	mov	r5, r2
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	682b      	ldr	r3, [r5, #0]
 8000f38:	6023      	str	r3, [r4, #0]
  uint8_t comandoCurrent[] = "Comando para current sensor \r\n";
 8000f3a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000f3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f42:	4a9c      	ldr	r2, [pc, #624]	; (80011b4 <main+0x348>)
 8000f44:	461c      	mov	r4, r3
 8000f46:	4615      	mov	r5, r2
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f50:	c407      	stmia	r4!, {r0, r1, r2}
 8000f52:	8023      	strh	r3, [r4, #0]
 8000f54:	3402      	adds	r4, #2
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	7023      	strb	r3, [r4, #0]

  uint8_t str_end = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
  char msj3[100];
  char msj4[100];

  while (1)
  {
	  if (HAL_UART_Receive(&huart3, &charRecibido, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000f60:	f207 319f 	addw	r1, r7, #927	; 0x39f
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4893      	ldr	r0, [pc, #588]	; (80011b8 <main+0x34c>)
 8000f6c:	f002 fe35 	bl	8003bda <HAL_UART_Receive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d131      	bne.n	8000fda <main+0x16e>
	      // Verifica si el carácter recibido es un Enter (código ASCII 13)
		 // if (charRecibido == '\r' || charRecibido == '\n') {
	      if (charRecibido == ';') {
 8000f76:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 8000f7a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f7c:	d110      	bne.n	8000fa0 <main+0x134>
	          // Si se presionó Enter, transmite los datos recibidos de vuelta a través de UART3
	          HAL_UART_Transmit(&huart3, dataR, indice, HAL_MAX_DELAY);
 8000f7e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	488a      	ldr	r0, [pc, #552]	; (80011b8 <main+0x34c>)
 8000f8e:	f002 fda1 	bl	8003ad4 <HAL_UART_Transmit>
	          //memset(dataR, 0, BUFFER_SIZE); // Limpia el buffer después de la transmisión
	          indice = 0; 	          // Reinicia el índice del buffer
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
	          str_end = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
 8000f9e:	e01c      	b.n	8000fda <main+0x16e>
	      } else {
	          // Si no es Enter, almacena el carácter en el buffer y aumenta el índice
	          dataR[indice++] = charRecibido;
 8000fa0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8000faa:	f897 239f 	ldrb.w	r2, [r7, #927]	; 0x39f
 8000fae:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f803 2c58 	strb.w	r2, [r3, #-88]
	          if (indice >= BUFFER_SIZE) { // Verifica si el índice supera el tamaño del buffer
 8000fb8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000fbc:	2b3f      	cmp	r3, #63	; 0x3f
 8000fbe:	dd0c      	ble.n	8000fda <main+0x16e>
	              // Si el buffer está lleno, transmite los datos y reinicia el buffer y el índice
	              HAL_UART_Transmit(&huart3, dataR, indice, HAL_MAX_DELAY);
 8000fc0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	487a      	ldr	r0, [pc, #488]	; (80011b8 <main+0x34c>)
 8000fd0:	f002 fd80 	bl	8003ad4 <HAL_UART_Transmit>
	              //memset(dataR, 0, BUFFER_SIZE);
	              indice = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
	          }
	      }
	  }

	  if (str_end == 1){
 8000fda:	f897 33f3 	ldrb.w	r3, [r7, #1011]	; 0x3f3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d1be      	bne.n	8000f60 <main+0xf4>
		  str_end = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
		  if (formatoValido ((char*)dataR)){
 8000fe8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fd01 	bl	80009f4 <formatoValido>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 81e3 	beq.w	80013c0 <main+0x554>
			  HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2202      	movs	r2, #2
 8001000:	496e      	ldr	r1, [pc, #440]	; (80011bc <main+0x350>)
 8001002:	486d      	ldr	r0, [pc, #436]	; (80011b8 <main+0x34c>)
 8001004:	f002 fd66 	bl	8003ad4 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, comandoValido, sizeof(comandoValido), HAL_MAX_DELAY);
 8001008:	f507 715d 	add.w	r1, r7, #884	; 0x374
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	2225      	movs	r2, #37	; 0x25
 8001012:	4869      	ldr	r0, [pc, #420]	; (80011b8 <main+0x34c>)
 8001014:	f002 fd5e 	bl	8003ad4 <HAL_UART_Transmit>
			  int nArgs = numArgumentos((char*)dataR);
 8001018:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd1c 	bl	8000a5a <numArgumentos>
 8001022:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
			  snprintf(msj, sizeof(msj), "El comando tiene %i argumentos\r\n", nArgs);
 8001026:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800102a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800102e:	4a64      	ldr	r2, [pc, #400]	; (80011c0 <main+0x354>)
 8001030:	2164      	movs	r1, #100	; 0x64
 8001032:	f004 f991 	bl	8005358 <sniprintf>
			  HAL_UART_Transmit(&huart3,(uint8_t*)msj,strlen(msj), HAL_MAX_DELAY);
 8001036:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f90a 	bl	8000254 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	485a      	ldr	r0, [pc, #360]	; (80011b8 <main+0x34c>)
 800104e:	f002 fd41 	bl	8003ad4 <HAL_UART_Transmit>
			  struct Comando res = saveArguments((char*)dataR);
 8001052:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001056:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800105a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fd25 	bl	8000ab0 <saveArguments>
			  switch (nArgs){
 8001066:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800106a:	3b01      	subs	r3, #1
 800106c:	2b03      	cmp	r3, #3
 800106e:	f200 8107 	bhi.w	8001280 <main+0x414>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <main+0x20c>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001089 	.word	0x08001089
 800107c:	080010b5 	.word	0x080010b5
 8001080:	0800110d 	.word	0x0800110d
 8001084:	080011d1 	.word	0x080011d1
			  case 1:
				  snprintf(msj1, sizeof(msj1), "El primer argumento es %s \r\n", res.arg1);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 800108e:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <main+0x358>)
 8001090:	2164      	movs	r1, #100	; 0x64
 8001092:	f004 f961 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj1,strlen(msj1), HAL_MAX_DELAY);
 8001096:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f8da 	bl	8000254 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	4842      	ldr	r0, [pc, #264]	; (80011b8 <main+0x34c>)
 80010ae:	f002 fd11 	bl	8003ad4 <HAL_UART_Transmit>
				  break;
 80010b2:	e0e5      	b.n	8001280 <main+0x414>
			  case 2:
				  snprintf(msj1, sizeof(msj1), "El primer argumento es %s \r\n", res.arg1);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 80010ba:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <main+0x358>)
 80010bc:	2164      	movs	r1, #100	; 0x64
 80010be:	f004 f94b 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj1,strlen(msj1), HAL_MAX_DELAY);
 80010c2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f8c4 	bl	8000254 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	4837      	ldr	r0, [pc, #220]	; (80011b8 <main+0x34c>)
 80010da:	f002 fcfb 	bl	8003ad4 <HAL_UART_Transmit>
				  snprintf(msj2, sizeof(msj2), "El segundo argumento es %s \r\n", res.arg2);
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	3332      	adds	r3, #50	; 0x32
 80010e2:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 80010e6:	4a38      	ldr	r2, [pc, #224]	; (80011c8 <main+0x35c>)
 80010e8:	2164      	movs	r1, #100	; 0x64
 80010ea:	f004 f935 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj2,strlen(msj2), HAL_MAX_DELAY);
 80010ee:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f8ae 	bl	8000254 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <main+0x34c>)
 8001106:	f002 fce5 	bl	8003ad4 <HAL_UART_Transmit>
				  break;
 800110a:	e0b9      	b.n	8001280 <main+0x414>
			  case 3:
				  snprintf(msj1, sizeof(msj1), "El primer argumento es %s \r\n", res.arg1);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <main+0x358>)
 8001114:	2164      	movs	r1, #100	; 0x64
 8001116:	f004 f91f 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj1,strlen(msj1), HAL_MAX_DELAY);
 800111a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f898 	bl	8000254 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	4821      	ldr	r0, [pc, #132]	; (80011b8 <main+0x34c>)
 8001132:	f002 fccf 	bl	8003ad4 <HAL_UART_Transmit>
				  snprintf(msj2, sizeof(msj2), "El segundo argumento es %s \r\n", res.arg2);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	3332      	adds	r3, #50	; 0x32
 800113a:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <main+0x35c>)
 8001140:	2164      	movs	r1, #100	; 0x64
 8001142:	f004 f909 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj2,strlen(msj2), HAL_MAX_DELAY);
 8001146:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f882 	bl	8000254 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	4816      	ldr	r0, [pc, #88]	; (80011b8 <main+0x34c>)
 800115e:	f002 fcb9 	bl	8003ad4 <HAL_UART_Transmit>
				  snprintf(msj3, sizeof(msj3), "El tercer argumento es %s \r\n", res.arg3);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	3364      	adds	r3, #100	; 0x64
 8001166:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <main+0x360>)
 800116c:	2164      	movs	r1, #100	; 0x64
 800116e:	f004 f8f3 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj3,strlen(msj3), HAL_MAX_DELAY);
 8001172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f86c 	bl	8000254 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <main+0x34c>)
 800118a:	f002 fca3 	bl	8003ad4 <HAL_UART_Transmit>
				  break;
 800118e:	e077      	b.n	8001280 <main+0x414>
 8001190:	080077dc 	.word	0x080077dc
 8001194:	08007804 	.word	0x08007804
 8001198:	0800782c 	.word	0x0800782c
 800119c:	08007848 	.word	0x08007848
 80011a0:	080076ec 	.word	0x080076ec
 80011a4:	08007710 	.word	0x08007710
 80011a8:	08007860 	.word	0x08007860
 80011ac:	0800786c 	.word	0x0800786c
 80011b0:	08007884 	.word	0x08007884
 80011b4:	08007898 	.word	0x08007898
 80011b8:	2000024c 	.word	0x2000024c
 80011bc:	08007734 	.word	0x08007734
 80011c0:	08007738 	.word	0x08007738
 80011c4:	0800775c 	.word	0x0800775c
 80011c8:	0800777c 	.word	0x0800777c
 80011cc:	0800779c 	.word	0x0800779c
			  case 4:
				  snprintf(msj1, sizeof(msj1), "El primer argumento es %s \r\n", res.arg1);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 80011d6:	4a86      	ldr	r2, [pc, #536]	; (80013f0 <main+0x584>)
 80011d8:	2164      	movs	r1, #100	; 0x64
 80011da:	f004 f8bd 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj1,strlen(msj1), HAL_MAX_DELAY);
 80011de:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f836 	bl	8000254 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	487f      	ldr	r0, [pc, #508]	; (80013f4 <main+0x588>)
 80011f6:	f002 fc6d 	bl	8003ad4 <HAL_UART_Transmit>
				  snprintf(msj2, sizeof(msj2), "El segundo argumento es %s \r\n", res.arg2);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	3332      	adds	r3, #50	; 0x32
 80011fe:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 8001202:	4a7d      	ldr	r2, [pc, #500]	; (80013f8 <main+0x58c>)
 8001204:	2164      	movs	r1, #100	; 0x64
 8001206:	f004 f8a7 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj2,strlen(msj2), HAL_MAX_DELAY);
 800120a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f820 	bl	8000254 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	4874      	ldr	r0, [pc, #464]	; (80013f4 <main+0x588>)
 8001222:	f002 fc57 	bl	8003ad4 <HAL_UART_Transmit>
				  snprintf(msj3, sizeof(msj3), "El tercer argumento es %s \r\n", res.arg3);
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	3364      	adds	r3, #100	; 0x64
 800122a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800122e:	4a73      	ldr	r2, [pc, #460]	; (80013fc <main+0x590>)
 8001230:	2164      	movs	r1, #100	; 0x64
 8001232:	f004 f891 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj3,strlen(msj3), HAL_MAX_DELAY);
 8001236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f80a 	bl	8000254 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	4869      	ldr	r0, [pc, #420]	; (80013f4 <main+0x588>)
 800124e:	f002 fc41 	bl	8003ad4 <HAL_UART_Transmit>
				  snprintf(msj4, sizeof(msj4), "El cuarto argumento es %s \r\n", res.arg4);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	3396      	adds	r3, #150	; 0x96
 8001256:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 800125a:	4a69      	ldr	r2, [pc, #420]	; (8001400 <main+0x594>)
 800125c:	2164      	movs	r1, #100	; 0x64
 800125e:	f004 f87b 	bl	8005358 <sniprintf>
				  HAL_UART_Transmit(&huart3,(uint8_t*)msj4,strlen(msj4), HAL_MAX_DELAY);
 8001262:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe fff4 	bl	8000254 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	485e      	ldr	r0, [pc, #376]	; (80013f4 <main+0x588>)
 800127a:	f002 fc2b 	bl	8003ad4 <HAL_UART_Transmit>
				  break;
 800127e:	bf00      	nop
			  }
			  if (comandoParaTestTool((char*)dataR)){
 8001280:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fc9b 	bl	8000bc0 <comandoParaTestTool>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8087 	beq.w	80013a0 <main+0x534>
				  HAL_UART_Transmit(&huart3, comandoTestTool, sizeof(comandoTestTool), HAL_MAX_DELAY);
 8001292:	f507 714c 	add.w	r1, r7, #816	; 0x330
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	2219      	movs	r2, #25
 800129c:	4855      	ldr	r0, [pc, #340]	; (80013f4 <main+0x588>)
 800129e:	f002 fc19 	bl	8003ad4 <HAL_UART_Transmit>
				  switch (segundoArgumento((char*)dataR)){
 80012a2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fca6 	bl	8000bf8 <segundoArgumento>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d86e      	bhi.n	8001390 <main+0x524>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <main+0x44c>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	080012c9 	.word	0x080012c9
 80012bc:	080012db 	.word	0x080012db
 80012c0:	080012ed 	.word	0x080012ed
 80012c4:	0800137d 	.word	0x0800137d
					  case 0:
						  HAL_UART_Transmit(&huart3, e, sizeof(e), HAL_MAX_DELAY);
 80012c8:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	2209      	movs	r2, #9
 80012d2:	4848      	ldr	r0, [pc, #288]	; (80013f4 <main+0x588>)
 80012d4:	f002 fbfe 	bl	8003ad4 <HAL_UART_Transmit>
						  break;
 80012d8:	e05a      	b.n	8001390 <main+0x524>
					  case 1:
						  HAL_UART_Transmit(&huart3, comandoRelay, sizeof(comandoRelay), HAL_MAX_DELAY);
 80012da:	f507 713d 	add.w	r1, r7, #756	; 0x2f4
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	2216      	movs	r2, #22
 80012e4:	4843      	ldr	r0, [pc, #268]	; (80013f4 <main+0x588>)
 80012e6:	f002 fbf5 	bl	8003ad4 <HAL_UART_Transmit>
						  break;
 80012ea:	e051      	b.n	8001390 <main+0x524>
					  case 2:
						  HAL_UART_Transmit(&huart3, comandoDac, sizeof(comandoDac), HAL_MAX_DELAY);
 80012ec:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	2214      	movs	r2, #20
 80012f6:	483f      	ldr	r0, [pc, #252]	; (80013f4 <main+0x588>)
 80012f8:	f002 fbec 	bl	8003ad4 <HAL_UART_Transmit>
						  if (tercerArgumento((char*)dataR) == 1){
 80012fc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fcd7 	bl	8000cb4 <tercerArgumento>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d140      	bne.n	800138e <main+0x522>
							  float volt = cuartoArgumento((char*) dataR);
 800130c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fcf9 	bl	8000d08 <cuartoArgumento>
 8001316:	ed87 0af8 	vstr	s0, [r7, #992]	; 0x3e0
							  dac_set_voltage(DAC_CMD_SET_VOLTAGE_VOLATIL, cmd_str, DAC_VREF_VDD, DAC_PD_ON, DAC_GAIN_1, volt);
 800131a:	f507 7167 	add.w	r1, r7, #924	; 0x39c
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	ed97 0af8 	vldr	s0, [r7, #992]	; 0x3e0
 8001326:	2300      	movs	r3, #0
 8001328:	2200      	movs	r2, #0
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff fd32 	bl	8000d94 <dac_set_voltage>
							  if (HAL_I2C_Master_Transmit(&hi2c2, DAC_ADDR<<1, cmd_str, 3, 1000) != HAL_OK) {
 8001330:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2303      	movs	r3, #3
 800133c:	21c2      	movs	r1, #194	; 0xc2
 800133e:	4831      	ldr	r0, [pc, #196]	; (8001404 <main+0x598>)
 8001340:	f000 ff40 	bl	80021c4 <HAL_I2C_Master_Transmit>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <main+0x4f6>
								  HAL_UART_Transmit(&huart3, (uint8_t*) error, strlen(error), 100);
 800134a:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 800134e:	f7fe ff81 	bl	8000254 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800135c:	4825      	ldr	r0, [pc, #148]	; (80013f4 <main+0x588>)
 800135e:	f002 fbb9 	bl	8003ad4 <HAL_UART_Transmit>
								}
							   HAL_UART_Transmit(&huart3, (uint8_t*) valido, strlen(valido), 100);
 8001362:	f8d7 03e8 	ldr.w	r0, [r7, #1000]	; 0x3e8
 8001366:	f7fe ff75 	bl	8000254 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	2364      	movs	r3, #100	; 0x64
 8001370:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <main+0x588>)
 8001376:	f002 fbad 	bl	8003ad4 <HAL_UART_Transmit>
						  }
						  break;
 800137a:	e008      	b.n	800138e <main+0x522>
					  case 3:
						  HAL_UART_Transmit(&huart3, comandoCurrent, sizeof(comandoCurrent), HAL_MAX_DELAY);
 800137c:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	221f      	movs	r2, #31
 8001386:	481b      	ldr	r0, [pc, #108]	; (80013f4 <main+0x588>)
 8001388:	f002 fba4 	bl	8003ad4 <HAL_UART_Transmit>
						  break;
 800138c:	e000      	b.n	8001390 <main+0x524>
						  break;
 800138e:	bf00      	nop
				  }
				  memset(dataR, 0, BUFFER_SIZE);
 8001390:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001394:	2240      	movs	r2, #64	; 0x40
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f004 f854 	bl	8005446 <memset>
 800139e:	e5df      	b.n	8000f60 <main+0xf4>
			  } else {
			  HAL_UART_Transmit(&huart3, comandoDevice, sizeof(comandoDevice), HAL_MAX_DELAY);
 80013a0:	f507 7146 	add.w	r1, r7, #792	; 0x318
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	2217      	movs	r2, #23
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <main+0x588>)
 80013ac:	f002 fb92 	bl	8003ad4 <HAL_UART_Transmit>
			  memset(dataR, 0, BUFFER_SIZE);
 80013b0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f844 	bl	8005446 <memset>
 80013be:	e5cf      	b.n	8000f60 <main+0xf4>
			  }
		  } else {
			  HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	2202      	movs	r2, #2
 80013c6:	4910      	ldr	r1, [pc, #64]	; (8001408 <main+0x59c>)
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <main+0x588>)
 80013ca:	f002 fb83 	bl	8003ad4 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, comandoIncorrecto, sizeof(comandoIncorrecto), HAL_MAX_DELAY);
 80013ce:	f507 7153 	add.w	r1, r7, #844	; 0x34c
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <main+0x588>)
 80013da:	f002 fb7b 	bl	8003ad4 <HAL_UART_Transmit>
			  memset(dataR, 0, BUFFER_SIZE);
 80013de:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f82d 	bl	8005446 <memset>
	  if (HAL_UART_Receive(&huart3, &charRecibido, 1, HAL_MAX_DELAY) == HAL_OK) {
 80013ec:	e5b8      	b.n	8000f60 <main+0xf4>
 80013ee:	bf00      	nop
 80013f0:	0800775c 	.word	0x0800775c
 80013f4:	2000024c 	.word	0x2000024c
 80013f8:	0800777c 	.word	0x0800777c
 80013fc:	0800779c 	.word	0x0800779c
 8001400:	080077bc 	.word	0x080077bc
 8001404:	200001f8 	.word	0x200001f8
 8001408:	08007734 	.word	0x08007734

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	; 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	2234      	movs	r2, #52	; 0x34
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f004 f813 	bl	8005446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SystemClock_Config+0xb0>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xb0>)
 8001436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xb0>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <SystemClock_Config+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <SystemClock_Config+0xb4>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <SystemClock_Config+0xb4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001464:	2302      	movs	r3, #2
 8001466:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001468:	2301      	movs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146c:	2310      	movs	r3, #16
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4618      	mov	r0, r3
 800147a:	f001 fa21 	bl	80028c0 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001484:	f000 f8f2 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fcba 	bl	8002e1c <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014ae:	f000 f8dd 	bl	800166c <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	; 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_I2C2_Init+0x74>)
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <MX_I2C2_Init+0x78>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_I2C2_Init+0x74>)
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <MX_I2C2_Init+0x7c>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_I2C2_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_I2C2_Init+0x74>)
 80014dc:	2201      	movs	r2, #1
 80014de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_I2C2_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_I2C2_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C2_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C2_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C2_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_I2C2_Init+0x74>)
 8001500:	f000 fdd0 	bl	80020a4 <HAL_I2C_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800150a:	f000 f8af 	bl	800166c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <MX_I2C2_Init+0x74>)
 8001512:	f001 f93d 	bl	8002790 <HAL_I2CEx_ConfigAnalogFilter>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800151c:	f000 f8a6 	bl	800166c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_I2C2_Init+0x74>)
 8001524:	f001 f97f 	bl	8002826 <HAL_I2CEx_ConfigDigitalFilter>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800152e:	f000 f89d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001f8 	.word	0x200001f8
 800153c:	40005800 	.word	0x40005800
 8001540:	00303d5b 	.word	0x00303d5b

08001544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_USART3_UART_Init+0x58>)
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <MX_USART3_UART_Init+0x5c>)
 800154c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_USART3_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_USART3_UART_Init+0x58>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_USART3_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_USART3_UART_Init+0x58>)
 8001588:	f002 fa56 	bl	8003a38 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001592:	f000 f86b 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000024c 	.word	0x2000024c
 80015a0:	40004800 	.word	0x40004800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a29      	ldr	r2, [pc, #164]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_GPIO_Init+0xc0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_GPIO_Init+0xc0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <MX_GPIO_Init+0xc4>)
 800163a:	f000 fd19 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800163e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_GPIO_Init+0xc4>)
 8001658:	f000 fb5e 	bl	8001d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x44>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x44>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x44>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x44>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x44>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x44>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0ae      	sub	sp, #184	; 0xb8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2290      	movs	r2, #144	; 0x90
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 feb0 	bl	8005446 <memset>
  if(hi2c->Instance==I2C2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_I2C_MspInit+0xb0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d13b      	bne.n	8001768 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 fd72 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800170a:	f7ff ffaf 	bl	800166c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800173e:	2304      	movs	r3, #4
 8001740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001744:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001748:	4619      	mov	r1, r3
 800174a:	480b      	ldr	r0, [pc, #44]	; (8001778 <HAL_I2C_MspInit+0xb8>)
 800174c:	f000 fae4 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	37b8      	adds	r7, #184	; 0xb8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40005800 	.word	0x40005800
 8001774:	40023800 	.word	0x40023800
 8001778:	40021400 	.word	0x40021400

0800177c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0ae      	sub	sp, #184	; 0xb8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2290      	movs	r2, #144	; 0x90
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f003 fe52 	bl	8005446 <memset>
  if(huart->Instance==USART3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_UART_MspInit+0xb4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d13c      	bne.n	8001826 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fd14 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017c6:	f7ff ff51 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001814:	2307      	movs	r3, #7
 8001816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_UART_MspInit+0xbc>)
 8001822:	f000 fa79 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	37b8      	adds	r7, #184	; 0xb8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40004800 	.word	0x40004800
 8001834:	40023800 	.word	0x40023800
 8001838:	40020c00 	.word	0x40020c00

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f940 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018aa:	f003 fe89 	bl	80055c0 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	e7fe      	b.n	80018d2 <_exit+0x12>

080018d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
  }

  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e009      	b.n	8001934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf1      	blt.n	8001920 <_write+0x12>
  }
  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:

int _close(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196e:	605a      	str	r2, [r3, #4]
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f003 fdee 	bl	80055c0 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20080000 	.word	0x20080000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	200002d4 	.word	0x200002d4
 8001a18:	20000428 	.word	0x20000428

08001a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a46:	490e      	ldr	r1, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a5c:	4c0b      	ldr	r4, [pc, #44]	; (8001a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a6a:	f7ff ffd7 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f003 fdad 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7ff f9fb 	bl	8000e6c <main>
  bx  lr    
 8001a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a84:	08007cf0 	.word	0x08007cf0
  ldr r2, =_sbss
 8001a88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a8c:	20000428 	.word	0x20000428

08001a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC_IRQHandler>

08001a92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a96:	2003      	movs	r0, #3
 8001a98:	f000 f90a 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9c:	200f      	movs	r0, #15
 8001a9e:	f000 f805 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa2:	f7ff fde9 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f917 	bl	8001cfe <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 f8ed 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	200002d8 	.word	0x200002d8

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200002d8 	.word	0x200002d8

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <__NVIC_SetPriorityGrouping+0x40>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <__NVIC_SetPriorityGrouping+0x40>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	05fa0000 	.word	0x05fa0000

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff47 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff5c 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffb0 	bl	8001c6c <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e175      	b.n	8002024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8164 	bne.w	800201e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x56>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80be 	beq.w	800201e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_GPIO_Init+0x324>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_GPIO_Init+0x324>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_GPIO_Init+0x324>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eba:	4a61      	ldr	r2, [pc, #388]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_GPIO_Init+0x32c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d037      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x334>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a54      	ldr	r2, [pc, #336]	; (8002054 <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a53      	ldr	r2, [pc, #332]	; (8002058 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a50      	ldr	r2, [pc, #320]	; (8002064 <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f2e:	2309      	movs	r3, #9
 8001f30:	e012      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f32:	230a      	movs	r3, #10
 8001f34:	e010      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_GPIO_Init+0x354>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_GPIO_Init+0x354>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_GPIO_Init+0x354>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_GPIO_Init+0x354>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_GPIO_Init+0x354>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae86 	bls.w	8001d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40022000 	.word	0x40022000
 8002068:	40022400 	.word	0x40022400
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff faf8 	bl	80016c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002104:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e006      	b.n	800212c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800212a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d104      	bne.n	800213e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_I2C_Init+0x11c>)
 800214a:	430b      	orrs	r3, r1
 800214c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69d9      	ldr	r1, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	02008000 	.word	0x02008000

080021c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	461a      	mov	r2, r3
 80021d0:	460b      	mov	r3, r1
 80021d2:	817b      	strh	r3, [r7, #10]
 80021d4:	4613      	mov	r3, r2
 80021d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	f040 80da 	bne.w	800239a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2C_Master_Transmit+0x30>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e0d3      	b.n	800239c <HAL_I2C_Master_Transmit+0x1d8>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021fc:	f7ff fc9a 	bl	8001b34 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2319      	movs	r3, #25
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8f0 	bl	80023f4 <I2C_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0be      	b.n	800239c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2221      	movs	r2, #33	; 0x21
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2210      	movs	r2, #16
 800222a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	893a      	ldrh	r2, [r7, #8]
 800223e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	d90e      	bls.n	800226e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	22ff      	movs	r2, #255	; 0xff
 8002254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	b2da      	uxtb	r2, r3
 800225c:	8979      	ldrh	r1, [r7, #10]
 800225e:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fa60 	bl	800272c <I2C_TransferConfig>
 800226c:	e06c      	b.n	8002348 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	b2da      	uxtb	r2, r3
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fa4f 	bl	800272c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800228e:	e05b      	b.n	8002348 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	6a39      	ldr	r1, [r7, #32]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f8ed 	bl	8002474 <I2C_WaitOnTXISFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e07b      	b.n	800239c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d034      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x184>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d130      	bne.n	8002348 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f87f 	bl	80023f4 <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e04d      	b.n	800239c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d90e      	bls.n	8002328 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	b2da      	uxtb	r2, r3
 8002316:	8979      	ldrh	r1, [r7, #10]
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa03 	bl	800272c <I2C_TransferConfig>
 8002326:	e00f      	b.n	8002348 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	b2da      	uxtb	r2, r3
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f9f2 	bl	800272c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d19e      	bne.n	8002290 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f8cc 	bl	80024f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e01a      	b.n	800239c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2220      	movs	r2, #32
 800236c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800237a:	400b      	ands	r3, r1
 800237c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	80002000 	.word	0x80002000
 80023a8:	fe00e800 	.word	0xfe00e800

080023ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d103      	bne.n	80023ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d007      	beq.n	80023e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	619a      	str	r2, [r3, #24]
  }
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002404:	e022      	b.n	800244c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d01e      	beq.n	800244c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240e:	f7ff fb91 	bl	8001b34 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d302      	bcc.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d113      	bne.n	800244c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e00f      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	429a      	cmp	r2, r3
 8002468:	d0cd      	beq.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002480:	e02c      	b.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f870 	bl	800256c <I2C_IsErrorOccurred>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e02a      	b.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d01e      	beq.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff fb49 	bl	8001b34 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d113      	bne.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d1cb      	bne.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002500:	e028      	b.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f830 	bl	800256c <I2C_IsErrorOccurred>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e026      	b.n	8002564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7ff fb0d 	bl	8001b34 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d113      	bne.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b20      	cmp	r3, #32
 8002560:	d1cf      	bne.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d068      	beq.n	800266a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2210      	movs	r2, #16
 800259e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025a0:	e049      	b.n	8002636 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d045      	beq.n	8002636 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7ff fac3 	bl	8001b34 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_IsErrorOccurred+0x54>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d13a      	bne.n	8002636 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e2:	d121      	bne.n	8002628 <I2C_IsErrorOccurred+0xbc>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ea:	d01d      	beq.n	8002628 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d01a      	beq.n	8002628 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002600:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002602:	f7ff fa97 	bl	8001b34 <HAL_GetTick>
 8002606:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	e00e      	b.n	8002628 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800260a:	f7ff fa93 	bl	8001b34 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b19      	cmp	r3, #25
 8002616:	d907      	bls.n	8002628 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f043 0320 	orr.w	r3, r3, #32
 800261e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002626:	e006      	b.n	8002636 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	d1e9      	bne.n	800260a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b20      	cmp	r3, #32
 8002642:	d003      	beq.n	800264c <I2C_IsErrorOccurred+0xe0>
 8002644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0aa      	beq.n	80025a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800264c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2220      	movs	r2, #32
 800265a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01c      	beq.n	800271a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fe63 	bl	80023ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <I2C_IsErrorOccurred+0x1bc>)
 80026f2:	400b      	ands	r3, r1
 80026f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800271a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800271e:	4618      	mov	r0, r3
 8002720:	3728      	adds	r7, #40	; 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	fe00e800 	.word	0xfe00e800

0800272c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	4613      	mov	r3, r2
 800273c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002744:	7a7b      	ldrb	r3, [r7, #9]
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800274c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	4313      	orrs	r3, r2
 8002756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800275a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	0d5b      	lsrs	r3, r3, #21
 8002766:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <I2C_TransferConfig+0x60>)
 800276c:	430b      	orrs	r3, r1
 800276e:	43db      	mvns	r3, r3
 8002770:	ea02 0103 	and.w	r1, r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	03ff63ff 	.word	0x03ff63ff

08002790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d138      	bne.n	8002818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e032      	b.n	800281a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002818:	2302      	movs	r3, #2
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	d139      	bne.n	80028b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002846:	2302      	movs	r3, #2
 8002848:	e033      	b.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2224      	movs	r2, #36	; 0x24
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028c8:	2300      	movs	r3, #0
 80028ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e29b      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8087 	beq.w	80029f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	4b96      	ldr	r3, [pc, #600]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d00c      	beq.n	800290a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f0:	4b93      	ldr	r3, [pc, #588]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d112      	bne.n	8002922 <HAL_RCC_OscConfig+0x62>
 80028fc:	4b90      	ldr	r3, [pc, #576]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002908:	d10b      	bne.n	8002922 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	4b8d      	ldr	r3, [pc, #564]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d06c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x130>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d168      	bne.n	80029f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e275      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x7a>
 800292c:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a83      	ldr	r2, [pc, #524]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0xd8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x9c>
 8002942:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7e      	ldr	r2, [pc, #504]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b7c      	ldr	r3, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7b      	ldr	r2, [pc, #492]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xd8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0xc0>
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a75      	ldr	r2, [pc, #468]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xd8>
 8002980:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f8c8 	bl	8001b34 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff f8c4 	bl	8001b34 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e229      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe8>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff f8b4 	bl	8001b34 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff f8b0 	bl	8001b34 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e215      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x110>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d069      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fe:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b4d      	ldr	r3, [pc, #308]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x190>
 8002a16:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x17a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1e9      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	493d      	ldr	r1, [pc, #244]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e040      	b.n	8002ad2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d023      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff f866 	bl	8001b34 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7ff f862 	bl	8001b34 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1c7      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4929      	ldr	r1, [pc, #164]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
 8002a9e:	e018      	b.n	8002ad2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff f842 	bl	8001b34 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7ff f83e 	bl	8001b34 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1a3      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d038      	beq.n	8002b50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d019      	beq.n	8002b1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7ff f81f 	bl	8001b34 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afa:	f7ff f81b 	bl	8001b34 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e180      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x23a>
 8002b18:	e01a      	b.n	8002b50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff f805 	bl	8001b34 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7ff f801 	bl	8001b34 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d903      	bls.n	8002b44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e166      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
 8002b40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4b92      	ldr	r3, [pc, #584]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a4 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b8c      	ldr	r3, [pc, #560]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10d      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b89      	ldr	r3, [pc, #548]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a88      	ldr	r2, [pc, #544]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b86      	ldr	r3, [pc, #536]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b86:	4b83      	ldr	r3, [pc, #524]	; (8002d94 <HAL_RCC_OscConfig+0x4d4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b92:	4b80      	ldr	r3, [pc, #512]	; (8002d94 <HAL_RCC_OscConfig+0x4d4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7f      	ldr	r2, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x4d4>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe ffc9 	bl	8001b34 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe ffc5 	bl	8001b34 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e12a      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb8:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x4d4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x31a>
 8002bcc:	4b70      	ldr	r3, [pc, #448]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a6f      	ldr	r2, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	e02d      	b.n	8002c36 <HAL_RCC_OscConfig+0x376>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x33c>
 8002be2:	4b6b      	ldr	r3, [pc, #428]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
 8002bee:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a67      	ldr	r2, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	e01c      	b.n	8002c36 <HAL_RCC_OscConfig+0x376>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x35e>
 8002c04:	4b62      	ldr	r3, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a61      	ldr	r2, [pc, #388]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	4b5f      	ldr	r3, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a5e      	ldr	r2, [pc, #376]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0x376>
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a5b      	ldr	r2, [pc, #364]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2a:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe ff79 	bl	8001b34 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe ff75 	bl	8001b34 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0d8      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ee      	beq.n	8002c46 <HAL_RCC_OscConfig+0x386>
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe ff63 	bl	8001b34 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe ff5f 	bl	8001b34 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0c2      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d105      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80ae 	beq.w	8002e0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d06d      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d14b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe ff30 	bl	8001b34 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe ff2c 	bl	8001b34 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e091      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	019b      	lsls	r3, r3, #6
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	491b      	ldr	r1, [pc, #108]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fefe 	bl	8001b34 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fefa 	bl	8001b34 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e05f      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x47c>
 8002d5a:	e057      	b.n	8002e0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fee4 	bl	8001b34 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fee0 	bl	8001b34 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e045      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4b0>
 8002d8e:	e03d      	b.n	8002e0c <HAL_RCC_OscConfig+0x54c>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_RCC_OscConfig+0x558>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d030      	beq.n	8002e08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d129      	bne.n	8002e08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d122      	bne.n	8002e08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d119      	bne.n	8002e08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d10f      	bne.n	8002e08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 020f 	bic.w	r2, r3, #15
 8002e4a:	4965      	ldr	r1, [pc, #404]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e073      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4936      	ldr	r1, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe fe10 	bl	8001b34 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe fe0c 	bl	8001b34 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e053      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d210      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1d0>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1d4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fd6c 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	080078b8 	.word	0x080078b8
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b090      	sub	sp, #64	; 0x40
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8003000:	2300      	movs	r3, #0
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003004:	2300      	movs	r3, #0
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d00d      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 8003018:	2b08      	cmp	r3, #8
 800301a:	f200 80a1 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x16c>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x3a>
 8003026:	e09b      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_GetSysClockFreq+0x184>)
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800302c:	e09b      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_GetSysClockFreq+0x188>)
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003032:	e098      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d028      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	2200      	movs	r2, #0
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	627a      	str	r2, [r7, #36]	; 0x24
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800305c:	2100      	movs	r1, #0
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_GetSysClockFreq+0x188>)
 8003060:	fb03 f201 	mul.w	r2, r3, r1
 8003064:	2300      	movs	r3, #0
 8003066:	fb00 f303 	mul.w	r3, r0, r3
 800306a:	4413      	add	r3, r2
 800306c:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_RCC_GetSysClockFreq+0x188>)
 800306e:	fba0 1202 	umull	r1, r2, r0, r2
 8003072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003074:	460a      	mov	r2, r1
 8003076:	62ba      	str	r2, [r7, #40]	; 0x28
 8003078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307a:	4413      	add	r3, r2
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	2200      	movs	r2, #0
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	61fa      	str	r2, [r7, #28]
 8003086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800308e:	f7fd fafb 	bl	8000688 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309a:	e053      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	2200      	movs	r2, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	617a      	str	r2, [r7, #20]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ae:	f04f 0b00 	mov.w	fp, #0
 80030b2:	4652      	mov	r2, sl
 80030b4:	465b      	mov	r3, fp
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	0159      	lsls	r1, r3, #5
 80030c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c4:	0150      	lsls	r0, r2, #5
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	ebb2 080a 	subs.w	r8, r2, sl
 80030ce:	eb63 090b 	sbc.w	r9, r3, fp
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ea:	eb63 0509 	sbc.w	r5, r3, r9
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	00eb      	lsls	r3, r5, #3
 80030f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fc:	00e2      	lsls	r2, r4, #3
 80030fe:	4614      	mov	r4, r2
 8003100:	461d      	mov	r5, r3
 8003102:	eb14 030a 	adds.w	r3, r4, sl
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	eb45 030b 	adc.w	r3, r5, fp
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003124:	4621      	mov	r1, r4
 8003126:	028a      	lsls	r2, r1, #10
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	2200      	movs	r2, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	60fa      	str	r2, [r7, #12]
 8003134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003138:	f7fd faa6 	bl	8000688 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetSysClockFreq+0x184>)
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003168:	4618      	mov	r0, r3
 800316a:	3740      	adds	r7, #64	; 0x40
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	017d7840 	.word	0x017d7840

08003180 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	080078c8 	.word	0x080078c8

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	080078c8 	.word	0x080078c8

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003210:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	4964      	ldr	r1, [pc, #400]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	4959      	ldr	r1, [pc, #356]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800327e:	4b4e      	ldr	r3, [pc, #312]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	494a      	ldr	r1, [pc, #296]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 808b 	beq.w	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a39      	ldr	r2, [pc, #228]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
 80032d8:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f0:	f7fe fc20 	bl	8001b34 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe fc1c 	bl	8001b34 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e38f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d035      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d02e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d114      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fbe4 	bl	8001b34 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f7fe fbe0 	bl	8001b34 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e351      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ee      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339e:	d111      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	4901      	ldr	r1, [pc, #4]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40007000 	.word	0x40007000
 80033c0:	0ffffcff 	.word	0x0ffffcff
 80033c4:	4bac      	ldr	r3, [pc, #688]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4aab      	ldr	r2, [pc, #684]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	4ba9      	ldr	r3, [pc, #676]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	49a6      	ldr	r1, [pc, #664]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ee:	4ba2      	ldr	r3, [pc, #648]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	4aa0      	ldr	r2, [pc, #640]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033fe:	4b9e      	ldr	r3, [pc, #632]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003400:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	499b      	ldr	r1, [pc, #620]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800341c:	4b96      	ldr	r3, [pc, #600]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342a:	4993      	ldr	r1, [pc, #588]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343e:	4b8e      	ldr	r3, [pc, #568]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344c:	498a      	ldr	r1, [pc, #552]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003460:	4b85      	ldr	r3, [pc, #532]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346e:	4982      	ldr	r1, [pc, #520]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4979      	ldr	r1, [pc, #484]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a4:	4b74      	ldr	r3, [pc, #464]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4971      	ldr	r1, [pc, #452]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f023 020c 	bic.w	r2, r3, #12
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	4968      	ldr	r1, [pc, #416]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e8:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4960      	ldr	r1, [pc, #384]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800350a:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	4957      	ldr	r1, [pc, #348]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	494f      	ldr	r1, [pc, #316]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	4946      	ldr	r1, [pc, #280]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003570:	4b41      	ldr	r3, [pc, #260]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	493e      	ldr	r1, [pc, #248]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003592:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	4935      	ldr	r1, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b4:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	492d      	ldr	r1, [pc, #180]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d011      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035d6:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e4:	4924      	ldr	r1, [pc, #144]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	4914      	ldr	r1, [pc, #80]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003648:	490b      	ldr	r1, [pc, #44]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00f      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366c:	4902      	ldr	r1, [pc, #8]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003688:	4b8a      	ldr	r3, [pc, #552]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	4986      	ldr	r1, [pc, #536]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036ac:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036bc:	497d      	ldr	r1, [pc, #500]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d006      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80d6 	beq.w	8003884 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036d8:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a75      	ldr	r2, [pc, #468]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe fa26 	bl	8001b34 <HAL_GetTick>
 80036e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ec:	f7fe fa22 	bl	8001b34 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e195      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036fe:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d021      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11d      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0e1b      	lsrs	r3, r3, #24
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	4958      	ldr	r1, [pc, #352]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02e      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d129      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003786:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	0f1b      	lsrs	r3, r3, #28
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	019a      	lsls	r2, r3, #6
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	061b      	lsls	r3, r3, #24
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	071b      	lsls	r3, r3, #28
 80037ba:	493e      	ldr	r1, [pc, #248]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c8:	f023 021f 	bic.w	r2, r3, #31
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	3b01      	subs	r3, #1
 80037d2:	4938      	ldr	r1, [pc, #224]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01d      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037e6:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ec:	0e1b      	lsrs	r3, r3, #24
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	0f1b      	lsrs	r3, r3, #28
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	019a      	lsls	r2, r3, #6
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	071b      	lsls	r3, r3, #28
 800381a:	4926      	ldr	r1, [pc, #152]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	019a      	lsls	r2, r3, #6
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	041b      	lsls	r3, r3, #16
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	491a      	ldr	r1, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800385c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385e:	f7fe f969 	bl	8001b34 <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003866:	f7fe f965 	bl	8001b34 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0d8      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	f040 80ce 	bne.w	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe f94c 	bl	8001b34 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800389e:	e00b      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038a0:	f7fe f948 	bl	8001b34 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d904      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0bb      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038b8:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c4:	d0ec      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d12a      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038ee:	4b51      	ldr	r3, [pc, #324]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038fc:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	0f1b      	lsrs	r3, r3, #28
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	019a      	lsls	r2, r3, #6
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	061b      	lsls	r3, r3, #24
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	071b      	lsls	r3, r3, #28
 8003922:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800392a:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003930:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	493d      	ldr	r1, [pc, #244]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d022      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d11d      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	0f1b      	lsrs	r3, r3, #28
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	019a      	lsls	r2, r3, #6
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	4929      	ldr	r1, [pc, #164]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d028      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039b0:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	0c1b      	lsrs	r3, r3, #16
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	019a      	lsls	r2, r3, #6
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	431a      	orrs	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	071b      	lsls	r3, r3, #28
 80039d6:	4917      	ldr	r1, [pc, #92]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4911      	ldr	r1, [pc, #68]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fe f898 	bl	8001b34 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a08:	f7fe f894 	bl	8001b34 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e007      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a26:	d1ef      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e040      	b.n	8003acc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd fe8e 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f974 	bl	8003d64 <UART_SetConfig>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e022      	b.n	8003acc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fbcc 	bl	800422c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fc53 	bl	8004370 <UART_CheckIdleState>
 8003aca:	4603      	mov	r3, r0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d171      	bne.n	8003bd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_UART_Transmit+0x24>
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e06a      	b.n	8003bd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2221      	movs	r2, #33	; 0x21
 8003b08:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0a:	f7fe f813 	bl	8001b34 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d108      	bne.n	8003b3c <HAL_UART_Transmit+0x68>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e003      	b.n	8003b44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b44:	e02c      	b.n	8003ba0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fc5a 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e038      	b.n	8003bd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3302      	adds	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e007      	b.n	8003b8e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1cc      	bne.n	8003b46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fc27 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e005      	b.n	8003bd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08a      	sub	sp, #40	; 0x28
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	f040 80b1 	bne.w	8003d58 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_UART_Receive+0x28>
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0a9      	b.n	8003d5a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2222      	movs	r2, #34	; 0x22
 8003c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1c:	f7fd ff8a 	bl	8001b34 <HAL_GetTick>
 8003c20:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d10e      	bne.n	8003c5a <HAL_UART_Receive+0x80>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_UART_Receive+0x76>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c4e:	e02d      	b.n	8003cac <HAL_UART_Receive+0xd2>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	22ff      	movs	r2, #255	; 0xff
 8003c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c58:	e028      	b.n	8003cac <HAL_UART_Receive+0xd2>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10d      	bne.n	8003c7e <HAL_UART_Receive+0xa4>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_Receive+0x9a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	22ff      	movs	r2, #255	; 0xff
 8003c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c72:	e01b      	b.n	8003cac <HAL_UART_Receive+0xd2>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	227f      	movs	r2, #127	; 0x7f
 8003c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c7c:	e016      	b.n	8003cac <HAL_UART_Receive+0xd2>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c86:	d10d      	bne.n	8003ca4 <HAL_UART_Receive+0xca>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_UART_Receive+0xc0>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	227f      	movs	r2, #127	; 0x7f
 8003c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c98:	e008      	b.n	8003cac <HAL_UART_Receive+0xd2>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	223f      	movs	r2, #63	; 0x3f
 8003c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca2:	e003      	b.n	8003cac <HAL_UART_Receive+0xd2>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cb2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_UART_Receive+0xf6>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e003      	b.n	8003cd8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003cd8:	e032      	b.n	8003d40 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2120      	movs	r1, #32
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fb90 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e032      	b.n	8003d5a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	8a7b      	ldrh	r3, [r7, #18]
 8003d04:	4013      	ands	r3, r2
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	3302      	adds	r3, #2
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e00c      	b.n	8003d2e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	8a7b      	ldrh	r3, [r7, #18]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	4013      	ands	r3, r2
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1c6      	bne.n	8003cda <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4ba6      	ldr	r3, [pc, #664]	; (8004028 <UART_SetConfig+0x2c4>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a94      	ldr	r2, [pc, #592]	; (800402c <UART_SetConfig+0x2c8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d120      	bne.n	8003e22 <UART_SetConfig+0xbe>
 8003de0:	4b93      	ldr	r3, [pc, #588]	; (8004030 <UART_SetConfig+0x2cc>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d816      	bhi.n	8003e1c <UART_SetConfig+0xb8>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x90>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e05 	.word	0x08003e05
 8003df8:	08003e11 	.word	0x08003e11
 8003dfc:	08003e0b 	.word	0x08003e0b
 8003e00:	08003e17 	.word	0x08003e17
 8003e04:	2301      	movs	r3, #1
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e150      	b.n	80040ac <UART_SetConfig+0x348>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e14d      	b.n	80040ac <UART_SetConfig+0x348>
 8003e10:	2304      	movs	r3, #4
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e14a      	b.n	80040ac <UART_SetConfig+0x348>
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e147      	b.n	80040ac <UART_SetConfig+0x348>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e144      	b.n	80040ac <UART_SetConfig+0x348>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a83      	ldr	r2, [pc, #524]	; (8004034 <UART_SetConfig+0x2d0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d132      	bne.n	8003e92 <UART_SetConfig+0x12e>
 8003e2c:	4b80      	ldr	r3, [pc, #512]	; (8004030 <UART_SetConfig+0x2cc>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d828      	bhi.n	8003e8c <UART_SetConfig+0x128>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0xdc>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003e8d 	.word	0x08003e8d
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e81 	.word	0x08003e81
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e8d 	.word	0x08003e8d
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e7b 	.word	0x08003e7b
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003e8d 	.word	0x08003e8d
 8003e70:	08003e87 	.word	0x08003e87
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e118      	b.n	80040ac <UART_SetConfig+0x348>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e115      	b.n	80040ac <UART_SetConfig+0x348>
 8003e80:	2304      	movs	r3, #4
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e112      	b.n	80040ac <UART_SetConfig+0x348>
 8003e86:	2308      	movs	r3, #8
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	e10f      	b.n	80040ac <UART_SetConfig+0x348>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e10c      	b.n	80040ac <UART_SetConfig+0x348>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a68      	ldr	r2, [pc, #416]	; (8004038 <UART_SetConfig+0x2d4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d120      	bne.n	8003ede <UART_SetConfig+0x17a>
 8003e9c:	4b64      	ldr	r3, [pc, #400]	; (8004030 <UART_SetConfig+0x2cc>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ea6:	2b30      	cmp	r3, #48	; 0x30
 8003ea8:	d013      	beq.n	8003ed2 <UART_SetConfig+0x16e>
 8003eaa:	2b30      	cmp	r3, #48	; 0x30
 8003eac:	d814      	bhi.n	8003ed8 <UART_SetConfig+0x174>
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d009      	beq.n	8003ec6 <UART_SetConfig+0x162>
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d810      	bhi.n	8003ed8 <UART_SetConfig+0x174>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <UART_SetConfig+0x15c>
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d006      	beq.n	8003ecc <UART_SetConfig+0x168>
 8003ebe:	e00b      	b.n	8003ed8 <UART_SetConfig+0x174>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0f2      	b.n	80040ac <UART_SetConfig+0x348>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e0ef      	b.n	80040ac <UART_SetConfig+0x348>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e0ec      	b.n	80040ac <UART_SetConfig+0x348>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e0e9      	b.n	80040ac <UART_SetConfig+0x348>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e0e6      	b.n	80040ac <UART_SetConfig+0x348>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a56      	ldr	r2, [pc, #344]	; (800403c <UART_SetConfig+0x2d8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d120      	bne.n	8003f2a <UART_SetConfig+0x1c6>
 8003ee8:	4b51      	ldr	r3, [pc, #324]	; (8004030 <UART_SetConfig+0x2cc>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef4:	d013      	beq.n	8003f1e <UART_SetConfig+0x1ba>
 8003ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef8:	d814      	bhi.n	8003f24 <UART_SetConfig+0x1c0>
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d009      	beq.n	8003f12 <UART_SetConfig+0x1ae>
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d810      	bhi.n	8003f24 <UART_SetConfig+0x1c0>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <UART_SetConfig+0x1a8>
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d006      	beq.n	8003f18 <UART_SetConfig+0x1b4>
 8003f0a:	e00b      	b.n	8003f24 <UART_SetConfig+0x1c0>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e0cc      	b.n	80040ac <UART_SetConfig+0x348>
 8003f12:	2302      	movs	r3, #2
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e0c9      	b.n	80040ac <UART_SetConfig+0x348>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e0c6      	b.n	80040ac <UART_SetConfig+0x348>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e0c3      	b.n	80040ac <UART_SetConfig+0x348>
 8003f24:	2310      	movs	r3, #16
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e0c0      	b.n	80040ac <UART_SetConfig+0x348>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a44      	ldr	r2, [pc, #272]	; (8004040 <UART_SetConfig+0x2dc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d125      	bne.n	8003f80 <UART_SetConfig+0x21c>
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <UART_SetConfig+0x2cc>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d017      	beq.n	8003f74 <UART_SetConfig+0x210>
 8003f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f48:	d817      	bhi.n	8003f7a <UART_SetConfig+0x216>
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4e:	d00b      	beq.n	8003f68 <UART_SetConfig+0x204>
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d811      	bhi.n	8003f7a <UART_SetConfig+0x216>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <UART_SetConfig+0x1fe>
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d006      	beq.n	8003f6e <UART_SetConfig+0x20a>
 8003f60:	e00b      	b.n	8003f7a <UART_SetConfig+0x216>
 8003f62:	2300      	movs	r3, #0
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e0a1      	b.n	80040ac <UART_SetConfig+0x348>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e09e      	b.n	80040ac <UART_SetConfig+0x348>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e09b      	b.n	80040ac <UART_SetConfig+0x348>
 8003f74:	2308      	movs	r3, #8
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e098      	b.n	80040ac <UART_SetConfig+0x348>
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e095      	b.n	80040ac <UART_SetConfig+0x348>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <UART_SetConfig+0x2e0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d125      	bne.n	8003fd6 <UART_SetConfig+0x272>
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <UART_SetConfig+0x2cc>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f98:	d017      	beq.n	8003fca <UART_SetConfig+0x266>
 8003f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9e:	d817      	bhi.n	8003fd0 <UART_SetConfig+0x26c>
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d00b      	beq.n	8003fbe <UART_SetConfig+0x25a>
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003faa:	d811      	bhi.n	8003fd0 <UART_SetConfig+0x26c>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <UART_SetConfig+0x254>
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d006      	beq.n	8003fc4 <UART_SetConfig+0x260>
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x26c>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e076      	b.n	80040ac <UART_SetConfig+0x348>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e073      	b.n	80040ac <UART_SetConfig+0x348>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e070      	b.n	80040ac <UART_SetConfig+0x348>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e06d      	b.n	80040ac <UART_SetConfig+0x348>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e06a      	b.n	80040ac <UART_SetConfig+0x348>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <UART_SetConfig+0x2e4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d138      	bne.n	8004052 <UART_SetConfig+0x2ee>
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <UART_SetConfig+0x2cc>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fee:	d017      	beq.n	8004020 <UART_SetConfig+0x2bc>
 8003ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff4:	d82a      	bhi.n	800404c <UART_SetConfig+0x2e8>
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	d00b      	beq.n	8004014 <UART_SetConfig+0x2b0>
 8003ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004000:	d824      	bhi.n	800404c <UART_SetConfig+0x2e8>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <UART_SetConfig+0x2aa>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	d006      	beq.n	800401a <UART_SetConfig+0x2b6>
 800400c:	e01e      	b.n	800404c <UART_SetConfig+0x2e8>
 800400e:	2300      	movs	r3, #0
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e04b      	b.n	80040ac <UART_SetConfig+0x348>
 8004014:	2302      	movs	r3, #2
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e048      	b.n	80040ac <UART_SetConfig+0x348>
 800401a:	2304      	movs	r3, #4
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e045      	b.n	80040ac <UART_SetConfig+0x348>
 8004020:	2308      	movs	r3, #8
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e042      	b.n	80040ac <UART_SetConfig+0x348>
 8004026:	bf00      	nop
 8004028:	efff69f3 	.word	0xefff69f3
 800402c:	40011000 	.word	0x40011000
 8004030:	40023800 	.word	0x40023800
 8004034:	40004400 	.word	0x40004400
 8004038:	40004800 	.word	0x40004800
 800403c:	40004c00 	.word	0x40004c00
 8004040:	40005000 	.word	0x40005000
 8004044:	40011400 	.word	0x40011400
 8004048:	40007800 	.word	0x40007800
 800404c:	2310      	movs	r3, #16
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e02c      	b.n	80040ac <UART_SetConfig+0x348>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a72      	ldr	r2, [pc, #456]	; (8004220 <UART_SetConfig+0x4bc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d125      	bne.n	80040a8 <UART_SetConfig+0x344>
 800405c:	4b71      	ldr	r3, [pc, #452]	; (8004224 <UART_SetConfig+0x4c0>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004066:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800406a:	d017      	beq.n	800409c <UART_SetConfig+0x338>
 800406c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004070:	d817      	bhi.n	80040a2 <UART_SetConfig+0x33e>
 8004072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004076:	d00b      	beq.n	8004090 <UART_SetConfig+0x32c>
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407c:	d811      	bhi.n	80040a2 <UART_SetConfig+0x33e>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <UART_SetConfig+0x326>
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004086:	d006      	beq.n	8004096 <UART_SetConfig+0x332>
 8004088:	e00b      	b.n	80040a2 <UART_SetConfig+0x33e>
 800408a:	2300      	movs	r3, #0
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e00d      	b.n	80040ac <UART_SetConfig+0x348>
 8004090:	2302      	movs	r3, #2
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e00a      	b.n	80040ac <UART_SetConfig+0x348>
 8004096:	2304      	movs	r3, #4
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e007      	b.n	80040ac <UART_SetConfig+0x348>
 800409c:	2308      	movs	r3, #8
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e004      	b.n	80040ac <UART_SetConfig+0x348>
 80040a2:	2310      	movs	r3, #16
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e001      	b.n	80040ac <UART_SetConfig+0x348>
 80040a8:	2310      	movs	r3, #16
 80040aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b4:	d15b      	bne.n	800416e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d828      	bhi.n	800410e <UART_SetConfig+0x3aa>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x360>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040f1 	.word	0x080040f1
 80040cc:	080040f9 	.word	0x080040f9
 80040d0:	0800410f 	.word	0x0800410f
 80040d4:	080040ff 	.word	0x080040ff
 80040d8:	0800410f 	.word	0x0800410f
 80040dc:	0800410f 	.word	0x0800410f
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	08004107 	.word	0x08004107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7ff f856 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 80040ec:	61b8      	str	r0, [r7, #24]
        break;
 80040ee:	e013      	b.n	8004118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7ff f866 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80040f4:	61b8      	str	r0, [r7, #24]
        break;
 80040f6:	e00f      	b.n	8004118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <UART_SetConfig+0x4c4>)
 80040fa:	61bb      	str	r3, [r7, #24]
        break;
 80040fc:	e00c      	b.n	8004118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fe:	f7fe ff79 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8004102:	61b8      	str	r0, [r7, #24]
        break;
 8004104:	e008      	b.n	8004118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800410a:	61bb      	str	r3, [r7, #24]
        break;
 800410c:	e004      	b.n	8004118 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	77bb      	strb	r3, [r7, #30]
        break;
 8004116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d074      	beq.n	8004208 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	005a      	lsls	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d916      	bls.n	8004168 <UART_SetConfig+0x404>
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d212      	bcs.n	8004168 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f023 030f 	bic.w	r3, r3, #15
 800414a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	b29a      	uxth	r2, r3
 8004158:	89fb      	ldrh	r3, [r7, #14]
 800415a:	4313      	orrs	r3, r2
 800415c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	89fa      	ldrh	r2, [r7, #14]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	e04f      	b.n	8004208 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	77bb      	strb	r3, [r7, #30]
 800416c:	e04c      	b.n	8004208 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416e:	7ffb      	ldrb	r3, [r7, #31]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d828      	bhi.n	80041c6 <UART_SetConfig+0x462>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x418>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041c7 	.word	0x080041c7
 800418c:	080041b7 	.word	0x080041b7
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041c7 	.word	0x080041c7
 8004198:	080041c7 	.word	0x080041c7
 800419c:	080041bf 	.word	0x080041bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fe fffa 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 80041a4:	61b8      	str	r0, [r7, #24]
        break;
 80041a6:	e013      	b.n	80041d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a8:	f7ff f80a 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80041ac:	61b8      	str	r0, [r7, #24]
        break;
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <UART_SetConfig+0x4c4>)
 80041b2:	61bb      	str	r3, [r7, #24]
        break;
 80041b4:	e00c      	b.n	80041d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b6:	f7fe ff1d 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 80041ba:	61b8      	str	r0, [r7, #24]
        break;
 80041bc:	e008      	b.n	80041d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	61bb      	str	r3, [r7, #24]
        break;
 80041c4:	e004      	b.n	80041d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	77bb      	strb	r3, [r7, #30]
        break;
 80041ce:	bf00      	nop
    }

    if (pclk != 0U)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d018      	beq.n	8004208 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	085a      	lsrs	r2, r3, #1
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	441a      	add	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d909      	bls.n	8004204 <UART_SetConfig+0x4a0>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f6:	d205      	bcs.n	8004204 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e001      	b.n	8004208 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004214:	7fbb      	ldrb	r3, [r7, #30]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40007c00 	.word	0x40007c00
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400

0800422c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01a      	beq.n	8004342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432a:	d10a      	bne.n	8004342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af02      	add	r7, sp, #8
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004380:	f7fd fbd8 	bl	8001b34 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d10e      	bne.n	80043b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f831 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e027      	b.n	8004402 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d10e      	bne.n	80043de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f81b 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e011      	b.n	8004402 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b09c      	sub	sp, #112	; 0x70
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441a:	e0a7      	b.n	800456c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	f000 80a3 	beq.w	800456c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fd fb85 	bl	8001b34 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <UART_WaitOnFlagUntilTimeout+0x32>
 8004436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004438:	2b00      	cmp	r3, #0
 800443a:	d13f      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800444a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004450:	667b      	str	r3, [r7, #100]	; 0x64
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e6      	bne.n	800443c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	663b      	str	r3, [r7, #96]	; 0x60
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800448e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800449c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e068      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d050      	beq.n	800456c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d8:	d148      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
 8004504:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e6      	bne.n	80044e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004536:	623a      	str	r2, [r7, #32]
 8004538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	69f9      	ldr	r1, [r7, #28]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	61bb      	str	r3, [r7, #24]
   return(result);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e010      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	429a      	cmp	r2, r3
 8004588:	f43f af48 	beq.w	800441c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3770      	adds	r7, #112	; 0x70
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <sulp>:
 8004596:	b570      	push	{r4, r5, r6, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
 800459c:	4616      	mov	r6, r2
 800459e:	ec45 4b10 	vmov	d0, r4, r5
 80045a2:	f002 f853 	bl	800664c <__ulp>
 80045a6:	b17e      	cbz	r6, 80045c8 <sulp+0x32>
 80045a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80045ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dd09      	ble.n	80045c8 <sulp+0x32>
 80045b4:	051b      	lsls	r3, r3, #20
 80045b6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80045ba:	2000      	movs	r0, #0
 80045bc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80045c0:	ec41 0b17 	vmov	d7, r0, r1
 80045c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	0000      	movs	r0, r0
 80045cc:	0000      	movs	r0, r0
	...

080045d0 <_strtod_l>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	ed2d 8b0e 	vpush	{d8-d14}
 80045d8:	b097      	sub	sp, #92	; 0x5c
 80045da:	4604      	mov	r4, r0
 80045dc:	920d      	str	r2, [sp, #52]	; 0x34
 80045de:	2200      	movs	r2, #0
 80045e0:	9212      	str	r2, [sp, #72]	; 0x48
 80045e2:	468a      	mov	sl, r1
 80045e4:	f04f 0800 	mov.w	r8, #0
 80045e8:	f04f 0900 	mov.w	r9, #0
 80045ec:	460a      	mov	r2, r1
 80045ee:	9211      	str	r2, [sp, #68]	; 0x44
 80045f0:	7811      	ldrb	r1, [r2, #0]
 80045f2:	292b      	cmp	r1, #43	; 0x2b
 80045f4:	d04c      	beq.n	8004690 <_strtod_l+0xc0>
 80045f6:	d839      	bhi.n	800466c <_strtod_l+0x9c>
 80045f8:	290d      	cmp	r1, #13
 80045fa:	d833      	bhi.n	8004664 <_strtod_l+0x94>
 80045fc:	2908      	cmp	r1, #8
 80045fe:	d833      	bhi.n	8004668 <_strtod_l+0x98>
 8004600:	2900      	cmp	r1, #0
 8004602:	d03c      	beq.n	800467e <_strtod_l+0xae>
 8004604:	2200      	movs	r2, #0
 8004606:	9208      	str	r2, [sp, #32]
 8004608:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800460a:	7832      	ldrb	r2, [r6, #0]
 800460c:	2a30      	cmp	r2, #48	; 0x30
 800460e:	f040 80b8 	bne.w	8004782 <_strtod_l+0x1b2>
 8004612:	7872      	ldrb	r2, [r6, #1]
 8004614:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004618:	2a58      	cmp	r2, #88	; 0x58
 800461a:	d170      	bne.n	80046fe <_strtod_l+0x12e>
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	9b08      	ldr	r3, [sp, #32]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	ab12      	add	r3, sp, #72	; 0x48
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4a91      	ldr	r2, [pc, #580]	; (800486c <_strtod_l+0x29c>)
 8004628:	ab13      	add	r3, sp, #76	; 0x4c
 800462a:	a911      	add	r1, sp, #68	; 0x44
 800462c:	4620      	mov	r0, r4
 800462e:	f001 f8eb 	bl	8005808 <__gethex>
 8004632:	f010 070f 	ands.w	r7, r0, #15
 8004636:	4605      	mov	r5, r0
 8004638:	d005      	beq.n	8004646 <_strtod_l+0x76>
 800463a:	2f06      	cmp	r7, #6
 800463c:	d12a      	bne.n	8004694 <_strtod_l+0xc4>
 800463e:	3601      	adds	r6, #1
 8004640:	2300      	movs	r3, #0
 8004642:	9611      	str	r6, [sp, #68]	; 0x44
 8004644:	9308      	str	r3, [sp, #32]
 8004646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 8555 	bne.w	80050f8 <_strtod_l+0xb28>
 800464e:	9b08      	ldr	r3, [sp, #32]
 8004650:	ec49 8b10 	vmov	d0, r8, r9
 8004654:	b1cb      	cbz	r3, 800468a <_strtod_l+0xba>
 8004656:	eeb1 0b40 	vneg.f64	d0, d0
 800465a:	b017      	add	sp, #92	; 0x5c
 800465c:	ecbd 8b0e 	vpop	{d8-d14}
 8004660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004664:	2920      	cmp	r1, #32
 8004666:	d1cd      	bne.n	8004604 <_strtod_l+0x34>
 8004668:	3201      	adds	r2, #1
 800466a:	e7c0      	b.n	80045ee <_strtod_l+0x1e>
 800466c:	292d      	cmp	r1, #45	; 0x2d
 800466e:	d1c9      	bne.n	8004604 <_strtod_l+0x34>
 8004670:	2101      	movs	r1, #1
 8004672:	9108      	str	r1, [sp, #32]
 8004674:	1c51      	adds	r1, r2, #1
 8004676:	9111      	str	r1, [sp, #68]	; 0x44
 8004678:	7852      	ldrb	r2, [r2, #1]
 800467a:	2a00      	cmp	r2, #0
 800467c:	d1c4      	bne.n	8004608 <_strtod_l+0x38>
 800467e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004680:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8535 	bne.w	80050f4 <_strtod_l+0xb24>
 800468a:	ec49 8b10 	vmov	d0, r8, r9
 800468e:	e7e4      	b.n	800465a <_strtod_l+0x8a>
 8004690:	2100      	movs	r1, #0
 8004692:	e7ee      	b.n	8004672 <_strtod_l+0xa2>
 8004694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004696:	b13a      	cbz	r2, 80046a8 <_strtod_l+0xd8>
 8004698:	2135      	movs	r1, #53	; 0x35
 800469a:	a814      	add	r0, sp, #80	; 0x50
 800469c:	f002 f8d0 	bl	8006840 <__copybits>
 80046a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80046a2:	4620      	mov	r0, r4
 80046a4:	f001 fca6 	bl	8005ff4 <_Bfree>
 80046a8:	1e7b      	subs	r3, r7, #1
 80046aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d806      	bhi.n	80046be <_strtod_l+0xee>
 80046b0:	e8df f003 	tbb	[pc, r3]
 80046b4:	201d0314 	.word	0x201d0314
 80046b8:	14          	.byte	0x14
 80046b9:	00          	.byte	0x00
 80046ba:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80046be:	05eb      	lsls	r3, r5, #23
 80046c0:	bf48      	it	mi
 80046c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80046c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046ca:	0d1b      	lsrs	r3, r3, #20
 80046cc:	051b      	lsls	r3, r3, #20
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1b9      	bne.n	8004646 <_strtod_l+0x76>
 80046d2:	f000 ff75 	bl	80055c0 <__errno>
 80046d6:	2322      	movs	r3, #34	; 0x22
 80046d8:	6003      	str	r3, [r0, #0]
 80046da:	e7b4      	b.n	8004646 <_strtod_l+0x76>
 80046dc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80046e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80046e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80046ec:	e7e7      	b.n	80046be <_strtod_l+0xee>
 80046ee:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8004874 <_strtod_l+0x2a4>
 80046f2:	e7e4      	b.n	80046be <_strtod_l+0xee>
 80046f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80046f8:	f04f 38ff 	mov.w	r8, #4294967295
 80046fc:	e7df      	b.n	80046be <_strtod_l+0xee>
 80046fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	9211      	str	r2, [sp, #68]	; 0x44
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b30      	cmp	r3, #48	; 0x30
 8004708:	d0f9      	beq.n	80046fe <_strtod_l+0x12e>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d09b      	beq.n	8004646 <_strtod_l+0x76>
 800470e:	2301      	movs	r3, #1
 8004710:	9306      	str	r3, [sp, #24]
 8004712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004714:	9309      	str	r3, [sp, #36]	; 0x24
 8004716:	2300      	movs	r3, #0
 8004718:	9305      	str	r3, [sp, #20]
 800471a:	9307      	str	r3, [sp, #28]
 800471c:	461e      	mov	r6, r3
 800471e:	220a      	movs	r2, #10
 8004720:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004722:	7805      	ldrb	r5, [r0, #0]
 8004724:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004728:	b2d9      	uxtb	r1, r3
 800472a:	2909      	cmp	r1, #9
 800472c:	d92b      	bls.n	8004786 <_strtod_l+0x1b6>
 800472e:	4950      	ldr	r1, [pc, #320]	; (8004870 <_strtod_l+0x2a0>)
 8004730:	2201      	movs	r2, #1
 8004732:	f000 fe90 	bl	8005456 <strncmp>
 8004736:	2800      	cmp	r0, #0
 8004738:	d035      	beq.n	80047a6 <_strtod_l+0x1d6>
 800473a:	2000      	movs	r0, #0
 800473c:	462a      	mov	r2, r5
 800473e:	4633      	mov	r3, r6
 8004740:	4683      	mov	fp, r0
 8004742:	4601      	mov	r1, r0
 8004744:	2a65      	cmp	r2, #101	; 0x65
 8004746:	d001      	beq.n	800474c <_strtod_l+0x17c>
 8004748:	2a45      	cmp	r2, #69	; 0x45
 800474a:	d118      	bne.n	800477e <_strtod_l+0x1ae>
 800474c:	b91b      	cbnz	r3, 8004756 <_strtod_l+0x186>
 800474e:	9b06      	ldr	r3, [sp, #24]
 8004750:	4303      	orrs	r3, r0
 8004752:	d094      	beq.n	800467e <_strtod_l+0xae>
 8004754:	2300      	movs	r3, #0
 8004756:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800475a:	f10a 0201 	add.w	r2, sl, #1
 800475e:	9211      	str	r2, [sp, #68]	; 0x44
 8004760:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8004764:	2a2b      	cmp	r2, #43	; 0x2b
 8004766:	d075      	beq.n	8004854 <_strtod_l+0x284>
 8004768:	2a2d      	cmp	r2, #45	; 0x2d
 800476a:	d07b      	beq.n	8004864 <_strtod_l+0x294>
 800476c:	f04f 0e00 	mov.w	lr, #0
 8004770:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004774:	2d09      	cmp	r5, #9
 8004776:	f240 8083 	bls.w	8004880 <_strtod_l+0x2b0>
 800477a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800477e:	2500      	movs	r5, #0
 8004780:	e09e      	b.n	80048c0 <_strtod_l+0x2f0>
 8004782:	2300      	movs	r3, #0
 8004784:	e7c4      	b.n	8004710 <_strtod_l+0x140>
 8004786:	2e08      	cmp	r6, #8
 8004788:	bfd5      	itete	le
 800478a:	9907      	ldrle	r1, [sp, #28]
 800478c:	9905      	ldrgt	r1, [sp, #20]
 800478e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004792:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004796:	f100 0001 	add.w	r0, r0, #1
 800479a:	bfd4      	ite	le
 800479c:	9307      	strle	r3, [sp, #28]
 800479e:	9305      	strgt	r3, [sp, #20]
 80047a0:	3601      	adds	r6, #1
 80047a2:	9011      	str	r0, [sp, #68]	; 0x44
 80047a4:	e7bc      	b.n	8004720 <_strtod_l+0x150>
 80047a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	9211      	str	r2, [sp, #68]	; 0x44
 80047ac:	785a      	ldrb	r2, [r3, #1]
 80047ae:	b3ae      	cbz	r6, 800481c <_strtod_l+0x24c>
 80047b0:	4683      	mov	fp, r0
 80047b2:	4633      	mov	r3, r6
 80047b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80047b8:	2909      	cmp	r1, #9
 80047ba:	d912      	bls.n	80047e2 <_strtod_l+0x212>
 80047bc:	2101      	movs	r1, #1
 80047be:	e7c1      	b.n	8004744 <_strtod_l+0x174>
 80047c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	9211      	str	r2, [sp, #68]	; 0x44
 80047c6:	785a      	ldrb	r2, [r3, #1]
 80047c8:	3001      	adds	r0, #1
 80047ca:	2a30      	cmp	r2, #48	; 0x30
 80047cc:	d0f8      	beq.n	80047c0 <_strtod_l+0x1f0>
 80047ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	f200 8495 	bhi.w	8005102 <_strtod_l+0xb32>
 80047d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047da:	9309      	str	r3, [sp, #36]	; 0x24
 80047dc:	4683      	mov	fp, r0
 80047de:	2000      	movs	r0, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	3a30      	subs	r2, #48	; 0x30
 80047e4:	f100 0101 	add.w	r1, r0, #1
 80047e8:	d012      	beq.n	8004810 <_strtod_l+0x240>
 80047ea:	448b      	add	fp, r1
 80047ec:	eb00 0c03 	add.w	ip, r0, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	250a      	movs	r5, #10
 80047f4:	4561      	cmp	r1, ip
 80047f6:	d113      	bne.n	8004820 <_strtod_l+0x250>
 80047f8:	1819      	adds	r1, r3, r0
 80047fa:	2908      	cmp	r1, #8
 80047fc:	f103 0301 	add.w	r3, r3, #1
 8004800:	4403      	add	r3, r0
 8004802:	dc1b      	bgt.n	800483c <_strtod_l+0x26c>
 8004804:	9807      	ldr	r0, [sp, #28]
 8004806:	210a      	movs	r1, #10
 8004808:	fb01 2200 	mla	r2, r1, r0, r2
 800480c:	9207      	str	r2, [sp, #28]
 800480e:	2100      	movs	r1, #0
 8004810:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004812:	1c50      	adds	r0, r2, #1
 8004814:	9011      	str	r0, [sp, #68]	; 0x44
 8004816:	7852      	ldrb	r2, [r2, #1]
 8004818:	4608      	mov	r0, r1
 800481a:	e7cb      	b.n	80047b4 <_strtod_l+0x1e4>
 800481c:	4630      	mov	r0, r6
 800481e:	e7d4      	b.n	80047ca <_strtod_l+0x1fa>
 8004820:	2908      	cmp	r1, #8
 8004822:	f101 0101 	add.w	r1, r1, #1
 8004826:	dc03      	bgt.n	8004830 <_strtod_l+0x260>
 8004828:	9f07      	ldr	r7, [sp, #28]
 800482a:	436f      	muls	r7, r5
 800482c:	9707      	str	r7, [sp, #28]
 800482e:	e7e1      	b.n	80047f4 <_strtod_l+0x224>
 8004830:	2910      	cmp	r1, #16
 8004832:	bfde      	ittt	le
 8004834:	9f05      	ldrle	r7, [sp, #20]
 8004836:	436f      	mulle	r7, r5
 8004838:	9705      	strle	r7, [sp, #20]
 800483a:	e7db      	b.n	80047f4 <_strtod_l+0x224>
 800483c:	2b10      	cmp	r3, #16
 800483e:	bfdf      	itttt	le
 8004840:	9805      	ldrle	r0, [sp, #20]
 8004842:	210a      	movle	r1, #10
 8004844:	fb01 2200 	mlale	r2, r1, r0, r2
 8004848:	9205      	strle	r2, [sp, #20]
 800484a:	e7e0      	b.n	800480e <_strtod_l+0x23e>
 800484c:	f04f 0b00 	mov.w	fp, #0
 8004850:	2101      	movs	r1, #1
 8004852:	e77c      	b.n	800474e <_strtod_l+0x17e>
 8004854:	f04f 0e00 	mov.w	lr, #0
 8004858:	f10a 0202 	add.w	r2, sl, #2
 800485c:	9211      	str	r2, [sp, #68]	; 0x44
 800485e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8004862:	e785      	b.n	8004770 <_strtod_l+0x1a0>
 8004864:	f04f 0e01 	mov.w	lr, #1
 8004868:	e7f6      	b.n	8004858 <_strtod_l+0x288>
 800486a:	bf00      	nop
 800486c:	080078e0 	.word	0x080078e0
 8004870:	080078d0 	.word	0x080078d0
 8004874:	7ff00000 	.word	0x7ff00000
 8004878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800487a:	1c55      	adds	r5, r2, #1
 800487c:	9511      	str	r5, [sp, #68]	; 0x44
 800487e:	7852      	ldrb	r2, [r2, #1]
 8004880:	2a30      	cmp	r2, #48	; 0x30
 8004882:	d0f9      	beq.n	8004878 <_strtod_l+0x2a8>
 8004884:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8004888:	2d08      	cmp	r5, #8
 800488a:	f63f af78 	bhi.w	800477e <_strtod_l+0x1ae>
 800488e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004892:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004894:	920a      	str	r2, [sp, #40]	; 0x28
 8004896:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004898:	1c55      	adds	r5, r2, #1
 800489a:	9511      	str	r5, [sp, #68]	; 0x44
 800489c:	7852      	ldrb	r2, [r2, #1]
 800489e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80048a2:	2f09      	cmp	r7, #9
 80048a4:	d937      	bls.n	8004916 <_strtod_l+0x346>
 80048a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80048a8:	1bed      	subs	r5, r5, r7
 80048aa:	2d08      	cmp	r5, #8
 80048ac:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80048b0:	dc02      	bgt.n	80048b8 <_strtod_l+0x2e8>
 80048b2:	4565      	cmp	r5, ip
 80048b4:	bfa8      	it	ge
 80048b6:	4665      	movge	r5, ip
 80048b8:	f1be 0f00 	cmp.w	lr, #0
 80048bc:	d000      	beq.n	80048c0 <_strtod_l+0x2f0>
 80048be:	426d      	negs	r5, r5
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d14d      	bne.n	8004960 <_strtod_l+0x390>
 80048c4:	9b06      	ldr	r3, [sp, #24]
 80048c6:	4303      	orrs	r3, r0
 80048c8:	f47f aebd 	bne.w	8004646 <_strtod_l+0x76>
 80048cc:	2900      	cmp	r1, #0
 80048ce:	f47f aed6 	bne.w	800467e <_strtod_l+0xae>
 80048d2:	2a69      	cmp	r2, #105	; 0x69
 80048d4:	d027      	beq.n	8004926 <_strtod_l+0x356>
 80048d6:	dc24      	bgt.n	8004922 <_strtod_l+0x352>
 80048d8:	2a49      	cmp	r2, #73	; 0x49
 80048da:	d024      	beq.n	8004926 <_strtod_l+0x356>
 80048dc:	2a4e      	cmp	r2, #78	; 0x4e
 80048de:	f47f aece 	bne.w	800467e <_strtod_l+0xae>
 80048e2:	4995      	ldr	r1, [pc, #596]	; (8004b38 <_strtod_l+0x568>)
 80048e4:	a811      	add	r0, sp, #68	; 0x44
 80048e6:	f001 f9cf 	bl	8005c88 <__match>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f43f aec7 	beq.w	800467e <_strtod_l+0xae>
 80048f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b28      	cmp	r3, #40	; 0x28
 80048f6:	d12d      	bne.n	8004954 <_strtod_l+0x384>
 80048f8:	4990      	ldr	r1, [pc, #576]	; (8004b3c <_strtod_l+0x56c>)
 80048fa:	aa14      	add	r2, sp, #80	; 0x50
 80048fc:	a811      	add	r0, sp, #68	; 0x44
 80048fe:	f001 f9d7 	bl	8005cb0 <__hexnan>
 8004902:	2805      	cmp	r0, #5
 8004904:	d126      	bne.n	8004954 <_strtod_l+0x384>
 8004906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004908:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800490c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004910:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004914:	e697      	b.n	8004646 <_strtod_l+0x76>
 8004916:	250a      	movs	r5, #10
 8004918:	fb05 2c0c 	mla	ip, r5, ip, r2
 800491c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004920:	e7b9      	b.n	8004896 <_strtod_l+0x2c6>
 8004922:	2a6e      	cmp	r2, #110	; 0x6e
 8004924:	e7db      	b.n	80048de <_strtod_l+0x30e>
 8004926:	4986      	ldr	r1, [pc, #536]	; (8004b40 <_strtod_l+0x570>)
 8004928:	a811      	add	r0, sp, #68	; 0x44
 800492a:	f001 f9ad 	bl	8005c88 <__match>
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f aea5 	beq.w	800467e <_strtod_l+0xae>
 8004934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004936:	4983      	ldr	r1, [pc, #524]	; (8004b44 <_strtod_l+0x574>)
 8004938:	3b01      	subs	r3, #1
 800493a:	a811      	add	r0, sp, #68	; 0x44
 800493c:	9311      	str	r3, [sp, #68]	; 0x44
 800493e:	f001 f9a3 	bl	8005c88 <__match>
 8004942:	b910      	cbnz	r0, 800494a <_strtod_l+0x37a>
 8004944:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004946:	3301      	adds	r3, #1
 8004948:	9311      	str	r3, [sp, #68]	; 0x44
 800494a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004b58 <_strtod_l+0x588>
 800494e:	f04f 0800 	mov.w	r8, #0
 8004952:	e678      	b.n	8004646 <_strtod_l+0x76>
 8004954:	487c      	ldr	r0, [pc, #496]	; (8004b48 <_strtod_l+0x578>)
 8004956:	f000 fe77 	bl	8005648 <nan>
 800495a:	ec59 8b10 	vmov	r8, r9, d0
 800495e:	e672      	b.n	8004646 <_strtod_l+0x76>
 8004960:	eddd 7a07 	vldr	s15, [sp, #28]
 8004964:	eba5 020b 	sub.w	r2, r5, fp
 8004968:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800496c:	2e00      	cmp	r6, #0
 800496e:	bf08      	it	eq
 8004970:	461e      	moveq	r6, r3
 8004972:	2b10      	cmp	r3, #16
 8004974:	9206      	str	r2, [sp, #24]
 8004976:	461a      	mov	r2, r3
 8004978:	bfa8      	it	ge
 800497a:	2210      	movge	r2, #16
 800497c:	2b09      	cmp	r3, #9
 800497e:	ec59 8b17 	vmov	r8, r9, d7
 8004982:	dd0c      	ble.n	800499e <_strtod_l+0x3ce>
 8004984:	4971      	ldr	r1, [pc, #452]	; (8004b4c <_strtod_l+0x57c>)
 8004986:	eddd 6a05 	vldr	s13, [sp, #20]
 800498a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800498e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8004992:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8004996:	eea7 6b05 	vfma.f64	d6, d7, d5
 800499a:	ec59 8b16 	vmov	r8, r9, d6
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	dc37      	bgt.n	8004a12 <_strtod_l+0x442>
 80049a2:	9906      	ldr	r1, [sp, #24]
 80049a4:	2900      	cmp	r1, #0
 80049a6:	f43f ae4e 	beq.w	8004646 <_strtod_l+0x76>
 80049aa:	dd23      	ble.n	80049f4 <_strtod_l+0x424>
 80049ac:	2916      	cmp	r1, #22
 80049ae:	dc0b      	bgt.n	80049c8 <_strtod_l+0x3f8>
 80049b0:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <_strtod_l+0x57c>)
 80049b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80049b6:	ed93 7b00 	vldr	d7, [r3]
 80049ba:	ec49 8b16 	vmov	d6, r8, r9
 80049be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049c2:	ec59 8b17 	vmov	r8, r9, d7
 80049c6:	e63e      	b.n	8004646 <_strtod_l+0x76>
 80049c8:	9806      	ldr	r0, [sp, #24]
 80049ca:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80049ce:	4281      	cmp	r1, r0
 80049d0:	db1f      	blt.n	8004a12 <_strtod_l+0x442>
 80049d2:	4a5e      	ldr	r2, [pc, #376]	; (8004b4c <_strtod_l+0x57c>)
 80049d4:	f1c3 030f 	rsb	r3, r3, #15
 80049d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80049dc:	ed91 7b00 	vldr	d7, [r1]
 80049e0:	ec49 8b16 	vmov	d6, r8, r9
 80049e4:	1ac3      	subs	r3, r0, r3
 80049e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80049ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049ee:	ed92 6b00 	vldr	d6, [r2]
 80049f2:	e7e4      	b.n	80049be <_strtod_l+0x3ee>
 80049f4:	9906      	ldr	r1, [sp, #24]
 80049f6:	3116      	adds	r1, #22
 80049f8:	db0b      	blt.n	8004a12 <_strtod_l+0x442>
 80049fa:	4b54      	ldr	r3, [pc, #336]	; (8004b4c <_strtod_l+0x57c>)
 80049fc:	ebab 0505 	sub.w	r5, fp, r5
 8004a00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004a04:	ed95 7b00 	vldr	d7, [r5]
 8004a08:	ec49 8b16 	vmov	d6, r8, r9
 8004a0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004a10:	e7d7      	b.n	80049c2 <_strtod_l+0x3f2>
 8004a12:	9906      	ldr	r1, [sp, #24]
 8004a14:	1a9a      	subs	r2, r3, r2
 8004a16:	440a      	add	r2, r1
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	dd6e      	ble.n	8004afa <_strtod_l+0x52a>
 8004a1c:	f012 000f 	ands.w	r0, r2, #15
 8004a20:	d00a      	beq.n	8004a38 <_strtod_l+0x468>
 8004a22:	494a      	ldr	r1, [pc, #296]	; (8004b4c <_strtod_l+0x57c>)
 8004a24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004a28:	ed91 7b00 	vldr	d7, [r1]
 8004a2c:	ec49 8b16 	vmov	d6, r8, r9
 8004a30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a34:	ec59 8b17 	vmov	r8, r9, d7
 8004a38:	f032 020f 	bics.w	r2, r2, #15
 8004a3c:	d04e      	beq.n	8004adc <_strtod_l+0x50c>
 8004a3e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8004a42:	dd22      	ble.n	8004a8a <_strtod_l+0x4ba>
 8004a44:	2500      	movs	r5, #0
 8004a46:	462e      	mov	r6, r5
 8004a48:	9507      	str	r5, [sp, #28]
 8004a4a:	462f      	mov	r7, r5
 8004a4c:	2322      	movs	r3, #34	; 0x22
 8004a4e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004b58 <_strtod_l+0x588>
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	f04f 0800 	mov.w	r8, #0
 8004a58:	9b07      	ldr	r3, [sp, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f43f adf3 	beq.w	8004646 <_strtod_l+0x76>
 8004a60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004a62:	4620      	mov	r0, r4
 8004a64:	f001 fac6 	bl	8005ff4 <_Bfree>
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f001 fac2 	bl	8005ff4 <_Bfree>
 8004a70:	4631      	mov	r1, r6
 8004a72:	4620      	mov	r0, r4
 8004a74:	f001 fabe 	bl	8005ff4 <_Bfree>
 8004a78:	9907      	ldr	r1, [sp, #28]
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f001 faba 	bl	8005ff4 <_Bfree>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4620      	mov	r0, r4
 8004a84:	f001 fab6 	bl	8005ff4 <_Bfree>
 8004a88:	e5dd      	b.n	8004646 <_strtod_l+0x76>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	ec49 8b17 	vmov	d7, r8, r9
 8004a90:	4f2f      	ldr	r7, [pc, #188]	; (8004b50 <_strtod_l+0x580>)
 8004a92:	1112      	asrs	r2, r2, #4
 8004a94:	4601      	mov	r1, r0
 8004a96:	2a01      	cmp	r2, #1
 8004a98:	dc23      	bgt.n	8004ae2 <_strtod_l+0x512>
 8004a9a:	b108      	cbz	r0, 8004aa0 <_strtod_l+0x4d0>
 8004a9c:	ec59 8b17 	vmov	r8, r9, d7
 8004aa0:	4a2b      	ldr	r2, [pc, #172]	; (8004b50 <_strtod_l+0x580>)
 8004aa2:	482c      	ldr	r0, [pc, #176]	; (8004b54 <_strtod_l+0x584>)
 8004aa4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004aa8:	ed92 7b00 	vldr	d7, [r2]
 8004aac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004ab0:	ec49 8b16 	vmov	d6, r8, r9
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <_strtod_l+0x588>)
 8004ab6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004aba:	ee17 1a90 	vmov	r1, s15
 8004abe:	400a      	ands	r2, r1
 8004ac0:	4282      	cmp	r2, r0
 8004ac2:	ec59 8b17 	vmov	r8, r9, d7
 8004ac6:	d8bd      	bhi.n	8004a44 <_strtod_l+0x474>
 8004ac8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8004acc:	4282      	cmp	r2, r0
 8004ace:	bf86      	itte	hi
 8004ad0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8004b5c <_strtod_l+0x58c>
 8004ad4:	f04f 38ff 	movhi.w	r8, #4294967295
 8004ad8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8004adc:	2200      	movs	r2, #0
 8004ade:	9205      	str	r2, [sp, #20]
 8004ae0:	e076      	b.n	8004bd0 <_strtod_l+0x600>
 8004ae2:	f012 0f01 	tst.w	r2, #1
 8004ae6:	d004      	beq.n	8004af2 <_strtod_l+0x522>
 8004ae8:	ed97 6b00 	vldr	d6, [r7]
 8004aec:	2001      	movs	r0, #1
 8004aee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004af2:	3101      	adds	r1, #1
 8004af4:	1052      	asrs	r2, r2, #1
 8004af6:	3708      	adds	r7, #8
 8004af8:	e7cd      	b.n	8004a96 <_strtod_l+0x4c6>
 8004afa:	d0ef      	beq.n	8004adc <_strtod_l+0x50c>
 8004afc:	4252      	negs	r2, r2
 8004afe:	f012 000f 	ands.w	r0, r2, #15
 8004b02:	d00a      	beq.n	8004b1a <_strtod_l+0x54a>
 8004b04:	4911      	ldr	r1, [pc, #68]	; (8004b4c <_strtod_l+0x57c>)
 8004b06:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004b0a:	ed91 7b00 	vldr	d7, [r1]
 8004b0e:	ec49 8b16 	vmov	d6, r8, r9
 8004b12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004b16:	ec59 8b17 	vmov	r8, r9, d7
 8004b1a:	1112      	asrs	r2, r2, #4
 8004b1c:	d0de      	beq.n	8004adc <_strtod_l+0x50c>
 8004b1e:	2a1f      	cmp	r2, #31
 8004b20:	dd1e      	ble.n	8004b60 <_strtod_l+0x590>
 8004b22:	2500      	movs	r5, #0
 8004b24:	462e      	mov	r6, r5
 8004b26:	9507      	str	r5, [sp, #28]
 8004b28:	462f      	mov	r7, r5
 8004b2a:	2322      	movs	r3, #34	; 0x22
 8004b2c:	f04f 0800 	mov.w	r8, #0
 8004b30:	f04f 0900 	mov.w	r9, #0
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	e78f      	b.n	8004a58 <_strtod_l+0x488>
 8004b38:	080078db 	.word	0x080078db
 8004b3c:	080078f4 	.word	0x080078f4
 8004b40:	080078d2 	.word	0x080078d2
 8004b44:	080078d5 	.word	0x080078d5
 8004b48:	080079e4 	.word	0x080079e4
 8004b4c:	08007ad8 	.word	0x08007ad8
 8004b50:	08007ab0 	.word	0x08007ab0
 8004b54:	7ca00000 	.word	0x7ca00000
 8004b58:	7ff00000 	.word	0x7ff00000
 8004b5c:	7fefffff 	.word	0x7fefffff
 8004b60:	f012 0110 	ands.w	r1, r2, #16
 8004b64:	bf18      	it	ne
 8004b66:	216a      	movne	r1, #106	; 0x6a
 8004b68:	9105      	str	r1, [sp, #20]
 8004b6a:	ec49 8b17 	vmov	d7, r8, r9
 8004b6e:	49be      	ldr	r1, [pc, #760]	; (8004e68 <_strtod_l+0x898>)
 8004b70:	2000      	movs	r0, #0
 8004b72:	07d7      	lsls	r7, r2, #31
 8004b74:	d504      	bpl.n	8004b80 <_strtod_l+0x5b0>
 8004b76:	ed91 6b00 	vldr	d6, [r1]
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004b80:	1052      	asrs	r2, r2, #1
 8004b82:	f101 0108 	add.w	r1, r1, #8
 8004b86:	d1f4      	bne.n	8004b72 <_strtod_l+0x5a2>
 8004b88:	b108      	cbz	r0, 8004b8e <_strtod_l+0x5be>
 8004b8a:	ec59 8b17 	vmov	r8, r9, d7
 8004b8e:	9a05      	ldr	r2, [sp, #20]
 8004b90:	b1ba      	cbz	r2, 8004bc2 <_strtod_l+0x5f2>
 8004b92:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8004b96:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	4648      	mov	r0, r9
 8004b9e:	dd10      	ble.n	8004bc2 <_strtod_l+0x5f2>
 8004ba0:	2a1f      	cmp	r2, #31
 8004ba2:	f340 812c 	ble.w	8004dfe <_strtod_l+0x82e>
 8004ba6:	2a34      	cmp	r2, #52	; 0x34
 8004ba8:	bfde      	ittt	le
 8004baa:	f04f 32ff 	movle.w	r2, #4294967295
 8004bae:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8004bb2:	408a      	lslle	r2, r1
 8004bb4:	f04f 0800 	mov.w	r8, #0
 8004bb8:	bfcc      	ite	gt
 8004bba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004bbe:	ea02 0900 	andle.w	r9, r2, r0
 8004bc2:	ec49 8b17 	vmov	d7, r8, r9
 8004bc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	d0a8      	beq.n	8004b22 <_strtod_l+0x552>
 8004bd0:	9a07      	ldr	r2, [sp, #28]
 8004bd2:	9200      	str	r2, [sp, #0]
 8004bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bd6:	4632      	mov	r2, r6
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f001 fa73 	bl	80060c4 <__s2b>
 8004bde:	9007      	str	r0, [sp, #28]
 8004be0:	2800      	cmp	r0, #0
 8004be2:	f43f af2f 	beq.w	8004a44 <_strtod_l+0x474>
 8004be6:	9a06      	ldr	r2, [sp, #24]
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	ebab 0305 	sub.w	r3, fp, r5
 8004bee:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8004e48 <_strtod_l+0x878>
 8004bf2:	bfa8      	it	ge
 8004bf4:	2300      	movge	r3, #0
 8004bf6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8004e50 <_strtod_l+0x880>
 8004bfa:	ed9f bb97 	vldr	d11, [pc, #604]	; 8004e58 <_strtod_l+0x888>
 8004bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004c00:	2500      	movs	r5, #0
 8004c02:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004c06:	930c      	str	r3, [sp, #48]	; 0x30
 8004c08:	462e      	mov	r6, r5
 8004c0a:	9b07      	ldr	r3, [sp, #28]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	f001 f9b0 	bl	8005f74 <_Balloc>
 8004c14:	4607      	mov	r7, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f43f af18 	beq.w	8004a4c <_strtod_l+0x47c>
 8004c1c:	9b07      	ldr	r3, [sp, #28]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	3202      	adds	r2, #2
 8004c22:	f103 010c 	add.w	r1, r3, #12
 8004c26:	0092      	lsls	r2, r2, #2
 8004c28:	300c      	adds	r0, #12
 8004c2a:	f000 fcfe 	bl	800562a <memcpy>
 8004c2e:	ec49 8b10 	vmov	d0, r8, r9
 8004c32:	aa14      	add	r2, sp, #80	; 0x50
 8004c34:	a913      	add	r1, sp, #76	; 0x4c
 8004c36:	4620      	mov	r0, r4
 8004c38:	f001 fd78 	bl	800672c <__d2b>
 8004c3c:	ec49 8b18 	vmov	d8, r8, r9
 8004c40:	9012      	str	r0, [sp, #72]	; 0x48
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f43f af02 	beq.w	8004a4c <_strtod_l+0x47c>
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f001 fad2 	bl	80061f4 <__i2b>
 8004c50:	4606      	mov	r6, r0
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f43f aefa 	beq.w	8004a4c <_strtod_l+0x47c>
 8004c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c5a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bfab      	itete	ge
 8004c60:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8004c62:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8004c64:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8004c68:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8004c6c:	bfac      	ite	ge
 8004c6e:	eb03 0b02 	addge.w	fp, r3, r2
 8004c72:	eba2 0a03 	sublt.w	sl, r2, r3
 8004c76:	9a05      	ldr	r2, [sp, #20]
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	4a7b      	ldr	r2, [pc, #492]	; (8004e6c <_strtod_l+0x89c>)
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8004c86:	f280 80cd 	bge.w	8004e24 <_strtod_l+0x854>
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	2a1f      	cmp	r2, #31
 8004c8e:	eba1 0102 	sub.w	r1, r1, r2
 8004c92:	f04f 0001 	mov.w	r0, #1
 8004c96:	f300 80b9 	bgt.w	8004e0c <_strtod_l+0x83c>
 8004c9a:	fa00 f302 	lsl.w	r3, r0, r2
 8004c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca4:	eb0b 0301 	add.w	r3, fp, r1
 8004ca8:	9a05      	ldr	r2, [sp, #20]
 8004caa:	459b      	cmp	fp, r3
 8004cac:	448a      	add	sl, r1
 8004cae:	4492      	add	sl, r2
 8004cb0:	465a      	mov	r2, fp
 8004cb2:	bfa8      	it	ge
 8004cb4:	461a      	movge	r2, r3
 8004cb6:	4552      	cmp	r2, sl
 8004cb8:	bfa8      	it	ge
 8004cba:	4652      	movge	r2, sl
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	bfc2      	ittt	gt
 8004cc0:	1a9b      	subgt	r3, r3, r2
 8004cc2:	ebaa 0a02 	subgt.w	sl, sl, r2
 8004cc6:	ebab 0b02 	subgt.w	fp, fp, r2
 8004cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	dd18      	ble.n	8004d02 <_strtod_l+0x732>
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cd6:	f001 fb4d 	bl	8006374 <__pow5mult>
 8004cda:	4606      	mov	r6, r0
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f43f aeb5 	beq.w	8004a4c <_strtod_l+0x47c>
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f001 fa9a 	bl	8006220 <__multiply>
 8004cec:	900e      	str	r0, [sp, #56]	; 0x38
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f43f aeac 	beq.w	8004a4c <_strtod_l+0x47c>
 8004cf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 f97c 	bl	8005ff4 <_Bfree>
 8004cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d00:	9212      	str	r2, [sp, #72]	; 0x48
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f300 8093 	bgt.w	8004e2e <_strtod_l+0x85e>
 8004d08:	9b06      	ldr	r3, [sp, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	dd08      	ble.n	8004d20 <_strtod_l+0x750>
 8004d0e:	4639      	mov	r1, r7
 8004d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d12:	4620      	mov	r0, r4
 8004d14:	f001 fb2e 	bl	8006374 <__pow5mult>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f43f ae96 	beq.w	8004a4c <_strtod_l+0x47c>
 8004d20:	f1ba 0f00 	cmp.w	sl, #0
 8004d24:	dd08      	ble.n	8004d38 <_strtod_l+0x768>
 8004d26:	4639      	mov	r1, r7
 8004d28:	4652      	mov	r2, sl
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f001 fb7c 	bl	8006428 <__lshift>
 8004d30:	4607      	mov	r7, r0
 8004d32:	2800      	cmp	r0, #0
 8004d34:	f43f ae8a 	beq.w	8004a4c <_strtod_l+0x47c>
 8004d38:	f1bb 0f00 	cmp.w	fp, #0
 8004d3c:	dd08      	ble.n	8004d50 <_strtod_l+0x780>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	465a      	mov	r2, fp
 8004d42:	4620      	mov	r0, r4
 8004d44:	f001 fb70 	bl	8006428 <__lshift>
 8004d48:	4606      	mov	r6, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f43f ae7e 	beq.w	8004a4c <_strtod_l+0x47c>
 8004d50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004d52:	463a      	mov	r2, r7
 8004d54:	4620      	mov	r0, r4
 8004d56:	f001 fbef 	bl	8006538 <__mdiff>
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f43f ae75 	beq.w	8004a4c <_strtod_l+0x47c>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8004d68:	60c3      	str	r3, [r0, #12]
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	f001 fbc8 	bl	8006500 <__mcmp>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	da7f      	bge.n	8004e74 <_strtod_l+0x8a4>
 8004d74:	ea5a 0a08 	orrs.w	sl, sl, r8
 8004d78:	f040 80a5 	bne.w	8004ec6 <_strtod_l+0x8f6>
 8004d7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 80a0 	bne.w	8004ec6 <_strtod_l+0x8f6>
 8004d86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d8a:	0d1b      	lsrs	r3, r3, #20
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d92:	f240 8098 	bls.w	8004ec6 <_strtod_l+0x8f6>
 8004d96:	696b      	ldr	r3, [r5, #20]
 8004d98:	b91b      	cbnz	r3, 8004da2 <_strtod_l+0x7d2>
 8004d9a:	692b      	ldr	r3, [r5, #16]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	f340 8092 	ble.w	8004ec6 <_strtod_l+0x8f6>
 8004da2:	4629      	mov	r1, r5
 8004da4:	2201      	movs	r2, #1
 8004da6:	4620      	mov	r0, r4
 8004da8:	f001 fb3e 	bl	8006428 <__lshift>
 8004dac:	4631      	mov	r1, r6
 8004dae:	4605      	mov	r5, r0
 8004db0:	f001 fba6 	bl	8006500 <__mcmp>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	f340 8086 	ble.w	8004ec6 <_strtod_l+0x8f6>
 8004dba:	9905      	ldr	r1, [sp, #20]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <_strtod_l+0x8a0>)
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	2900      	cmp	r1, #0
 8004dc2:	f000 809f 	beq.w	8004f04 <_strtod_l+0x934>
 8004dc6:	ea02 0109 	and.w	r1, r2, r9
 8004dca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004dce:	f300 8099 	bgt.w	8004f04 <_strtod_l+0x934>
 8004dd2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004dd6:	f77f aea8 	ble.w	8004b2a <_strtod_l+0x55a>
 8004dda:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8004e60 <_strtod_l+0x890>
 8004dde:	ec49 8b16 	vmov	d6, r8, r9
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <_strtod_l+0x8a0>)
 8004de4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004de8:	ee17 2a90 	vmov	r2, s15
 8004dec:	4013      	ands	r3, r2
 8004dee:	ec59 8b17 	vmov	r8, r9, d7
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f47f ae34 	bne.w	8004a60 <_strtod_l+0x490>
 8004df8:	2322      	movs	r3, #34	; 0x22
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	e630      	b.n	8004a60 <_strtod_l+0x490>
 8004dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004e02:	fa01 f202 	lsl.w	r2, r1, r2
 8004e06:	ea02 0808 	and.w	r8, r2, r8
 8004e0a:	e6da      	b.n	8004bc2 <_strtod_l+0x5f2>
 8004e0c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8004e10:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8004e14:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8004e18:	33e2      	adds	r3, #226	; 0xe2
 8004e1a:	fa00 f303 	lsl.w	r3, r0, r3
 8004e1e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8004e22:	e73f      	b.n	8004ca4 <_strtod_l+0x6d4>
 8004e24:	2200      	movs	r2, #0
 8004e26:	2301      	movs	r3, #1
 8004e28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e2c:	e73a      	b.n	8004ca4 <_strtod_l+0x6d4>
 8004e2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004e30:	461a      	mov	r2, r3
 8004e32:	4620      	mov	r0, r4
 8004e34:	f001 faf8 	bl	8006428 <__lshift>
 8004e38:	9012      	str	r0, [sp, #72]	; 0x48
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	f47f af64 	bne.w	8004d08 <_strtod_l+0x738>
 8004e40:	e604      	b.n	8004a4c <_strtod_l+0x47c>
 8004e42:	bf00      	nop
 8004e44:	f3af 8000 	nop.w
 8004e48:	94a03595 	.word	0x94a03595
 8004e4c:	3fcfffff 	.word	0x3fcfffff
 8004e50:	94a03595 	.word	0x94a03595
 8004e54:	3fdfffff 	.word	0x3fdfffff
 8004e58:	35afe535 	.word	0x35afe535
 8004e5c:	3fe00000 	.word	0x3fe00000
 8004e60:	00000000 	.word	0x00000000
 8004e64:	39500000 	.word	0x39500000
 8004e68:	08007908 	.word	0x08007908
 8004e6c:	fffffc02 	.word	0xfffffc02
 8004e70:	7ff00000 	.word	0x7ff00000
 8004e74:	46cb      	mov	fp, r9
 8004e76:	d15f      	bne.n	8004f38 <_strtod_l+0x968>
 8004e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e7c:	f1ba 0f00 	cmp.w	sl, #0
 8004e80:	d02a      	beq.n	8004ed8 <_strtod_l+0x908>
 8004e82:	4aa7      	ldr	r2, [pc, #668]	; (8005120 <_strtod_l+0xb50>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d12b      	bne.n	8004ee0 <_strtod_l+0x910>
 8004e88:	9b05      	ldr	r3, [sp, #20]
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	b1fb      	cbz	r3, 8004ece <_strtod_l+0x8fe>
 8004e8e:	4ba5      	ldr	r3, [pc, #660]	; (8005124 <_strtod_l+0xb54>)
 8004e90:	ea09 0303 	and.w	r3, r9, r3
 8004e94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e98:	f04f 31ff 	mov.w	r1, #4294967295
 8004e9c:	d81a      	bhi.n	8004ed4 <_strtod_l+0x904>
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d119      	bne.n	8004ee0 <_strtod_l+0x910>
 8004eac:	4b9e      	ldr	r3, [pc, #632]	; (8005128 <_strtod_l+0xb58>)
 8004eae:	459b      	cmp	fp, r3
 8004eb0:	d102      	bne.n	8004eb8 <_strtod_l+0x8e8>
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	f43f adca 	beq.w	8004a4c <_strtod_l+0x47c>
 8004eb8:	4b9a      	ldr	r3, [pc, #616]	; (8005124 <_strtod_l+0xb54>)
 8004eba:	ea0b 0303 	and.w	r3, fp, r3
 8004ebe:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	9b05      	ldr	r3, [sp, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d186      	bne.n	8004dda <_strtod_l+0x80a>
 8004ecc:	e5c8      	b.n	8004a60 <_strtod_l+0x490>
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed2:	e7e9      	b.n	8004ea8 <_strtod_l+0x8d8>
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	e7e7      	b.n	8004ea8 <_strtod_l+0x8d8>
 8004ed8:	ea53 0308 	orrs.w	r3, r3, r8
 8004edc:	f43f af6d 	beq.w	8004dba <_strtod_l+0x7ea>
 8004ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee2:	b1cb      	cbz	r3, 8004f18 <_strtod_l+0x948>
 8004ee4:	ea13 0f0b 	tst.w	r3, fp
 8004ee8:	d0ed      	beq.n	8004ec6 <_strtod_l+0x8f6>
 8004eea:	9a05      	ldr	r2, [sp, #20]
 8004eec:	4640      	mov	r0, r8
 8004eee:	4649      	mov	r1, r9
 8004ef0:	f1ba 0f00 	cmp.w	sl, #0
 8004ef4:	d014      	beq.n	8004f20 <_strtod_l+0x950>
 8004ef6:	f7ff fb4e 	bl	8004596 <sulp>
 8004efa:	ee38 7b00 	vadd.f64	d7, d8, d0
 8004efe:	ec59 8b17 	vmov	r8, r9, d7
 8004f02:	e7e0      	b.n	8004ec6 <_strtod_l+0x8f6>
 8004f04:	4013      	ands	r3, r2
 8004f06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004f0a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004f0e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004f12:	f04f 38ff 	mov.w	r8, #4294967295
 8004f16:	e7d6      	b.n	8004ec6 <_strtod_l+0x8f6>
 8004f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f1a:	ea13 0f08 	tst.w	r3, r8
 8004f1e:	e7e3      	b.n	8004ee8 <_strtod_l+0x918>
 8004f20:	f7ff fb39 	bl	8004596 <sulp>
 8004f24:	ee38 0b40 	vsub.f64	d0, d8, d0
 8004f28:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8004f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f30:	ec59 8b10 	vmov	r8, r9, d0
 8004f34:	d1c7      	bne.n	8004ec6 <_strtod_l+0x8f6>
 8004f36:	e5f8      	b.n	8004b2a <_strtod_l+0x55a>
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f001 fc50 	bl	80067e0 <__ratio>
 8004f40:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8004f44:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	d85f      	bhi.n	800500e <_strtod_l+0xa3e>
 8004f4e:	f1ba 0f00 	cmp.w	sl, #0
 8004f52:	d166      	bne.n	8005022 <_strtod_l+0xa52>
 8004f54:	f1b8 0f00 	cmp.w	r8, #0
 8004f58:	d14d      	bne.n	8004ff6 <_strtod_l+0xa26>
 8004f5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f5e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d162      	bne.n	800502c <_strtod_l+0xa5c>
 8004f66:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8004f6a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	d401      	bmi.n	8004f78 <_strtod_l+0x9a8>
 8004f74:	ee20 db0d 	vmul.f64	d13, d0, d13
 8004f78:	eeb1 cb4d 	vneg.f64	d12, d13
 8004f7c:	4869      	ldr	r0, [pc, #420]	; (8005124 <_strtod_l+0xb54>)
 8004f7e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8005130 <_strtod_l+0xb60>
 8004f82:	ea0b 0100 	and.w	r1, fp, r0
 8004f86:	4561      	cmp	r1, ip
 8004f88:	ec53 2b1c 	vmov	r2, r3, d12
 8004f8c:	d17a      	bne.n	8005084 <_strtod_l+0xab4>
 8004f8e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8004f92:	ec49 8b10 	vmov	d0, r8, r9
 8004f96:	910a      	str	r1, [sp, #40]	; 0x28
 8004f98:	f001 fb58 	bl	800664c <__ulp>
 8004f9c:	ec49 8b1e 	vmov	d14, r8, r9
 8004fa0:	4860      	ldr	r0, [pc, #384]	; (8005124 <_strtod_l+0xb54>)
 8004fa2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8004fa6:	ee1e 3a90 	vmov	r3, s29
 8004faa:	4a60      	ldr	r2, [pc, #384]	; (800512c <_strtod_l+0xb5c>)
 8004fac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fae:	4018      	ands	r0, r3
 8004fb0:	4290      	cmp	r0, r2
 8004fb2:	ec59 8b1e 	vmov	r8, r9, d14
 8004fb6:	d93c      	bls.n	8005032 <_strtod_l+0xa62>
 8004fb8:	ee18 2a90 	vmov	r2, s17
 8004fbc:	4b5a      	ldr	r3, [pc, #360]	; (8005128 <_strtod_l+0xb58>)
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d104      	bne.n	8004fcc <_strtod_l+0x9fc>
 8004fc2:	ee18 3a10 	vmov	r3, s16
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f43f ad40 	beq.w	8004a4c <_strtod_l+0x47c>
 8004fcc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8005128 <_strtod_l+0xb58>
 8004fd0:	f04f 38ff 	mov.w	r8, #4294967295
 8004fd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f001 f80c 	bl	8005ff4 <_Bfree>
 8004fdc:	4639      	mov	r1, r7
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f001 f808 	bl	8005ff4 <_Bfree>
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f001 f804 	bl	8005ff4 <_Bfree>
 8004fec:	4629      	mov	r1, r5
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f001 f800 	bl	8005ff4 <_Bfree>
 8004ff4:	e609      	b.n	8004c0a <_strtod_l+0x63a>
 8004ff6:	f1b8 0f01 	cmp.w	r8, #1
 8004ffa:	d103      	bne.n	8005004 <_strtod_l+0xa34>
 8004ffc:	f1b9 0f00 	cmp.w	r9, #0
 8005000:	f43f ad93 	beq.w	8004b2a <_strtod_l+0x55a>
 8005004:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8005008:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800500c:	e7b6      	b.n	8004f7c <_strtod_l+0x9ac>
 800500e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8005012:	ee20 db0d 	vmul.f64	d13, d0, d13
 8005016:	f1ba 0f00 	cmp.w	sl, #0
 800501a:	d0ad      	beq.n	8004f78 <_strtod_l+0x9a8>
 800501c:	eeb0 cb4d 	vmov.f64	d12, d13
 8005020:	e7ac      	b.n	8004f7c <_strtod_l+0x9ac>
 8005022:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8005026:	eeb0 db4c 	vmov.f64	d13, d12
 800502a:	e7a7      	b.n	8004f7c <_strtod_l+0x9ac>
 800502c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8005030:	e7a4      	b.n	8004f7c <_strtod_l+0x9ac>
 8005032:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	46cb      	mov	fp, r9
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ca      	bne.n	8004fd4 <_strtod_l+0xa04>
 800503e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005042:	0d1b      	lsrs	r3, r3, #20
 8005044:	051b      	lsls	r3, r3, #20
 8005046:	4299      	cmp	r1, r3
 8005048:	d1c4      	bne.n	8004fd4 <_strtod_l+0xa04>
 800504a:	ec51 0b1d 	vmov	r0, r1, d13
 800504e:	f7fb fb33 	bl	80006b8 <__aeabi_d2lz>
 8005052:	f7fb faeb 	bl	800062c <__aeabi_l2d>
 8005056:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800505a:	ec41 0b17 	vmov	d7, r0, r1
 800505e:	ea4b 0b08 	orr.w	fp, fp, r8
 8005062:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8005066:	ee3d db47 	vsub.f64	d13, d13, d7
 800506a:	d03c      	beq.n	80050e6 <_strtod_l+0xb16>
 800506c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	f53f acf4 	bmi.w	8004a60 <_strtod_l+0x490>
 8005078:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005080:	dda8      	ble.n	8004fd4 <_strtod_l+0xa04>
 8005082:	e4ed      	b.n	8004a60 <_strtod_l+0x490>
 8005084:	9805      	ldr	r0, [sp, #20]
 8005086:	b1f0      	cbz	r0, 80050c6 <_strtod_l+0xaf6>
 8005088:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800508c:	d81b      	bhi.n	80050c6 <_strtod_l+0xaf6>
 800508e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8005118 <_strtod_l+0xb48>
 8005092:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d811      	bhi.n	80050c0 <_strtod_l+0xaf0>
 800509c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80050a0:	ee1d 3a10 	vmov	r3, s26
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	bf38      	it	cc
 80050a8:	2301      	movcc	r3, #1
 80050aa:	ee0d 3a10 	vmov	s26, r3
 80050ae:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80050b2:	f1ba 0f00 	cmp.w	sl, #0
 80050b6:	d113      	bne.n	80050e0 <_strtod_l+0xb10>
 80050b8:	eeb1 7b4d 	vneg.f64	d7, d13
 80050bc:	ec53 2b17 	vmov	r2, r3, d7
 80050c0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80050c4:	1a43      	subs	r3, r0, r1
 80050c6:	eeb0 0b48 	vmov.f64	d0, d8
 80050ca:	ec43 2b1c 	vmov	d12, r2, r3
 80050ce:	910a      	str	r1, [sp, #40]	; 0x28
 80050d0:	f001 fabc 	bl	800664c <__ulp>
 80050d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050d6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80050da:	ec59 8b18 	vmov	r8, r9, d8
 80050de:	e7aa      	b.n	8005036 <_strtod_l+0xa66>
 80050e0:	eeb0 7b4d 	vmov.f64	d7, d13
 80050e4:	e7ea      	b.n	80050bc <_strtod_l+0xaec>
 80050e6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	f57f af71 	bpl.w	8004fd4 <_strtod_l+0xa04>
 80050f2:	e4b5      	b.n	8004a60 <_strtod_l+0x490>
 80050f4:	2300      	movs	r3, #0
 80050f6:	9308      	str	r3, [sp, #32]
 80050f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	f7ff baa6 	b.w	800464e <_strtod_l+0x7e>
 8005102:	2a65      	cmp	r2, #101	; 0x65
 8005104:	f43f aba2 	beq.w	800484c <_strtod_l+0x27c>
 8005108:	2a45      	cmp	r2, #69	; 0x45
 800510a:	f43f ab9f 	beq.w	800484c <_strtod_l+0x27c>
 800510e:	2101      	movs	r1, #1
 8005110:	f7ff bbd8 	b.w	80048c4 <_strtod_l+0x2f4>
 8005114:	f3af 8000 	nop.w
 8005118:	ffc00000 	.word	0xffc00000
 800511c:	41dfffff 	.word	0x41dfffff
 8005120:	000fffff 	.word	0x000fffff
 8005124:	7ff00000 	.word	0x7ff00000
 8005128:	7fefffff 	.word	0x7fefffff
 800512c:	7c9fffff 	.word	0x7c9fffff
 8005130:	7fe00000 	.word	0x7fe00000
 8005134:	00000000 	.word	0x00000000

08005138 <strtof>:
 8005138:	b510      	push	{r4, lr}
 800513a:	4c21      	ldr	r4, [pc, #132]	; (80051c0 <strtof+0x88>)
 800513c:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <strtof+0x8c>)
 800513e:	460a      	mov	r2, r1
 8005140:	4601      	mov	r1, r0
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	f7ff fa44 	bl	80045d0 <_strtod_l>
 8005148:	eeb4 0b40 	vcmp.f64	d0, d0
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	eeb0 7b40 	vmov.f64	d7, d0
 8005154:	d70d      	bvc.n	8005172 <strtof+0x3a>
 8005156:	ee17 3a90 	vmov	r3, s15
 800515a:	2b00      	cmp	r3, #0
 800515c:	481a      	ldr	r0, [pc, #104]	; (80051c8 <strtof+0x90>)
 800515e:	da04      	bge.n	800516a <strtof+0x32>
 8005160:	f000 fa7a 	bl	8005658 <nanf>
 8005164:	eeb1 0a40 	vneg.f32	s0, s0
 8005168:	bd10      	pop	{r4, pc}
 800516a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516e:	f000 ba73 	b.w	8005658 <nanf>
 8005172:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005176:	eddf 6a15 	vldr	s13, [pc, #84]	; 80051cc <strtof+0x94>
 800517a:	eeb0 6ac0 	vabs.f32	s12, s0
 800517e:	eeb4 6a66 	vcmp.f32	s12, s13
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	dd08      	ble.n	800519a <strtof+0x62>
 8005188:	eeb0 6bc7 	vabs.f64	d6, d7
 800518c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80051b8 <strtof+0x80>
 8005190:	eeb4 6b45 	vcmp.f64	d6, d5
 8005194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005198:	dd0a      	ble.n	80051b0 <strtof+0x78>
 800519a:	ee10 3a10 	vmov	r3, s0
 800519e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80051a2:	d1e1      	bne.n	8005168 <strtof+0x30>
 80051a4:	ee17 2a90 	vmov	r2, s15
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <strtof+0x98>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0db      	beq.n	8005168 <strtof+0x30>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	2222      	movs	r2, #34	; 0x22
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e7d7      	b.n	8005168 <strtof+0x30>
 80051b8:	ffffffff 	.word	0xffffffff
 80051bc:	7fefffff 	.word	0x7fefffff
 80051c0:	200001d0 	.word	0x200001d0
 80051c4:	20000018 	.word	0x20000018
 80051c8:	080079e4 	.word	0x080079e4
 80051cc:	7f7fffff 	.word	0x7f7fffff
 80051d0:	7ff00000 	.word	0x7ff00000

080051d4 <std>:
 80051d4:	2300      	movs	r3, #0
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4604      	mov	r4, r0
 80051da:	e9c0 3300 	strd	r3, r3, [r0]
 80051de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e2:	6083      	str	r3, [r0, #8]
 80051e4:	8181      	strh	r1, [r0, #12]
 80051e6:	6643      	str	r3, [r0, #100]	; 0x64
 80051e8:	81c2      	strh	r2, [r0, #14]
 80051ea:	6183      	str	r3, [r0, #24]
 80051ec:	4619      	mov	r1, r3
 80051ee:	2208      	movs	r2, #8
 80051f0:	305c      	adds	r0, #92	; 0x5c
 80051f2:	f000 f928 	bl	8005446 <memset>
 80051f6:	4b0d      	ldr	r3, [pc, #52]	; (800522c <std+0x58>)
 80051f8:	6263      	str	r3, [r4, #36]	; 0x24
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <std+0x5c>)
 80051fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80051fe:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <std+0x60>)
 8005200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <std+0x64>)
 8005204:	6323      	str	r3, [r4, #48]	; 0x30
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <std+0x68>)
 8005208:	6224      	str	r4, [r4, #32]
 800520a:	429c      	cmp	r4, r3
 800520c:	d006      	beq.n	800521c <std+0x48>
 800520e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005212:	4294      	cmp	r4, r2
 8005214:	d002      	beq.n	800521c <std+0x48>
 8005216:	33d0      	adds	r3, #208	; 0xd0
 8005218:	429c      	cmp	r4, r3
 800521a:	d105      	bne.n	8005228 <std+0x54>
 800521c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005224:	f000 b9f6 	b.w	8005614 <__retarget_lock_init_recursive>
 8005228:	bd10      	pop	{r4, pc}
 800522a:	bf00      	nop
 800522c:	080053c1 	.word	0x080053c1
 8005230:	080053e3 	.word	0x080053e3
 8005234:	0800541b 	.word	0x0800541b
 8005238:	0800543f 	.word	0x0800543f
 800523c:	200002dc 	.word	0x200002dc

08005240 <stdio_exit_handler>:
 8005240:	4a02      	ldr	r2, [pc, #8]	; (800524c <stdio_exit_handler+0xc>)
 8005242:	4903      	ldr	r1, [pc, #12]	; (8005250 <stdio_exit_handler+0x10>)
 8005244:	4803      	ldr	r0, [pc, #12]	; (8005254 <stdio_exit_handler+0x14>)
 8005246:	f000 b869 	b.w	800531c <_fwalk_sglue>
 800524a:	bf00      	nop
 800524c:	2000000c 	.word	0x2000000c
 8005250:	08006fc1 	.word	0x08006fc1
 8005254:	20000184 	.word	0x20000184

08005258 <cleanup_stdio>:
 8005258:	6841      	ldr	r1, [r0, #4]
 800525a:	4b0c      	ldr	r3, [pc, #48]	; (800528c <cleanup_stdio+0x34>)
 800525c:	4299      	cmp	r1, r3
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	d001      	beq.n	8005268 <cleanup_stdio+0x10>
 8005264:	f001 feac 	bl	8006fc0 <_fflush_r>
 8005268:	68a1      	ldr	r1, [r4, #8]
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <cleanup_stdio+0x38>)
 800526c:	4299      	cmp	r1, r3
 800526e:	d002      	beq.n	8005276 <cleanup_stdio+0x1e>
 8005270:	4620      	mov	r0, r4
 8005272:	f001 fea5 	bl	8006fc0 <_fflush_r>
 8005276:	68e1      	ldr	r1, [r4, #12]
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <cleanup_stdio+0x3c>)
 800527a:	4299      	cmp	r1, r3
 800527c:	d004      	beq.n	8005288 <cleanup_stdio+0x30>
 800527e:	4620      	mov	r0, r4
 8005280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005284:	f001 be9c 	b.w	8006fc0 <_fflush_r>
 8005288:	bd10      	pop	{r4, pc}
 800528a:	bf00      	nop
 800528c:	200002dc 	.word	0x200002dc
 8005290:	20000344 	.word	0x20000344
 8005294:	200003ac 	.word	0x200003ac

08005298 <global_stdio_init.part.0>:
 8005298:	b510      	push	{r4, lr}
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <global_stdio_init.part.0+0x30>)
 800529c:	4c0b      	ldr	r4, [pc, #44]	; (80052cc <global_stdio_init.part.0+0x34>)
 800529e:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <global_stdio_init.part.0+0x38>)
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	4620      	mov	r0, r4
 80052a4:	2200      	movs	r2, #0
 80052a6:	2104      	movs	r1, #4
 80052a8:	f7ff ff94 	bl	80051d4 <std>
 80052ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052b0:	2201      	movs	r2, #1
 80052b2:	2109      	movs	r1, #9
 80052b4:	f7ff ff8e 	bl	80051d4 <std>
 80052b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052bc:	2202      	movs	r2, #2
 80052be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c2:	2112      	movs	r1, #18
 80052c4:	f7ff bf86 	b.w	80051d4 <std>
 80052c8:	20000414 	.word	0x20000414
 80052cc:	200002dc 	.word	0x200002dc
 80052d0:	08005241 	.word	0x08005241

080052d4 <__sfp_lock_acquire>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__sfp_lock_acquire+0x8>)
 80052d6:	f000 b99e 	b.w	8005616 <__retarget_lock_acquire_recursive>
 80052da:	bf00      	nop
 80052dc:	2000041d 	.word	0x2000041d

080052e0 <__sfp_lock_release>:
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <__sfp_lock_release+0x8>)
 80052e2:	f000 b999 	b.w	8005618 <__retarget_lock_release_recursive>
 80052e6:	bf00      	nop
 80052e8:	2000041d 	.word	0x2000041d

080052ec <__sinit>:
 80052ec:	b510      	push	{r4, lr}
 80052ee:	4604      	mov	r4, r0
 80052f0:	f7ff fff0 	bl	80052d4 <__sfp_lock_acquire>
 80052f4:	6a23      	ldr	r3, [r4, #32]
 80052f6:	b11b      	cbz	r3, 8005300 <__sinit+0x14>
 80052f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fc:	f7ff bff0 	b.w	80052e0 <__sfp_lock_release>
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <__sinit+0x28>)
 8005302:	6223      	str	r3, [r4, #32]
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <__sinit+0x2c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f5      	bne.n	80052f8 <__sinit+0xc>
 800530c:	f7ff ffc4 	bl	8005298 <global_stdio_init.part.0>
 8005310:	e7f2      	b.n	80052f8 <__sinit+0xc>
 8005312:	bf00      	nop
 8005314:	08005259 	.word	0x08005259
 8005318:	20000414 	.word	0x20000414

0800531c <_fwalk_sglue>:
 800531c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005320:	4607      	mov	r7, r0
 8005322:	4688      	mov	r8, r1
 8005324:	4614      	mov	r4, r2
 8005326:	2600      	movs	r6, #0
 8005328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800532c:	f1b9 0901 	subs.w	r9, r9, #1
 8005330:	d505      	bpl.n	800533e <_fwalk_sglue+0x22>
 8005332:	6824      	ldr	r4, [r4, #0]
 8005334:	2c00      	cmp	r4, #0
 8005336:	d1f7      	bne.n	8005328 <_fwalk_sglue+0xc>
 8005338:	4630      	mov	r0, r6
 800533a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533e:	89ab      	ldrh	r3, [r5, #12]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d907      	bls.n	8005354 <_fwalk_sglue+0x38>
 8005344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005348:	3301      	adds	r3, #1
 800534a:	d003      	beq.n	8005354 <_fwalk_sglue+0x38>
 800534c:	4629      	mov	r1, r5
 800534e:	4638      	mov	r0, r7
 8005350:	47c0      	blx	r8
 8005352:	4306      	orrs	r6, r0
 8005354:	3568      	adds	r5, #104	; 0x68
 8005356:	e7e9      	b.n	800532c <_fwalk_sglue+0x10>

08005358 <sniprintf>:
 8005358:	b40c      	push	{r2, r3}
 800535a:	b530      	push	{r4, r5, lr}
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <sniprintf+0x64>)
 800535e:	1e0c      	subs	r4, r1, #0
 8005360:	681d      	ldr	r5, [r3, #0]
 8005362:	b09d      	sub	sp, #116	; 0x74
 8005364:	da08      	bge.n	8005378 <sniprintf+0x20>
 8005366:	238b      	movs	r3, #139	; 0x8b
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	f04f 30ff 	mov.w	r0, #4294967295
 800536e:	b01d      	add	sp, #116	; 0x74
 8005370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005374:	b002      	add	sp, #8
 8005376:	4770      	bx	lr
 8005378:	f44f 7302 	mov.w	r3, #520	; 0x208
 800537c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005380:	bf14      	ite	ne
 8005382:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005386:	4623      	moveq	r3, r4
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	9307      	str	r3, [sp, #28]
 800538c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005390:	9002      	str	r0, [sp, #8]
 8005392:	9006      	str	r0, [sp, #24]
 8005394:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005398:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800539a:	ab21      	add	r3, sp, #132	; 0x84
 800539c:	a902      	add	r1, sp, #8
 800539e:	4628      	mov	r0, r5
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	f001 faf9 	bl	8006998 <_svfiprintf_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	bfbc      	itt	lt
 80053aa:	238b      	movlt	r3, #139	; 0x8b
 80053ac:	602b      	strlt	r3, [r5, #0]
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	d0dd      	beq.n	800536e <sniprintf+0x16>
 80053b2:	9b02      	ldr	r3, [sp, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e7d9      	b.n	800536e <sniprintf+0x16>
 80053ba:	bf00      	nop
 80053bc:	200001d0 	.word	0x200001d0

080053c0 <__sread>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	460c      	mov	r4, r1
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	f000 f8d6 	bl	8005578 <_read_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	bfab      	itete	ge
 80053d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053d2:	89a3      	ldrhlt	r3, [r4, #12]
 80053d4:	181b      	addge	r3, r3, r0
 80053d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053da:	bfac      	ite	ge
 80053dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80053de:	81a3      	strhlt	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__swrite>:
 80053e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	461f      	mov	r7, r3
 80053e8:	898b      	ldrh	r3, [r1, #12]
 80053ea:	05db      	lsls	r3, r3, #23
 80053ec:	4605      	mov	r5, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	d505      	bpl.n	8005400 <__swrite+0x1e>
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	2302      	movs	r3, #2
 80053fa:	2200      	movs	r2, #0
 80053fc:	f000 f8aa 	bl	8005554 <_lseek_r>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	4628      	mov	r0, r5
 8005412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	f000 b8c1 	b.w	800559c <_write_r>

0800541a <__sseek>:
 800541a:	b510      	push	{r4, lr}
 800541c:	460c      	mov	r4, r1
 800541e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005422:	f000 f897 	bl	8005554 <_lseek_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	bf15      	itete	ne
 800542c:	6560      	strne	r0, [r4, #84]	; 0x54
 800542e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005436:	81a3      	strheq	r3, [r4, #12]
 8005438:	bf18      	it	ne
 800543a:	81a3      	strhne	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__sclose>:
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 b877 	b.w	8005534 <_close_r>

08005446 <memset>:
 8005446:	4402      	add	r2, r0
 8005448:	4603      	mov	r3, r0
 800544a:	4293      	cmp	r3, r2
 800544c:	d100      	bne.n	8005450 <memset+0xa>
 800544e:	4770      	bx	lr
 8005450:	f803 1b01 	strb.w	r1, [r3], #1
 8005454:	e7f9      	b.n	800544a <memset+0x4>

08005456 <strncmp>:
 8005456:	b510      	push	{r4, lr}
 8005458:	b16a      	cbz	r2, 8005476 <strncmp+0x20>
 800545a:	3901      	subs	r1, #1
 800545c:	1884      	adds	r4, r0, r2
 800545e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005462:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005466:	429a      	cmp	r2, r3
 8005468:	d103      	bne.n	8005472 <strncmp+0x1c>
 800546a:	42a0      	cmp	r0, r4
 800546c:	d001      	beq.n	8005472 <strncmp+0x1c>
 800546e:	2a00      	cmp	r2, #0
 8005470:	d1f5      	bne.n	800545e <strncmp+0x8>
 8005472:	1ad0      	subs	r0, r2, r3
 8005474:	bd10      	pop	{r4, pc}
 8005476:	4610      	mov	r0, r2
 8005478:	e7fc      	b.n	8005474 <strncmp+0x1e>
	...

0800547c <strtok>:
 800547c:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <strtok+0x5c>)
 800547e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005480:	681e      	ldr	r6, [r3, #0]
 8005482:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005484:	4605      	mov	r5, r0
 8005486:	b9fc      	cbnz	r4, 80054c8 <strtok+0x4c>
 8005488:	2050      	movs	r0, #80	; 0x50
 800548a:	9101      	str	r1, [sp, #4]
 800548c:	f000 fcac 	bl	8005de8 <malloc>
 8005490:	9901      	ldr	r1, [sp, #4]
 8005492:	6470      	str	r0, [r6, #68]	; 0x44
 8005494:	4602      	mov	r2, r0
 8005496:	b920      	cbnz	r0, 80054a2 <strtok+0x26>
 8005498:	4b10      	ldr	r3, [pc, #64]	; (80054dc <strtok+0x60>)
 800549a:	4811      	ldr	r0, [pc, #68]	; (80054e0 <strtok+0x64>)
 800549c:	215b      	movs	r1, #91	; 0x5b
 800549e:	f000 f8e1 	bl	8005664 <__assert_func>
 80054a2:	e9c0 4400 	strd	r4, r4, [r0]
 80054a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80054aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80054ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80054b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80054b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80054ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80054be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80054c2:	6184      	str	r4, [r0, #24]
 80054c4:	7704      	strb	r4, [r0, #28]
 80054c6:	6244      	str	r4, [r0, #36]	; 0x24
 80054c8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80054ca:	2301      	movs	r3, #1
 80054cc:	4628      	mov	r0, r5
 80054ce:	b002      	add	sp, #8
 80054d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054d4:	f000 b806 	b.w	80054e4 <__strtok_r>
 80054d8:	200001d0 	.word	0x200001d0
 80054dc:	08007930 	.word	0x08007930
 80054e0:	08007947 	.word	0x08007947

080054e4 <__strtok_r>:
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	b908      	cbnz	r0, 80054ec <__strtok_r+0x8>
 80054e8:	6810      	ldr	r0, [r2, #0]
 80054ea:	b188      	cbz	r0, 8005510 <__strtok_r+0x2c>
 80054ec:	4604      	mov	r4, r0
 80054ee:	4620      	mov	r0, r4
 80054f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80054f4:	460f      	mov	r7, r1
 80054f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80054fa:	b91e      	cbnz	r6, 8005504 <__strtok_r+0x20>
 80054fc:	b965      	cbnz	r5, 8005518 <__strtok_r+0x34>
 80054fe:	6015      	str	r5, [r2, #0]
 8005500:	4628      	mov	r0, r5
 8005502:	e005      	b.n	8005510 <__strtok_r+0x2c>
 8005504:	42b5      	cmp	r5, r6
 8005506:	d1f6      	bne.n	80054f6 <__strtok_r+0x12>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <__strtok_r+0xa>
 800550c:	6014      	str	r4, [r2, #0]
 800550e:	7003      	strb	r3, [r0, #0]
 8005510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005512:	461c      	mov	r4, r3
 8005514:	e00c      	b.n	8005530 <__strtok_r+0x4c>
 8005516:	b915      	cbnz	r5, 800551e <__strtok_r+0x3a>
 8005518:	f814 3b01 	ldrb.w	r3, [r4], #1
 800551c:	460e      	mov	r6, r1
 800551e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005522:	42ab      	cmp	r3, r5
 8005524:	d1f7      	bne.n	8005516 <__strtok_r+0x32>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f3      	beq.n	8005512 <__strtok_r+0x2e>
 800552a:	2300      	movs	r3, #0
 800552c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005530:	6014      	str	r4, [r2, #0]
 8005532:	e7ed      	b.n	8005510 <__strtok_r+0x2c>

08005534 <_close_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d06      	ldr	r5, [pc, #24]	; (8005550 <_close_r+0x1c>)
 8005538:	2300      	movs	r3, #0
 800553a:	4604      	mov	r4, r0
 800553c:	4608      	mov	r0, r1
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	f7fc fa01 	bl	8001946 <_close>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_close_r+0x1a>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_close_r+0x1a>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20000418 	.word	0x20000418

08005554 <_lseek_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d07      	ldr	r5, [pc, #28]	; (8005574 <_lseek_r+0x20>)
 8005558:	4604      	mov	r4, r0
 800555a:	4608      	mov	r0, r1
 800555c:	4611      	mov	r1, r2
 800555e:	2200      	movs	r2, #0
 8005560:	602a      	str	r2, [r5, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f7fc fa16 	bl	8001994 <_lseek>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_lseek_r+0x1e>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_lseek_r+0x1e>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	20000418 	.word	0x20000418

08005578 <_read_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d07      	ldr	r5, [pc, #28]	; (8005598 <_read_r+0x20>)
 800557c:	4604      	mov	r4, r0
 800557e:	4608      	mov	r0, r1
 8005580:	4611      	mov	r1, r2
 8005582:	2200      	movs	r2, #0
 8005584:	602a      	str	r2, [r5, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	f7fc f9a4 	bl	80018d4 <_read>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_read_r+0x1e>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_read_r+0x1e>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	20000418 	.word	0x20000418

0800559c <_write_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d07      	ldr	r5, [pc, #28]	; (80055bc <_write_r+0x20>)
 80055a0:	4604      	mov	r4, r0
 80055a2:	4608      	mov	r0, r1
 80055a4:	4611      	mov	r1, r2
 80055a6:	2200      	movs	r2, #0
 80055a8:	602a      	str	r2, [r5, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f7fc f9af 	bl	800190e <_write>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_write_r+0x1e>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_write_r+0x1e>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000418 	.word	0x20000418

080055c0 <__errno>:
 80055c0:	4b01      	ldr	r3, [pc, #4]	; (80055c8 <__errno+0x8>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	200001d0 	.word	0x200001d0

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4d0d      	ldr	r5, [pc, #52]	; (8005604 <__libc_init_array+0x38>)
 80055d0:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <__libc_init_array+0x3c>)
 80055d2:	1b64      	subs	r4, r4, r5
 80055d4:	10a4      	asrs	r4, r4, #2
 80055d6:	2600      	movs	r6, #0
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	4d0b      	ldr	r5, [pc, #44]	; (800560c <__libc_init_array+0x40>)
 80055de:	4c0c      	ldr	r4, [pc, #48]	; (8005610 <__libc_init_array+0x44>)
 80055e0:	f002 f848 	bl	8007674 <_init>
 80055e4:	1b64      	subs	r4, r4, r5
 80055e6:	10a4      	asrs	r4, r4, #2
 80055e8:	2600      	movs	r6, #0
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	08007ce8 	.word	0x08007ce8
 8005608:	08007ce8 	.word	0x08007ce8
 800560c:	08007ce8 	.word	0x08007ce8
 8005610:	08007cec 	.word	0x08007cec

08005614 <__retarget_lock_init_recursive>:
 8005614:	4770      	bx	lr

08005616 <__retarget_lock_acquire_recursive>:
 8005616:	4770      	bx	lr

08005618 <__retarget_lock_release_recursive>:
 8005618:	4770      	bx	lr

0800561a <strcpy>:
 800561a:	4603      	mov	r3, r0
 800561c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005620:	f803 2b01 	strb.w	r2, [r3], #1
 8005624:	2a00      	cmp	r2, #0
 8005626:	d1f9      	bne.n	800561c <strcpy+0x2>
 8005628:	4770      	bx	lr

0800562a <memcpy>:
 800562a:	440a      	add	r2, r1
 800562c:	4291      	cmp	r1, r2
 800562e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005632:	d100      	bne.n	8005636 <memcpy+0xc>
 8005634:	4770      	bx	lr
 8005636:	b510      	push	{r4, lr}
 8005638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005640:	4291      	cmp	r1, r2
 8005642:	d1f9      	bne.n	8005638 <memcpy+0xe>
 8005644:	bd10      	pop	{r4, pc}
	...

08005648 <nan>:
 8005648:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005650 <nan+0x8>
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	00000000 	.word	0x00000000
 8005654:	7ff80000 	.word	0x7ff80000

08005658 <nanf>:
 8005658:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005660 <nanf+0x8>
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	7fc00000 	.word	0x7fc00000

08005664 <__assert_func>:
 8005664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005666:	4614      	mov	r4, r2
 8005668:	461a      	mov	r2, r3
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <__assert_func+0x2c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4605      	mov	r5, r0
 8005670:	68d8      	ldr	r0, [r3, #12]
 8005672:	b14c      	cbz	r4, 8005688 <__assert_func+0x24>
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <__assert_func+0x30>)
 8005676:	9100      	str	r1, [sp, #0]
 8005678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800567c:	4906      	ldr	r1, [pc, #24]	; (8005698 <__assert_func+0x34>)
 800567e:	462b      	mov	r3, r5
 8005680:	f001 fcc6 	bl	8007010 <fiprintf>
 8005684:	f001 fd00 	bl	8007088 <abort>
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <__assert_func+0x38>)
 800568a:	461c      	mov	r4, r3
 800568c:	e7f3      	b.n	8005676 <__assert_func+0x12>
 800568e:	bf00      	nop
 8005690:	200001d0 	.word	0x200001d0
 8005694:	080079a9 	.word	0x080079a9
 8005698:	080079b6 	.word	0x080079b6
 800569c:	080079e4 	.word	0x080079e4

080056a0 <_free_r>:
 80056a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d044      	beq.n	8005730 <_free_r+0x90>
 80056a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056aa:	9001      	str	r0, [sp, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f1a1 0404 	sub.w	r4, r1, #4
 80056b2:	bfb8      	it	lt
 80056b4:	18e4      	addlt	r4, r4, r3
 80056b6:	f000 fc51 	bl	8005f5c <__malloc_lock>
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <_free_r+0x94>)
 80056bc:	9801      	ldr	r0, [sp, #4]
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	b933      	cbnz	r3, 80056d0 <_free_r+0x30>
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	6014      	str	r4, [r2, #0]
 80056c6:	b003      	add	sp, #12
 80056c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056cc:	f000 bc4c 	b.w	8005f68 <__malloc_unlock>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d908      	bls.n	80056e6 <_free_r+0x46>
 80056d4:	6825      	ldr	r5, [r4, #0]
 80056d6:	1961      	adds	r1, r4, r5
 80056d8:	428b      	cmp	r3, r1
 80056da:	bf01      	itttt	eq
 80056dc:	6819      	ldreq	r1, [r3, #0]
 80056de:	685b      	ldreq	r3, [r3, #4]
 80056e0:	1949      	addeq	r1, r1, r5
 80056e2:	6021      	streq	r1, [r4, #0]
 80056e4:	e7ed      	b.n	80056c2 <_free_r+0x22>
 80056e6:	461a      	mov	r2, r3
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b10b      	cbz	r3, 80056f0 <_free_r+0x50>
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d9fa      	bls.n	80056e6 <_free_r+0x46>
 80056f0:	6811      	ldr	r1, [r2, #0]
 80056f2:	1855      	adds	r5, r2, r1
 80056f4:	42a5      	cmp	r5, r4
 80056f6:	d10b      	bne.n	8005710 <_free_r+0x70>
 80056f8:	6824      	ldr	r4, [r4, #0]
 80056fa:	4421      	add	r1, r4
 80056fc:	1854      	adds	r4, r2, r1
 80056fe:	42a3      	cmp	r3, r4
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	d1e0      	bne.n	80056c6 <_free_r+0x26>
 8005704:	681c      	ldr	r4, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	6053      	str	r3, [r2, #4]
 800570a:	440c      	add	r4, r1
 800570c:	6014      	str	r4, [r2, #0]
 800570e:	e7da      	b.n	80056c6 <_free_r+0x26>
 8005710:	d902      	bls.n	8005718 <_free_r+0x78>
 8005712:	230c      	movs	r3, #12
 8005714:	6003      	str	r3, [r0, #0]
 8005716:	e7d6      	b.n	80056c6 <_free_r+0x26>
 8005718:	6825      	ldr	r5, [r4, #0]
 800571a:	1961      	adds	r1, r4, r5
 800571c:	428b      	cmp	r3, r1
 800571e:	bf04      	itt	eq
 8005720:	6819      	ldreq	r1, [r3, #0]
 8005722:	685b      	ldreq	r3, [r3, #4]
 8005724:	6063      	str	r3, [r4, #4]
 8005726:	bf04      	itt	eq
 8005728:	1949      	addeq	r1, r1, r5
 800572a:	6021      	streq	r1, [r4, #0]
 800572c:	6054      	str	r4, [r2, #4]
 800572e:	e7ca      	b.n	80056c6 <_free_r+0x26>
 8005730:	b003      	add	sp, #12
 8005732:	bd30      	pop	{r4, r5, pc}
 8005734:	20000420 	.word	0x20000420

08005738 <rshift>:
 8005738:	6903      	ldr	r3, [r0, #16]
 800573a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800573e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005742:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005746:	f100 0414 	add.w	r4, r0, #20
 800574a:	dd45      	ble.n	80057d8 <rshift+0xa0>
 800574c:	f011 011f 	ands.w	r1, r1, #31
 8005750:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005754:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005758:	d10c      	bne.n	8005774 <rshift+0x3c>
 800575a:	f100 0710 	add.w	r7, r0, #16
 800575e:	4629      	mov	r1, r5
 8005760:	42b1      	cmp	r1, r6
 8005762:	d334      	bcc.n	80057ce <rshift+0x96>
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	1eea      	subs	r2, r5, #3
 800576a:	4296      	cmp	r6, r2
 800576c:	bf38      	it	cc
 800576e:	2300      	movcc	r3, #0
 8005770:	4423      	add	r3, r4
 8005772:	e015      	b.n	80057a0 <rshift+0x68>
 8005774:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005778:	f1c1 0820 	rsb	r8, r1, #32
 800577c:	40cf      	lsrs	r7, r1
 800577e:	f105 0e04 	add.w	lr, r5, #4
 8005782:	46a1      	mov	r9, r4
 8005784:	4576      	cmp	r6, lr
 8005786:	46f4      	mov	ip, lr
 8005788:	d815      	bhi.n	80057b6 <rshift+0x7e>
 800578a:	1a9a      	subs	r2, r3, r2
 800578c:	0092      	lsls	r2, r2, #2
 800578e:	3a04      	subs	r2, #4
 8005790:	3501      	adds	r5, #1
 8005792:	42ae      	cmp	r6, r5
 8005794:	bf38      	it	cc
 8005796:	2200      	movcc	r2, #0
 8005798:	18a3      	adds	r3, r4, r2
 800579a:	50a7      	str	r7, [r4, r2]
 800579c:	b107      	cbz	r7, 80057a0 <rshift+0x68>
 800579e:	3304      	adds	r3, #4
 80057a0:	1b1a      	subs	r2, r3, r4
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80057a8:	bf08      	it	eq
 80057aa:	2300      	moveq	r3, #0
 80057ac:	6102      	str	r2, [r0, #16]
 80057ae:	bf08      	it	eq
 80057b0:	6143      	streq	r3, [r0, #20]
 80057b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057b6:	f8dc c000 	ldr.w	ip, [ip]
 80057ba:	fa0c fc08 	lsl.w	ip, ip, r8
 80057be:	ea4c 0707 	orr.w	r7, ip, r7
 80057c2:	f849 7b04 	str.w	r7, [r9], #4
 80057c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057ca:	40cf      	lsrs	r7, r1
 80057cc:	e7da      	b.n	8005784 <rshift+0x4c>
 80057ce:	f851 cb04 	ldr.w	ip, [r1], #4
 80057d2:	f847 cf04 	str.w	ip, [r7, #4]!
 80057d6:	e7c3      	b.n	8005760 <rshift+0x28>
 80057d8:	4623      	mov	r3, r4
 80057da:	e7e1      	b.n	80057a0 <rshift+0x68>

080057dc <__hexdig_fun>:
 80057dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	d802      	bhi.n	80057ea <__hexdig_fun+0xe>
 80057e4:	3820      	subs	r0, #32
 80057e6:	b2c0      	uxtb	r0, r0
 80057e8:	4770      	bx	lr
 80057ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d801      	bhi.n	80057f6 <__hexdig_fun+0x1a>
 80057f2:	3847      	subs	r0, #71	; 0x47
 80057f4:	e7f7      	b.n	80057e6 <__hexdig_fun+0xa>
 80057f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d801      	bhi.n	8005802 <__hexdig_fun+0x26>
 80057fe:	3827      	subs	r0, #39	; 0x27
 8005800:	e7f1      	b.n	80057e6 <__hexdig_fun+0xa>
 8005802:	2000      	movs	r0, #0
 8005804:	4770      	bx	lr
	...

08005808 <__gethex>:
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	4617      	mov	r7, r2
 800580e:	680a      	ldr	r2, [r1, #0]
 8005810:	b085      	sub	sp, #20
 8005812:	f102 0b02 	add.w	fp, r2, #2
 8005816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800581a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800581e:	4681      	mov	r9, r0
 8005820:	468a      	mov	sl, r1
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	32fe      	adds	r2, #254	; 0xfe
 8005826:	eb02 030b 	add.w	r3, r2, fp
 800582a:	46d8      	mov	r8, fp
 800582c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	2830      	cmp	r0, #48	; 0x30
 8005834:	d0f7      	beq.n	8005826 <__gethex+0x1e>
 8005836:	f7ff ffd1 	bl	80057dc <__hexdig_fun>
 800583a:	4604      	mov	r4, r0
 800583c:	2800      	cmp	r0, #0
 800583e:	d138      	bne.n	80058b2 <__gethex+0xaa>
 8005840:	49a7      	ldr	r1, [pc, #668]	; (8005ae0 <__gethex+0x2d8>)
 8005842:	2201      	movs	r2, #1
 8005844:	4640      	mov	r0, r8
 8005846:	f7ff fe06 	bl	8005456 <strncmp>
 800584a:	4606      	mov	r6, r0
 800584c:	2800      	cmp	r0, #0
 800584e:	d169      	bne.n	8005924 <__gethex+0x11c>
 8005850:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005854:	465d      	mov	r5, fp
 8005856:	f7ff ffc1 	bl	80057dc <__hexdig_fun>
 800585a:	2800      	cmp	r0, #0
 800585c:	d064      	beq.n	8005928 <__gethex+0x120>
 800585e:	465a      	mov	r2, fp
 8005860:	7810      	ldrb	r0, [r2, #0]
 8005862:	2830      	cmp	r0, #48	; 0x30
 8005864:	4690      	mov	r8, r2
 8005866:	f102 0201 	add.w	r2, r2, #1
 800586a:	d0f9      	beq.n	8005860 <__gethex+0x58>
 800586c:	f7ff ffb6 	bl	80057dc <__hexdig_fun>
 8005870:	2301      	movs	r3, #1
 8005872:	fab0 f480 	clz	r4, r0
 8005876:	0964      	lsrs	r4, r4, #5
 8005878:	465e      	mov	r6, fp
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	4642      	mov	r2, r8
 800587e:	4615      	mov	r5, r2
 8005880:	3201      	adds	r2, #1
 8005882:	7828      	ldrb	r0, [r5, #0]
 8005884:	f7ff ffaa 	bl	80057dc <__hexdig_fun>
 8005888:	2800      	cmp	r0, #0
 800588a:	d1f8      	bne.n	800587e <__gethex+0x76>
 800588c:	4994      	ldr	r1, [pc, #592]	; (8005ae0 <__gethex+0x2d8>)
 800588e:	2201      	movs	r2, #1
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff fde0 	bl	8005456 <strncmp>
 8005896:	b978      	cbnz	r0, 80058b8 <__gethex+0xb0>
 8005898:	b946      	cbnz	r6, 80058ac <__gethex+0xa4>
 800589a:	1c6e      	adds	r6, r5, #1
 800589c:	4632      	mov	r2, r6
 800589e:	4615      	mov	r5, r2
 80058a0:	3201      	adds	r2, #1
 80058a2:	7828      	ldrb	r0, [r5, #0]
 80058a4:	f7ff ff9a 	bl	80057dc <__hexdig_fun>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1f8      	bne.n	800589e <__gethex+0x96>
 80058ac:	1b73      	subs	r3, r6, r5
 80058ae:	009e      	lsls	r6, r3, #2
 80058b0:	e004      	b.n	80058bc <__gethex+0xb4>
 80058b2:	2400      	movs	r4, #0
 80058b4:	4626      	mov	r6, r4
 80058b6:	e7e1      	b.n	800587c <__gethex+0x74>
 80058b8:	2e00      	cmp	r6, #0
 80058ba:	d1f7      	bne.n	80058ac <__gethex+0xa4>
 80058bc:	782b      	ldrb	r3, [r5, #0]
 80058be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058c2:	2b50      	cmp	r3, #80	; 0x50
 80058c4:	d13d      	bne.n	8005942 <__gethex+0x13a>
 80058c6:	786b      	ldrb	r3, [r5, #1]
 80058c8:	2b2b      	cmp	r3, #43	; 0x2b
 80058ca:	d02f      	beq.n	800592c <__gethex+0x124>
 80058cc:	2b2d      	cmp	r3, #45	; 0x2d
 80058ce:	d031      	beq.n	8005934 <__gethex+0x12c>
 80058d0:	1c69      	adds	r1, r5, #1
 80058d2:	f04f 0b00 	mov.w	fp, #0
 80058d6:	7808      	ldrb	r0, [r1, #0]
 80058d8:	f7ff ff80 	bl	80057dc <__hexdig_fun>
 80058dc:	1e42      	subs	r2, r0, #1
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	2a18      	cmp	r2, #24
 80058e2:	d82e      	bhi.n	8005942 <__gethex+0x13a>
 80058e4:	f1a0 0210 	sub.w	r2, r0, #16
 80058e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80058ec:	f7ff ff76 	bl	80057dc <__hexdig_fun>
 80058f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80058f4:	fa5f fc8c 	uxtb.w	ip, ip
 80058f8:	f1bc 0f18 	cmp.w	ip, #24
 80058fc:	d91d      	bls.n	800593a <__gethex+0x132>
 80058fe:	f1bb 0f00 	cmp.w	fp, #0
 8005902:	d000      	beq.n	8005906 <__gethex+0xfe>
 8005904:	4252      	negs	r2, r2
 8005906:	4416      	add	r6, r2
 8005908:	f8ca 1000 	str.w	r1, [sl]
 800590c:	b1dc      	cbz	r4, 8005946 <__gethex+0x13e>
 800590e:	9b01      	ldr	r3, [sp, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	f04f 0800 	movne.w	r8, #0
 8005918:	f04f 0806 	moveq.w	r8, #6
 800591c:	4640      	mov	r0, r8
 800591e:	b005      	add	sp, #20
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	4645      	mov	r5, r8
 8005926:	4626      	mov	r6, r4
 8005928:	2401      	movs	r4, #1
 800592a:	e7c7      	b.n	80058bc <__gethex+0xb4>
 800592c:	f04f 0b00 	mov.w	fp, #0
 8005930:	1ca9      	adds	r1, r5, #2
 8005932:	e7d0      	b.n	80058d6 <__gethex+0xce>
 8005934:	f04f 0b01 	mov.w	fp, #1
 8005938:	e7fa      	b.n	8005930 <__gethex+0x128>
 800593a:	230a      	movs	r3, #10
 800593c:	fb03 0002 	mla	r0, r3, r2, r0
 8005940:	e7d0      	b.n	80058e4 <__gethex+0xdc>
 8005942:	4629      	mov	r1, r5
 8005944:	e7e0      	b.n	8005908 <__gethex+0x100>
 8005946:	eba5 0308 	sub.w	r3, r5, r8
 800594a:	3b01      	subs	r3, #1
 800594c:	4621      	mov	r1, r4
 800594e:	2b07      	cmp	r3, #7
 8005950:	dc0a      	bgt.n	8005968 <__gethex+0x160>
 8005952:	4648      	mov	r0, r9
 8005954:	f000 fb0e 	bl	8005f74 <_Balloc>
 8005958:	4604      	mov	r4, r0
 800595a:	b940      	cbnz	r0, 800596e <__gethex+0x166>
 800595c:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <__gethex+0x2dc>)
 800595e:	4602      	mov	r2, r0
 8005960:	21e4      	movs	r1, #228	; 0xe4
 8005962:	4861      	ldr	r0, [pc, #388]	; (8005ae8 <__gethex+0x2e0>)
 8005964:	f7ff fe7e 	bl	8005664 <__assert_func>
 8005968:	3101      	adds	r1, #1
 800596a:	105b      	asrs	r3, r3, #1
 800596c:	e7ef      	b.n	800594e <__gethex+0x146>
 800596e:	f100 0a14 	add.w	sl, r0, #20
 8005972:	2300      	movs	r3, #0
 8005974:	495a      	ldr	r1, [pc, #360]	; (8005ae0 <__gethex+0x2d8>)
 8005976:	f8cd a004 	str.w	sl, [sp, #4]
 800597a:	469b      	mov	fp, r3
 800597c:	45a8      	cmp	r8, r5
 800597e:	d342      	bcc.n	8005a06 <__gethex+0x1fe>
 8005980:	9801      	ldr	r0, [sp, #4]
 8005982:	f840 bb04 	str.w	fp, [r0], #4
 8005986:	eba0 000a 	sub.w	r0, r0, sl
 800598a:	1080      	asrs	r0, r0, #2
 800598c:	6120      	str	r0, [r4, #16]
 800598e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8005992:	4658      	mov	r0, fp
 8005994:	f000 fbe0 	bl	8006158 <__hi0bits>
 8005998:	683d      	ldr	r5, [r7, #0]
 800599a:	eba8 0000 	sub.w	r0, r8, r0
 800599e:	42a8      	cmp	r0, r5
 80059a0:	dd59      	ble.n	8005a56 <__gethex+0x24e>
 80059a2:	eba0 0805 	sub.w	r8, r0, r5
 80059a6:	4641      	mov	r1, r8
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 ff6c 	bl	8006886 <__any_on>
 80059ae:	4683      	mov	fp, r0
 80059b0:	b1b8      	cbz	r0, 80059e2 <__gethex+0x1da>
 80059b2:	f108 33ff 	add.w	r3, r8, #4294967295
 80059b6:	1159      	asrs	r1, r3, #5
 80059b8:	f003 021f 	and.w	r2, r3, #31
 80059bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80059c0:	f04f 0b01 	mov.w	fp, #1
 80059c4:	fa0b f202 	lsl.w	r2, fp, r2
 80059c8:	420a      	tst	r2, r1
 80059ca:	d00a      	beq.n	80059e2 <__gethex+0x1da>
 80059cc:	455b      	cmp	r3, fp
 80059ce:	dd06      	ble.n	80059de <__gethex+0x1d6>
 80059d0:	f1a8 0102 	sub.w	r1, r8, #2
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 ff56 	bl	8006886 <__any_on>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d138      	bne.n	8005a50 <__gethex+0x248>
 80059de:	f04f 0b02 	mov.w	fp, #2
 80059e2:	4641      	mov	r1, r8
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff fea7 	bl	8005738 <rshift>
 80059ea:	4446      	add	r6, r8
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	42b3      	cmp	r3, r6
 80059f0:	da41      	bge.n	8005a76 <__gethex+0x26e>
 80059f2:	4621      	mov	r1, r4
 80059f4:	4648      	mov	r0, r9
 80059f6:	f000 fafd 	bl	8005ff4 <_Bfree>
 80059fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059fc:	2300      	movs	r3, #0
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8005a04:	e78a      	b.n	800591c <__gethex+0x114>
 8005a06:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005a0a:	2a2e      	cmp	r2, #46	; 0x2e
 8005a0c:	d014      	beq.n	8005a38 <__gethex+0x230>
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d106      	bne.n	8005a20 <__gethex+0x218>
 8005a12:	9b01      	ldr	r3, [sp, #4]
 8005a14:	f843 bb04 	str.w	fp, [r3], #4
 8005a18:	f04f 0b00 	mov.w	fp, #0
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	465b      	mov	r3, fp
 8005a20:	7828      	ldrb	r0, [r5, #0]
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	f7ff feda 	bl	80057dc <__hexdig_fun>
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	f000 000f 	and.w	r0, r0, #15
 8005a2e:	4098      	lsls	r0, r3
 8005a30:	ea4b 0b00 	orr.w	fp, fp, r0
 8005a34:	3304      	adds	r3, #4
 8005a36:	e7a1      	b.n	800597c <__gethex+0x174>
 8005a38:	45a8      	cmp	r8, r5
 8005a3a:	d8e8      	bhi.n	8005a0e <__gethex+0x206>
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9303      	str	r3, [sp, #12]
 8005a42:	f7ff fd08 	bl	8005456 <strncmp>
 8005a46:	4926      	ldr	r1, [pc, #152]	; (8005ae0 <__gethex+0x2d8>)
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d1df      	bne.n	8005a0e <__gethex+0x206>
 8005a4e:	e795      	b.n	800597c <__gethex+0x174>
 8005a50:	f04f 0b03 	mov.w	fp, #3
 8005a54:	e7c5      	b.n	80059e2 <__gethex+0x1da>
 8005a56:	da0b      	bge.n	8005a70 <__gethex+0x268>
 8005a58:	eba5 0800 	sub.w	r8, r5, r0
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4642      	mov	r2, r8
 8005a60:	4648      	mov	r0, r9
 8005a62:	f000 fce1 	bl	8006428 <__lshift>
 8005a66:	eba6 0608 	sub.w	r6, r6, r8
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	f100 0a14 	add.w	sl, r0, #20
 8005a70:	f04f 0b00 	mov.w	fp, #0
 8005a74:	e7ba      	b.n	80059ec <__gethex+0x1e4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	42b3      	cmp	r3, r6
 8005a7a:	dd73      	ble.n	8005b64 <__gethex+0x35c>
 8005a7c:	1b9e      	subs	r6, r3, r6
 8005a7e:	42b5      	cmp	r5, r6
 8005a80:	dc34      	bgt.n	8005aec <__gethex+0x2e4>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d023      	beq.n	8005ad0 <__gethex+0x2c8>
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d025      	beq.n	8005ad8 <__gethex+0x2d0>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d115      	bne.n	8005abc <__gethex+0x2b4>
 8005a90:	42b5      	cmp	r5, r6
 8005a92:	d113      	bne.n	8005abc <__gethex+0x2b4>
 8005a94:	2d01      	cmp	r5, #1
 8005a96:	d10b      	bne.n	8005ab0 <__gethex+0x2a8>
 8005a98:	9a02      	ldr	r2, [sp, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	f8ca 3000 	str.w	r3, [sl]
 8005aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8005aac:	601c      	str	r4, [r3, #0]
 8005aae:	e735      	b.n	800591c <__gethex+0x114>
 8005ab0:	1e69      	subs	r1, r5, #1
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fee7 	bl	8006886 <__any_on>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d1ed      	bne.n	8005a98 <__gethex+0x290>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4648      	mov	r0, r9
 8005ac0:	f000 fa98 	bl	8005ff4 <_Bfree>
 8005ac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005ace:	e725      	b.n	800591c <__gethex+0x114>
 8005ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f2      	bne.n	8005abc <__gethex+0x2b4>
 8005ad6:	e7df      	b.n	8005a98 <__gethex+0x290>
 8005ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1dc      	bne.n	8005a98 <__gethex+0x290>
 8005ade:	e7ed      	b.n	8005abc <__gethex+0x2b4>
 8005ae0:	080078d0 	.word	0x080078d0
 8005ae4:	080079e5 	.word	0x080079e5
 8005ae8:	080079f6 	.word	0x080079f6
 8005aec:	f106 38ff 	add.w	r8, r6, #4294967295
 8005af0:	f1bb 0f00 	cmp.w	fp, #0
 8005af4:	d133      	bne.n	8005b5e <__gethex+0x356>
 8005af6:	f1b8 0f00 	cmp.w	r8, #0
 8005afa:	d004      	beq.n	8005b06 <__gethex+0x2fe>
 8005afc:	4641      	mov	r1, r8
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 fec1 	bl	8006886 <__any_on>
 8005b04:	4683      	mov	fp, r0
 8005b06:	ea4f 1268 	mov.w	r2, r8, asr #5
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005b10:	f008 081f 	and.w	r8, r8, #31
 8005b14:	fa03 f308 	lsl.w	r3, r3, r8
 8005b18:	4213      	tst	r3, r2
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	bf18      	it	ne
 8005b20:	f04b 0b02 	orrne.w	fp, fp, #2
 8005b24:	1bad      	subs	r5, r5, r6
 8005b26:	f7ff fe07 	bl	8005738 <rshift>
 8005b2a:	687e      	ldr	r6, [r7, #4]
 8005b2c:	f04f 0802 	mov.w	r8, #2
 8005b30:	f1bb 0f00 	cmp.w	fp, #0
 8005b34:	d04a      	beq.n	8005bcc <__gethex+0x3c4>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d016      	beq.n	8005b6a <__gethex+0x362>
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d018      	beq.n	8005b72 <__gethex+0x36a>
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d109      	bne.n	8005b58 <__gethex+0x350>
 8005b44:	f01b 0f02 	tst.w	fp, #2
 8005b48:	d006      	beq.n	8005b58 <__gethex+0x350>
 8005b4a:	f8da 3000 	ldr.w	r3, [sl]
 8005b4e:	ea4b 0b03 	orr.w	fp, fp, r3
 8005b52:	f01b 0f01 	tst.w	fp, #1
 8005b56:	d10f      	bne.n	8005b78 <__gethex+0x370>
 8005b58:	f048 0810 	orr.w	r8, r8, #16
 8005b5c:	e036      	b.n	8005bcc <__gethex+0x3c4>
 8005b5e:	f04f 0b01 	mov.w	fp, #1
 8005b62:	e7d0      	b.n	8005b06 <__gethex+0x2fe>
 8005b64:	f04f 0801 	mov.w	r8, #1
 8005b68:	e7e2      	b.n	8005b30 <__gethex+0x328>
 8005b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b6c:	f1c3 0301 	rsb	r3, r3, #1
 8005b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ef      	beq.n	8005b58 <__gethex+0x350>
 8005b78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b7c:	f104 0214 	add.w	r2, r4, #20
 8005b80:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4694      	mov	ip, r2
 8005b8e:	f852 1b04 	ldr.w	r1, [r2], #4
 8005b92:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005b96:	d01e      	beq.n	8005bd6 <__gethex+0x3ce>
 8005b98:	3101      	adds	r1, #1
 8005b9a:	f8cc 1000 	str.w	r1, [ip]
 8005b9e:	f1b8 0f02 	cmp.w	r8, #2
 8005ba2:	f104 0214 	add.w	r2, r4, #20
 8005ba6:	d13d      	bne.n	8005c24 <__gethex+0x41c>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	42ab      	cmp	r3, r5
 8005bae:	d10b      	bne.n	8005bc8 <__gethex+0x3c0>
 8005bb0:	1169      	asrs	r1, r5, #5
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f005 051f 	and.w	r5, r5, #31
 8005bb8:	fa03 f505 	lsl.w	r5, r3, r5
 8005bbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bc0:	421d      	tst	r5, r3
 8005bc2:	bf18      	it	ne
 8005bc4:	f04f 0801 	movne.w	r8, #1
 8005bc8:	f048 0820 	orr.w	r8, r8, #32
 8005bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bce:	601c      	str	r4, [r3, #0]
 8005bd0:	9b02      	ldr	r3, [sp, #8]
 8005bd2:	601e      	str	r6, [r3, #0]
 8005bd4:	e6a2      	b.n	800591c <__gethex+0x114>
 8005bd6:	4290      	cmp	r0, r2
 8005bd8:	f842 3c04 	str.w	r3, [r2, #-4]
 8005bdc:	d8d6      	bhi.n	8005b8c <__gethex+0x384>
 8005bde:	68a2      	ldr	r2, [r4, #8]
 8005be0:	4593      	cmp	fp, r2
 8005be2:	db17      	blt.n	8005c14 <__gethex+0x40c>
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	4648      	mov	r0, r9
 8005be8:	3101      	adds	r1, #1
 8005bea:	f000 f9c3 	bl	8005f74 <_Balloc>
 8005bee:	4682      	mov	sl, r0
 8005bf0:	b918      	cbnz	r0, 8005bfa <__gethex+0x3f2>
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <__gethex+0x458>)
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	2184      	movs	r1, #132	; 0x84
 8005bf8:	e6b3      	b.n	8005962 <__gethex+0x15a>
 8005bfa:	6922      	ldr	r2, [r4, #16]
 8005bfc:	3202      	adds	r2, #2
 8005bfe:	f104 010c 	add.w	r1, r4, #12
 8005c02:	0092      	lsls	r2, r2, #2
 8005c04:	300c      	adds	r0, #12
 8005c06:	f7ff fd10 	bl	800562a <memcpy>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4648      	mov	r0, r9
 8005c0e:	f000 f9f1 	bl	8005ff4 <_Bfree>
 8005c12:	4654      	mov	r4, sl
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	1c51      	adds	r1, r2, #1
 8005c18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005c1c:	6121      	str	r1, [r4, #16]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	6151      	str	r1, [r2, #20]
 8005c22:	e7bc      	b.n	8005b9e <__gethex+0x396>
 8005c24:	6921      	ldr	r1, [r4, #16]
 8005c26:	4559      	cmp	r1, fp
 8005c28:	dd0b      	ble.n	8005c42 <__gethex+0x43a>
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fd83 	bl	8005738 <rshift>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	3601      	adds	r6, #1
 8005c36:	42b3      	cmp	r3, r6
 8005c38:	f6ff aedb 	blt.w	80059f2 <__gethex+0x1ea>
 8005c3c:	f04f 0801 	mov.w	r8, #1
 8005c40:	e7c2      	b.n	8005bc8 <__gethex+0x3c0>
 8005c42:	f015 051f 	ands.w	r5, r5, #31
 8005c46:	d0f9      	beq.n	8005c3c <__gethex+0x434>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	f1c5 0520 	rsb	r5, r5, #32
 8005c50:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005c54:	f000 fa80 	bl	8006158 <__hi0bits>
 8005c58:	42a8      	cmp	r0, r5
 8005c5a:	dbe6      	blt.n	8005c2a <__gethex+0x422>
 8005c5c:	e7ee      	b.n	8005c3c <__gethex+0x434>
 8005c5e:	bf00      	nop
 8005c60:	080079e5 	.word	0x080079e5

08005c64 <L_shift>:
 8005c64:	f1c2 0208 	rsb	r2, r2, #8
 8005c68:	0092      	lsls	r2, r2, #2
 8005c6a:	b570      	push	{r4, r5, r6, lr}
 8005c6c:	f1c2 0620 	rsb	r6, r2, #32
 8005c70:	6843      	ldr	r3, [r0, #4]
 8005c72:	6804      	ldr	r4, [r0, #0]
 8005c74:	fa03 f506 	lsl.w	r5, r3, r6
 8005c78:	432c      	orrs	r4, r5
 8005c7a:	40d3      	lsrs	r3, r2
 8005c7c:	6004      	str	r4, [r0, #0]
 8005c7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c82:	4288      	cmp	r0, r1
 8005c84:	d3f4      	bcc.n	8005c70 <L_shift+0xc>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}

08005c88 <__match>:
 8005c88:	b530      	push	{r4, r5, lr}
 8005c8a:	6803      	ldr	r3, [r0, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c92:	b914      	cbnz	r4, 8005c9a <__match+0x12>
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	2001      	movs	r0, #1
 8005c98:	bd30      	pop	{r4, r5, pc}
 8005c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005ca2:	2d19      	cmp	r5, #25
 8005ca4:	bf98      	it	ls
 8005ca6:	3220      	addls	r2, #32
 8005ca8:	42a2      	cmp	r2, r4
 8005caa:	d0f0      	beq.n	8005c8e <__match+0x6>
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7f3      	b.n	8005c98 <__match+0x10>

08005cb0 <__hexnan>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	680b      	ldr	r3, [r1, #0]
 8005cb6:	6801      	ldr	r1, [r0, #0]
 8005cb8:	115e      	asrs	r6, r3, #5
 8005cba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005cbe:	f013 031f 	ands.w	r3, r3, #31
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	bf18      	it	ne
 8005cc6:	3604      	addne	r6, #4
 8005cc8:	2500      	movs	r5, #0
 8005cca:	1f37      	subs	r7, r6, #4
 8005ccc:	4682      	mov	sl, r0
 8005cce:	4690      	mov	r8, r2
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8005cd6:	46b9      	mov	r9, r7
 8005cd8:	463c      	mov	r4, r7
 8005cda:	9502      	str	r5, [sp, #8]
 8005cdc:	46ab      	mov	fp, r5
 8005cde:	784a      	ldrb	r2, [r1, #1]
 8005ce0:	1c4b      	adds	r3, r1, #1
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	b342      	cbz	r2, 8005d38 <__hexnan+0x88>
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	9204      	str	r2, [sp, #16]
 8005cec:	f7ff fd76 	bl	80057dc <__hexdig_fun>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d14f      	bne.n	8005d94 <__hexnan+0xe4>
 8005cf4:	9a04      	ldr	r2, [sp, #16]
 8005cf6:	9905      	ldr	r1, [sp, #20]
 8005cf8:	2a20      	cmp	r2, #32
 8005cfa:	d818      	bhi.n	8005d2e <__hexnan+0x7e>
 8005cfc:	9b02      	ldr	r3, [sp, #8]
 8005cfe:	459b      	cmp	fp, r3
 8005d00:	dd13      	ble.n	8005d2a <__hexnan+0x7a>
 8005d02:	454c      	cmp	r4, r9
 8005d04:	d206      	bcs.n	8005d14 <__hexnan+0x64>
 8005d06:	2d07      	cmp	r5, #7
 8005d08:	dc04      	bgt.n	8005d14 <__hexnan+0x64>
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7ff ffa8 	bl	8005c64 <L_shift>
 8005d14:	4544      	cmp	r4, r8
 8005d16:	d950      	bls.n	8005dba <__hexnan+0x10a>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f1a4 0904 	sub.w	r9, r4, #4
 8005d1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d22:	f8cd b008 	str.w	fp, [sp, #8]
 8005d26:	464c      	mov	r4, r9
 8005d28:	461d      	mov	r5, r3
 8005d2a:	9903      	ldr	r1, [sp, #12]
 8005d2c:	e7d7      	b.n	8005cde <__hexnan+0x2e>
 8005d2e:	2a29      	cmp	r2, #41	; 0x29
 8005d30:	d155      	bne.n	8005dde <__hexnan+0x12e>
 8005d32:	3102      	adds	r1, #2
 8005d34:	f8ca 1000 	str.w	r1, [sl]
 8005d38:	f1bb 0f00 	cmp.w	fp, #0
 8005d3c:	d04f      	beq.n	8005dde <__hexnan+0x12e>
 8005d3e:	454c      	cmp	r4, r9
 8005d40:	d206      	bcs.n	8005d50 <__hexnan+0xa0>
 8005d42:	2d07      	cmp	r5, #7
 8005d44:	dc04      	bgt.n	8005d50 <__hexnan+0xa0>
 8005d46:	462a      	mov	r2, r5
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff ff8a 	bl	8005c64 <L_shift>
 8005d50:	4544      	cmp	r4, r8
 8005d52:	d934      	bls.n	8005dbe <__hexnan+0x10e>
 8005d54:	f1a8 0204 	sub.w	r2, r8, #4
 8005d58:	4623      	mov	r3, r4
 8005d5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8005d5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d62:	429f      	cmp	r7, r3
 8005d64:	d2f9      	bcs.n	8005d5a <__hexnan+0xaa>
 8005d66:	1b3b      	subs	r3, r7, r4
 8005d68:	f023 0303 	bic.w	r3, r3, #3
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	3e03      	subs	r6, #3
 8005d70:	3401      	adds	r4, #1
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	bf38      	it	cc
 8005d76:	2304      	movcc	r3, #4
 8005d78:	4443      	add	r3, r8
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f843 2b04 	str.w	r2, [r3], #4
 8005d80:	429f      	cmp	r7, r3
 8005d82:	d2fb      	bcs.n	8005d7c <__hexnan+0xcc>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	b91b      	cbnz	r3, 8005d90 <__hexnan+0xe0>
 8005d88:	4547      	cmp	r7, r8
 8005d8a:	d126      	bne.n	8005dda <__hexnan+0x12a>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	2005      	movs	r0, #5
 8005d92:	e025      	b.n	8005de0 <__hexnan+0x130>
 8005d94:	3501      	adds	r5, #1
 8005d96:	2d08      	cmp	r5, #8
 8005d98:	f10b 0b01 	add.w	fp, fp, #1
 8005d9c:	dd06      	ble.n	8005dac <__hexnan+0xfc>
 8005d9e:	4544      	cmp	r4, r8
 8005da0:	d9c3      	bls.n	8005d2a <__hexnan+0x7a>
 8005da2:	2300      	movs	r3, #0
 8005da4:	f844 3c04 	str.w	r3, [r4, #-4]
 8005da8:	2501      	movs	r5, #1
 8005daa:	3c04      	subs	r4, #4
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	f000 000f 	and.w	r0, r0, #15
 8005db2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005db6:	6020      	str	r0, [r4, #0]
 8005db8:	e7b7      	b.n	8005d2a <__hexnan+0x7a>
 8005dba:	2508      	movs	r5, #8
 8005dbc:	e7b5      	b.n	8005d2a <__hexnan+0x7a>
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0df      	beq.n	8005d84 <__hexnan+0xd4>
 8005dc4:	f1c3 0320 	rsb	r3, r3, #32
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	40da      	lsrs	r2, r3
 8005dce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	f846 3c04 	str.w	r3, [r6, #-4]
 8005dd8:	e7d4      	b.n	8005d84 <__hexnan+0xd4>
 8005dda:	3f04      	subs	r7, #4
 8005ddc:	e7d2      	b.n	8005d84 <__hexnan+0xd4>
 8005dde:	2004      	movs	r0, #4
 8005de0:	b007      	add	sp, #28
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005de8 <malloc>:
 8005de8:	4b02      	ldr	r3, [pc, #8]	; (8005df4 <malloc+0xc>)
 8005dea:	4601      	mov	r1, r0
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f000 b823 	b.w	8005e38 <_malloc_r>
 8005df2:	bf00      	nop
 8005df4:	200001d0 	.word	0x200001d0

08005df8 <sbrk_aligned>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4e0e      	ldr	r6, [pc, #56]	; (8005e34 <sbrk_aligned+0x3c>)
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	6831      	ldr	r1, [r6, #0]
 8005e00:	4605      	mov	r5, r0
 8005e02:	b911      	cbnz	r1, 8005e0a <sbrk_aligned+0x12>
 8005e04:	f001 f930 	bl	8007068 <_sbrk_r>
 8005e08:	6030      	str	r0, [r6, #0]
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f001 f92b 	bl	8007068 <_sbrk_r>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	d00a      	beq.n	8005e2c <sbrk_aligned+0x34>
 8005e16:	1cc4      	adds	r4, r0, #3
 8005e18:	f024 0403 	bic.w	r4, r4, #3
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	d007      	beq.n	8005e30 <sbrk_aligned+0x38>
 8005e20:	1a21      	subs	r1, r4, r0
 8005e22:	4628      	mov	r0, r5
 8005e24:	f001 f920 	bl	8007068 <_sbrk_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d101      	bne.n	8005e30 <sbrk_aligned+0x38>
 8005e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e30:	4620      	mov	r0, r4
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	20000424 	.word	0x20000424

08005e38 <_malloc_r>:
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e3c:	1ccd      	adds	r5, r1, #3
 8005e3e:	f025 0503 	bic.w	r5, r5, #3
 8005e42:	3508      	adds	r5, #8
 8005e44:	2d0c      	cmp	r5, #12
 8005e46:	bf38      	it	cc
 8005e48:	250c      	movcc	r5, #12
 8005e4a:	2d00      	cmp	r5, #0
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	db01      	blt.n	8005e54 <_malloc_r+0x1c>
 8005e50:	42a9      	cmp	r1, r5
 8005e52:	d905      	bls.n	8005e60 <_malloc_r+0x28>
 8005e54:	230c      	movs	r3, #12
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	2600      	movs	r6, #0
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f34 <_malloc_r+0xfc>
 8005e64:	f000 f87a 	bl	8005f5c <__malloc_lock>
 8005e68:	f8d8 3000 	ldr.w	r3, [r8]
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	bb5c      	cbnz	r4, 8005ec8 <_malloc_r+0x90>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4638      	mov	r0, r7
 8005e74:	f7ff ffc0 	bl	8005df8 <sbrk_aligned>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	d155      	bne.n	8005f2a <_malloc_r+0xf2>
 8005e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8005e82:	4626      	mov	r6, r4
 8005e84:	2e00      	cmp	r6, #0
 8005e86:	d145      	bne.n	8005f14 <_malloc_r+0xdc>
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	d048      	beq.n	8005f1e <_malloc_r+0xe6>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4638      	mov	r0, r7
 8005e92:	eb04 0903 	add.w	r9, r4, r3
 8005e96:	f001 f8e7 	bl	8007068 <_sbrk_r>
 8005e9a:	4581      	cmp	r9, r0
 8005e9c:	d13f      	bne.n	8005f1e <_malloc_r+0xe6>
 8005e9e:	6821      	ldr	r1, [r4, #0]
 8005ea0:	1a6d      	subs	r5, r5, r1
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7ff ffa7 	bl	8005df8 <sbrk_aligned>
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d037      	beq.n	8005f1e <_malloc_r+0xe6>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	442b      	add	r3, r5
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d038      	beq.n	8005f2e <_malloc_r+0xf6>
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	42a2      	cmp	r2, r4
 8005ec0:	d12b      	bne.n	8005f1a <_malloc_r+0xe2>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	e00f      	b.n	8005ee8 <_malloc_r+0xb0>
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	1b52      	subs	r2, r2, r5
 8005ecc:	d41f      	bmi.n	8005f0e <_malloc_r+0xd6>
 8005ece:	2a0b      	cmp	r2, #11
 8005ed0:	d917      	bls.n	8005f02 <_malloc_r+0xca>
 8005ed2:	1961      	adds	r1, r4, r5
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	6025      	str	r5, [r4, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	6059      	strne	r1, [r3, #4]
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	bf08      	it	eq
 8005ee0:	f8c8 1000 	streq.w	r1, [r8]
 8005ee4:	5162      	str	r2, [r4, r5]
 8005ee6:	604b      	str	r3, [r1, #4]
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f104 060b 	add.w	r6, r4, #11
 8005eee:	f000 f83b 	bl	8005f68 <__malloc_unlock>
 8005ef2:	f026 0607 	bic.w	r6, r6, #7
 8005ef6:	1d23      	adds	r3, r4, #4
 8005ef8:	1af2      	subs	r2, r6, r3
 8005efa:	d0ae      	beq.n	8005e5a <_malloc_r+0x22>
 8005efc:	1b9b      	subs	r3, r3, r6
 8005efe:	50a3      	str	r3, [r4, r2]
 8005f00:	e7ab      	b.n	8005e5a <_malloc_r+0x22>
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	6862      	ldr	r2, [r4, #4]
 8005f06:	d1dd      	bne.n	8005ec4 <_malloc_r+0x8c>
 8005f08:	f8c8 2000 	str.w	r2, [r8]
 8005f0c:	e7ec      	b.n	8005ee8 <_malloc_r+0xb0>
 8005f0e:	4623      	mov	r3, r4
 8005f10:	6864      	ldr	r4, [r4, #4]
 8005f12:	e7ac      	b.n	8005e6e <_malloc_r+0x36>
 8005f14:	4634      	mov	r4, r6
 8005f16:	6876      	ldr	r6, [r6, #4]
 8005f18:	e7b4      	b.n	8005e84 <_malloc_r+0x4c>
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	e7cc      	b.n	8005eb8 <_malloc_r+0x80>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4638      	mov	r0, r7
 8005f24:	f000 f820 	bl	8005f68 <__malloc_unlock>
 8005f28:	e797      	b.n	8005e5a <_malloc_r+0x22>
 8005f2a:	6025      	str	r5, [r4, #0]
 8005f2c:	e7dc      	b.n	8005ee8 <_malloc_r+0xb0>
 8005f2e:	605b      	str	r3, [r3, #4]
 8005f30:	deff      	udf	#255	; 0xff
 8005f32:	bf00      	nop
 8005f34:	20000420 	.word	0x20000420

08005f38 <__ascii_mbtowc>:
 8005f38:	b082      	sub	sp, #8
 8005f3a:	b901      	cbnz	r1, 8005f3e <__ascii_mbtowc+0x6>
 8005f3c:	a901      	add	r1, sp, #4
 8005f3e:	b142      	cbz	r2, 8005f52 <__ascii_mbtowc+0x1a>
 8005f40:	b14b      	cbz	r3, 8005f56 <__ascii_mbtowc+0x1e>
 8005f42:	7813      	ldrb	r3, [r2, #0]
 8005f44:	600b      	str	r3, [r1, #0]
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	1e10      	subs	r0, r2, #0
 8005f4a:	bf18      	it	ne
 8005f4c:	2001      	movne	r0, #1
 8005f4e:	b002      	add	sp, #8
 8005f50:	4770      	bx	lr
 8005f52:	4610      	mov	r0, r2
 8005f54:	e7fb      	b.n	8005f4e <__ascii_mbtowc+0x16>
 8005f56:	f06f 0001 	mvn.w	r0, #1
 8005f5a:	e7f8      	b.n	8005f4e <__ascii_mbtowc+0x16>

08005f5c <__malloc_lock>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__malloc_lock+0x8>)
 8005f5e:	f7ff bb5a 	b.w	8005616 <__retarget_lock_acquire_recursive>
 8005f62:	bf00      	nop
 8005f64:	2000041c 	.word	0x2000041c

08005f68 <__malloc_unlock>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__malloc_unlock+0x8>)
 8005f6a:	f7ff bb55 	b.w	8005618 <__retarget_lock_release_recursive>
 8005f6e:	bf00      	nop
 8005f70:	2000041c 	.word	0x2000041c

08005f74 <_Balloc>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	69c6      	ldr	r6, [r0, #28]
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	b976      	cbnz	r6, 8005f9c <_Balloc+0x28>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f7ff ff32 	bl	8005de8 <malloc>
 8005f84:	4602      	mov	r2, r0
 8005f86:	61e0      	str	r0, [r4, #28]
 8005f88:	b920      	cbnz	r0, 8005f94 <_Balloc+0x20>
 8005f8a:	4b18      	ldr	r3, [pc, #96]	; (8005fec <_Balloc+0x78>)
 8005f8c:	4818      	ldr	r0, [pc, #96]	; (8005ff0 <_Balloc+0x7c>)
 8005f8e:	216b      	movs	r1, #107	; 0x6b
 8005f90:	f7ff fb68 	bl	8005664 <__assert_func>
 8005f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f98:	6006      	str	r6, [r0, #0]
 8005f9a:	60c6      	str	r6, [r0, #12]
 8005f9c:	69e6      	ldr	r6, [r4, #28]
 8005f9e:	68f3      	ldr	r3, [r6, #12]
 8005fa0:	b183      	cbz	r3, 8005fc4 <_Balloc+0x50>
 8005fa2:	69e3      	ldr	r3, [r4, #28]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005faa:	b9b8      	cbnz	r0, 8005fdc <_Balloc+0x68>
 8005fac:	2101      	movs	r1, #1
 8005fae:	fa01 f605 	lsl.w	r6, r1, r5
 8005fb2:	1d72      	adds	r2, r6, #5
 8005fb4:	0092      	lsls	r2, r2, #2
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f001 f86d 	bl	8007096 <_calloc_r>
 8005fbc:	b160      	cbz	r0, 8005fd8 <_Balloc+0x64>
 8005fbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fc2:	e00e      	b.n	8005fe2 <_Balloc+0x6e>
 8005fc4:	2221      	movs	r2, #33	; 0x21
 8005fc6:	2104      	movs	r1, #4
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f001 f864 	bl	8007096 <_calloc_r>
 8005fce:	69e3      	ldr	r3, [r4, #28]
 8005fd0:	60f0      	str	r0, [r6, #12]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e4      	bne.n	8005fa2 <_Balloc+0x2e>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	6802      	ldr	r2, [r0, #0]
 8005fde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fe8:	e7f7      	b.n	8005fda <_Balloc+0x66>
 8005fea:	bf00      	nop
 8005fec:	08007930 	.word	0x08007930
 8005ff0:	08007a56 	.word	0x08007a56

08005ff4 <_Bfree>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	69c6      	ldr	r6, [r0, #28]
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	b976      	cbnz	r6, 800601c <_Bfree+0x28>
 8005ffe:	2010      	movs	r0, #16
 8006000:	f7ff fef2 	bl	8005de8 <malloc>
 8006004:	4602      	mov	r2, r0
 8006006:	61e8      	str	r0, [r5, #28]
 8006008:	b920      	cbnz	r0, 8006014 <_Bfree+0x20>
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <_Bfree+0x3c>)
 800600c:	4809      	ldr	r0, [pc, #36]	; (8006034 <_Bfree+0x40>)
 800600e:	218f      	movs	r1, #143	; 0x8f
 8006010:	f7ff fb28 	bl	8005664 <__assert_func>
 8006014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006018:	6006      	str	r6, [r0, #0]
 800601a:	60c6      	str	r6, [r0, #12]
 800601c:	b13c      	cbz	r4, 800602e <_Bfree+0x3a>
 800601e:	69eb      	ldr	r3, [r5, #28]
 8006020:	6862      	ldr	r2, [r4, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006028:	6021      	str	r1, [r4, #0]
 800602a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	08007930 	.word	0x08007930
 8006034:	08007a56 	.word	0x08007a56

08006038 <__multadd>:
 8006038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	690d      	ldr	r5, [r1, #16]
 800603e:	4607      	mov	r7, r0
 8006040:	460c      	mov	r4, r1
 8006042:	461e      	mov	r6, r3
 8006044:	f101 0c14 	add.w	ip, r1, #20
 8006048:	2000      	movs	r0, #0
 800604a:	f8dc 3000 	ldr.w	r3, [ip]
 800604e:	b299      	uxth	r1, r3
 8006050:	fb02 6101 	mla	r1, r2, r1, r6
 8006054:	0c1e      	lsrs	r6, r3, #16
 8006056:	0c0b      	lsrs	r3, r1, #16
 8006058:	fb02 3306 	mla	r3, r2, r6, r3
 800605c:	b289      	uxth	r1, r1
 800605e:	3001      	adds	r0, #1
 8006060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006064:	4285      	cmp	r5, r0
 8006066:	f84c 1b04 	str.w	r1, [ip], #4
 800606a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800606e:	dcec      	bgt.n	800604a <__multadd+0x12>
 8006070:	b30e      	cbz	r6, 80060b6 <__multadd+0x7e>
 8006072:	68a3      	ldr	r3, [r4, #8]
 8006074:	42ab      	cmp	r3, r5
 8006076:	dc19      	bgt.n	80060ac <__multadd+0x74>
 8006078:	6861      	ldr	r1, [r4, #4]
 800607a:	4638      	mov	r0, r7
 800607c:	3101      	adds	r1, #1
 800607e:	f7ff ff79 	bl	8005f74 <_Balloc>
 8006082:	4680      	mov	r8, r0
 8006084:	b928      	cbnz	r0, 8006092 <__multadd+0x5a>
 8006086:	4602      	mov	r2, r0
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <__multadd+0x84>)
 800608a:	480d      	ldr	r0, [pc, #52]	; (80060c0 <__multadd+0x88>)
 800608c:	21ba      	movs	r1, #186	; 0xba
 800608e:	f7ff fae9 	bl	8005664 <__assert_func>
 8006092:	6922      	ldr	r2, [r4, #16]
 8006094:	3202      	adds	r2, #2
 8006096:	f104 010c 	add.w	r1, r4, #12
 800609a:	0092      	lsls	r2, r2, #2
 800609c:	300c      	adds	r0, #12
 800609e:	f7ff fac4 	bl	800562a <memcpy>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4638      	mov	r0, r7
 80060a6:	f7ff ffa5 	bl	8005ff4 <_Bfree>
 80060aa:	4644      	mov	r4, r8
 80060ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060b0:	3501      	adds	r5, #1
 80060b2:	615e      	str	r6, [r3, #20]
 80060b4:	6125      	str	r5, [r4, #16]
 80060b6:	4620      	mov	r0, r4
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	080079e5 	.word	0x080079e5
 80060c0:	08007a56 	.word	0x08007a56

080060c4 <__s2b>:
 80060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	4615      	mov	r5, r2
 80060cc:	461f      	mov	r7, r3
 80060ce:	2209      	movs	r2, #9
 80060d0:	3308      	adds	r3, #8
 80060d2:	4606      	mov	r6, r0
 80060d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80060d8:	2100      	movs	r1, #0
 80060da:	2201      	movs	r2, #1
 80060dc:	429a      	cmp	r2, r3
 80060de:	db09      	blt.n	80060f4 <__s2b+0x30>
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff ff47 	bl	8005f74 <_Balloc>
 80060e6:	b940      	cbnz	r0, 80060fa <__s2b+0x36>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <__s2b+0x8c>)
 80060ec:	4819      	ldr	r0, [pc, #100]	; (8006154 <__s2b+0x90>)
 80060ee:	21d3      	movs	r1, #211	; 0xd3
 80060f0:	f7ff fab8 	bl	8005664 <__assert_func>
 80060f4:	0052      	lsls	r2, r2, #1
 80060f6:	3101      	adds	r1, #1
 80060f8:	e7f0      	b.n	80060dc <__s2b+0x18>
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	6143      	str	r3, [r0, #20]
 80060fe:	2d09      	cmp	r5, #9
 8006100:	f04f 0301 	mov.w	r3, #1
 8006104:	6103      	str	r3, [r0, #16]
 8006106:	dd16      	ble.n	8006136 <__s2b+0x72>
 8006108:	f104 0909 	add.w	r9, r4, #9
 800610c:	46c8      	mov	r8, r9
 800610e:	442c      	add	r4, r5
 8006110:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006114:	4601      	mov	r1, r0
 8006116:	3b30      	subs	r3, #48	; 0x30
 8006118:	220a      	movs	r2, #10
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ff8c 	bl	8006038 <__multadd>
 8006120:	45a0      	cmp	r8, r4
 8006122:	d1f5      	bne.n	8006110 <__s2b+0x4c>
 8006124:	f1a5 0408 	sub.w	r4, r5, #8
 8006128:	444c      	add	r4, r9
 800612a:	1b2d      	subs	r5, r5, r4
 800612c:	1963      	adds	r3, r4, r5
 800612e:	42bb      	cmp	r3, r7
 8006130:	db04      	blt.n	800613c <__s2b+0x78>
 8006132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006136:	340a      	adds	r4, #10
 8006138:	2509      	movs	r5, #9
 800613a:	e7f6      	b.n	800612a <__s2b+0x66>
 800613c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006140:	4601      	mov	r1, r0
 8006142:	3b30      	subs	r3, #48	; 0x30
 8006144:	220a      	movs	r2, #10
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff ff76 	bl	8006038 <__multadd>
 800614c:	e7ee      	b.n	800612c <__s2b+0x68>
 800614e:	bf00      	nop
 8006150:	080079e5 	.word	0x080079e5
 8006154:	08007a56 	.word	0x08007a56

08006158 <__hi0bits>:
 8006158:	0c03      	lsrs	r3, r0, #16
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	b9d3      	cbnz	r3, 8006194 <__hi0bits+0x3c>
 800615e:	0400      	lsls	r0, r0, #16
 8006160:	2310      	movs	r3, #16
 8006162:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006166:	bf04      	itt	eq
 8006168:	0200      	lsleq	r0, r0, #8
 800616a:	3308      	addeq	r3, #8
 800616c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006170:	bf04      	itt	eq
 8006172:	0100      	lsleq	r0, r0, #4
 8006174:	3304      	addeq	r3, #4
 8006176:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800617a:	bf04      	itt	eq
 800617c:	0080      	lsleq	r0, r0, #2
 800617e:	3302      	addeq	r3, #2
 8006180:	2800      	cmp	r0, #0
 8006182:	db05      	blt.n	8006190 <__hi0bits+0x38>
 8006184:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006188:	f103 0301 	add.w	r3, r3, #1
 800618c:	bf08      	it	eq
 800618e:	2320      	moveq	r3, #32
 8006190:	4618      	mov	r0, r3
 8006192:	4770      	bx	lr
 8006194:	2300      	movs	r3, #0
 8006196:	e7e4      	b.n	8006162 <__hi0bits+0xa>

08006198 <__lo0bits>:
 8006198:	6803      	ldr	r3, [r0, #0]
 800619a:	f013 0207 	ands.w	r2, r3, #7
 800619e:	d00c      	beq.n	80061ba <__lo0bits+0x22>
 80061a0:	07d9      	lsls	r1, r3, #31
 80061a2:	d422      	bmi.n	80061ea <__lo0bits+0x52>
 80061a4:	079a      	lsls	r2, r3, #30
 80061a6:	bf49      	itett	mi
 80061a8:	085b      	lsrmi	r3, r3, #1
 80061aa:	089b      	lsrpl	r3, r3, #2
 80061ac:	6003      	strmi	r3, [r0, #0]
 80061ae:	2201      	movmi	r2, #1
 80061b0:	bf5c      	itt	pl
 80061b2:	6003      	strpl	r3, [r0, #0]
 80061b4:	2202      	movpl	r2, #2
 80061b6:	4610      	mov	r0, r2
 80061b8:	4770      	bx	lr
 80061ba:	b299      	uxth	r1, r3
 80061bc:	b909      	cbnz	r1, 80061c2 <__lo0bits+0x2a>
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	2210      	movs	r2, #16
 80061c2:	b2d9      	uxtb	r1, r3
 80061c4:	b909      	cbnz	r1, 80061ca <__lo0bits+0x32>
 80061c6:	3208      	adds	r2, #8
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	0719      	lsls	r1, r3, #28
 80061cc:	bf04      	itt	eq
 80061ce:	091b      	lsreq	r3, r3, #4
 80061d0:	3204      	addeq	r2, #4
 80061d2:	0799      	lsls	r1, r3, #30
 80061d4:	bf04      	itt	eq
 80061d6:	089b      	lsreq	r3, r3, #2
 80061d8:	3202      	addeq	r2, #2
 80061da:	07d9      	lsls	r1, r3, #31
 80061dc:	d403      	bmi.n	80061e6 <__lo0bits+0x4e>
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f102 0201 	add.w	r2, r2, #1
 80061e4:	d003      	beq.n	80061ee <__lo0bits+0x56>
 80061e6:	6003      	str	r3, [r0, #0]
 80061e8:	e7e5      	b.n	80061b6 <__lo0bits+0x1e>
 80061ea:	2200      	movs	r2, #0
 80061ec:	e7e3      	b.n	80061b6 <__lo0bits+0x1e>
 80061ee:	2220      	movs	r2, #32
 80061f0:	e7e1      	b.n	80061b6 <__lo0bits+0x1e>
	...

080061f4 <__i2b>:
 80061f4:	b510      	push	{r4, lr}
 80061f6:	460c      	mov	r4, r1
 80061f8:	2101      	movs	r1, #1
 80061fa:	f7ff febb 	bl	8005f74 <_Balloc>
 80061fe:	4602      	mov	r2, r0
 8006200:	b928      	cbnz	r0, 800620e <__i2b+0x1a>
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <__i2b+0x24>)
 8006204:	4805      	ldr	r0, [pc, #20]	; (800621c <__i2b+0x28>)
 8006206:	f240 1145 	movw	r1, #325	; 0x145
 800620a:	f7ff fa2b 	bl	8005664 <__assert_func>
 800620e:	2301      	movs	r3, #1
 8006210:	6144      	str	r4, [r0, #20]
 8006212:	6103      	str	r3, [r0, #16]
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop
 8006218:	080079e5 	.word	0x080079e5
 800621c:	08007a56 	.word	0x08007a56

08006220 <__multiply>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	4691      	mov	r9, r2
 8006226:	690a      	ldr	r2, [r1, #16]
 8006228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800622c:	429a      	cmp	r2, r3
 800622e:	bfb8      	it	lt
 8006230:	460b      	movlt	r3, r1
 8006232:	460c      	mov	r4, r1
 8006234:	bfbc      	itt	lt
 8006236:	464c      	movlt	r4, r9
 8006238:	4699      	movlt	r9, r3
 800623a:	6927      	ldr	r7, [r4, #16]
 800623c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006240:	68a3      	ldr	r3, [r4, #8]
 8006242:	6861      	ldr	r1, [r4, #4]
 8006244:	eb07 060a 	add.w	r6, r7, sl
 8006248:	42b3      	cmp	r3, r6
 800624a:	b085      	sub	sp, #20
 800624c:	bfb8      	it	lt
 800624e:	3101      	addlt	r1, #1
 8006250:	f7ff fe90 	bl	8005f74 <_Balloc>
 8006254:	b930      	cbnz	r0, 8006264 <__multiply+0x44>
 8006256:	4602      	mov	r2, r0
 8006258:	4b44      	ldr	r3, [pc, #272]	; (800636c <__multiply+0x14c>)
 800625a:	4845      	ldr	r0, [pc, #276]	; (8006370 <__multiply+0x150>)
 800625c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006260:	f7ff fa00 	bl	8005664 <__assert_func>
 8006264:	f100 0514 	add.w	r5, r0, #20
 8006268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800626c:	462b      	mov	r3, r5
 800626e:	2200      	movs	r2, #0
 8006270:	4543      	cmp	r3, r8
 8006272:	d321      	bcc.n	80062b8 <__multiply+0x98>
 8006274:	f104 0314 	add.w	r3, r4, #20
 8006278:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800627c:	f109 0314 	add.w	r3, r9, #20
 8006280:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006284:	9202      	str	r2, [sp, #8]
 8006286:	1b3a      	subs	r2, r7, r4
 8006288:	3a15      	subs	r2, #21
 800628a:	f022 0203 	bic.w	r2, r2, #3
 800628e:	3204      	adds	r2, #4
 8006290:	f104 0115 	add.w	r1, r4, #21
 8006294:	428f      	cmp	r7, r1
 8006296:	bf38      	it	cc
 8006298:	2204      	movcc	r2, #4
 800629a:	9201      	str	r2, [sp, #4]
 800629c:	9a02      	ldr	r2, [sp, #8]
 800629e:	9303      	str	r3, [sp, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d80c      	bhi.n	80062be <__multiply+0x9e>
 80062a4:	2e00      	cmp	r6, #0
 80062a6:	dd03      	ble.n	80062b0 <__multiply+0x90>
 80062a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d05b      	beq.n	8006368 <__multiply+0x148>
 80062b0:	6106      	str	r6, [r0, #16]
 80062b2:	b005      	add	sp, #20
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	f843 2b04 	str.w	r2, [r3], #4
 80062bc:	e7d8      	b.n	8006270 <__multiply+0x50>
 80062be:	f8b3 a000 	ldrh.w	sl, [r3]
 80062c2:	f1ba 0f00 	cmp.w	sl, #0
 80062c6:	d024      	beq.n	8006312 <__multiply+0xf2>
 80062c8:	f104 0e14 	add.w	lr, r4, #20
 80062cc:	46a9      	mov	r9, r5
 80062ce:	f04f 0c00 	mov.w	ip, #0
 80062d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062d6:	f8d9 1000 	ldr.w	r1, [r9]
 80062da:	fa1f fb82 	uxth.w	fp, r2
 80062de:	b289      	uxth	r1, r1
 80062e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80062e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80062e8:	f8d9 2000 	ldr.w	r2, [r9]
 80062ec:	4461      	add	r1, ip
 80062ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80062f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062fa:	b289      	uxth	r1, r1
 80062fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006300:	4577      	cmp	r7, lr
 8006302:	f849 1b04 	str.w	r1, [r9], #4
 8006306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800630a:	d8e2      	bhi.n	80062d2 <__multiply+0xb2>
 800630c:	9a01      	ldr	r2, [sp, #4]
 800630e:	f845 c002 	str.w	ip, [r5, r2]
 8006312:	9a03      	ldr	r2, [sp, #12]
 8006314:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006318:	3304      	adds	r3, #4
 800631a:	f1b9 0f00 	cmp.w	r9, #0
 800631e:	d021      	beq.n	8006364 <__multiply+0x144>
 8006320:	6829      	ldr	r1, [r5, #0]
 8006322:	f104 0c14 	add.w	ip, r4, #20
 8006326:	46ae      	mov	lr, r5
 8006328:	f04f 0a00 	mov.w	sl, #0
 800632c:	f8bc b000 	ldrh.w	fp, [ip]
 8006330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006334:	fb09 220b 	mla	r2, r9, fp, r2
 8006338:	4452      	add	r2, sl
 800633a:	b289      	uxth	r1, r1
 800633c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006340:	f84e 1b04 	str.w	r1, [lr], #4
 8006344:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800634c:	f8be 1000 	ldrh.w	r1, [lr]
 8006350:	fb09 110a 	mla	r1, r9, sl, r1
 8006354:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006358:	4567      	cmp	r7, ip
 800635a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800635e:	d8e5      	bhi.n	800632c <__multiply+0x10c>
 8006360:	9a01      	ldr	r2, [sp, #4]
 8006362:	50a9      	str	r1, [r5, r2]
 8006364:	3504      	adds	r5, #4
 8006366:	e799      	b.n	800629c <__multiply+0x7c>
 8006368:	3e01      	subs	r6, #1
 800636a:	e79b      	b.n	80062a4 <__multiply+0x84>
 800636c:	080079e5 	.word	0x080079e5
 8006370:	08007a56 	.word	0x08007a56

08006374 <__pow5mult>:
 8006374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006378:	4615      	mov	r5, r2
 800637a:	f012 0203 	ands.w	r2, r2, #3
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	d007      	beq.n	8006394 <__pow5mult+0x20>
 8006384:	4c25      	ldr	r4, [pc, #148]	; (800641c <__pow5mult+0xa8>)
 8006386:	3a01      	subs	r2, #1
 8006388:	2300      	movs	r3, #0
 800638a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800638e:	f7ff fe53 	bl	8006038 <__multadd>
 8006392:	4607      	mov	r7, r0
 8006394:	10ad      	asrs	r5, r5, #2
 8006396:	d03d      	beq.n	8006414 <__pow5mult+0xa0>
 8006398:	69f4      	ldr	r4, [r6, #28]
 800639a:	b97c      	cbnz	r4, 80063bc <__pow5mult+0x48>
 800639c:	2010      	movs	r0, #16
 800639e:	f7ff fd23 	bl	8005de8 <malloc>
 80063a2:	4602      	mov	r2, r0
 80063a4:	61f0      	str	r0, [r6, #28]
 80063a6:	b928      	cbnz	r0, 80063b4 <__pow5mult+0x40>
 80063a8:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <__pow5mult+0xac>)
 80063aa:	481e      	ldr	r0, [pc, #120]	; (8006424 <__pow5mult+0xb0>)
 80063ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80063b0:	f7ff f958 	bl	8005664 <__assert_func>
 80063b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063b8:	6004      	str	r4, [r0, #0]
 80063ba:	60c4      	str	r4, [r0, #12]
 80063bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80063c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063c4:	b94c      	cbnz	r4, 80063da <__pow5mult+0x66>
 80063c6:	f240 2171 	movw	r1, #625	; 0x271
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff12 	bl	80061f4 <__i2b>
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80063d6:	4604      	mov	r4, r0
 80063d8:	6003      	str	r3, [r0, #0]
 80063da:	f04f 0900 	mov.w	r9, #0
 80063de:	07eb      	lsls	r3, r5, #31
 80063e0:	d50a      	bpl.n	80063f8 <__pow5mult+0x84>
 80063e2:	4639      	mov	r1, r7
 80063e4:	4622      	mov	r2, r4
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7ff ff1a 	bl	8006220 <__multiply>
 80063ec:	4639      	mov	r1, r7
 80063ee:	4680      	mov	r8, r0
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7ff fdff 	bl	8005ff4 <_Bfree>
 80063f6:	4647      	mov	r7, r8
 80063f8:	106d      	asrs	r5, r5, #1
 80063fa:	d00b      	beq.n	8006414 <__pow5mult+0xa0>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	b938      	cbnz	r0, 8006410 <__pow5mult+0x9c>
 8006400:	4622      	mov	r2, r4
 8006402:	4621      	mov	r1, r4
 8006404:	4630      	mov	r0, r6
 8006406:	f7ff ff0b 	bl	8006220 <__multiply>
 800640a:	6020      	str	r0, [r4, #0]
 800640c:	f8c0 9000 	str.w	r9, [r0]
 8006410:	4604      	mov	r4, r0
 8006412:	e7e4      	b.n	80063de <__pow5mult+0x6a>
 8006414:	4638      	mov	r0, r7
 8006416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641a:	bf00      	nop
 800641c:	08007ba0 	.word	0x08007ba0
 8006420:	08007930 	.word	0x08007930
 8006424:	08007a56 	.word	0x08007a56

08006428 <__lshift>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	6849      	ldr	r1, [r1, #4]
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006436:	68a3      	ldr	r3, [r4, #8]
 8006438:	4607      	mov	r7, r0
 800643a:	4691      	mov	r9, r2
 800643c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006440:	f108 0601 	add.w	r6, r8, #1
 8006444:	42b3      	cmp	r3, r6
 8006446:	db0b      	blt.n	8006460 <__lshift+0x38>
 8006448:	4638      	mov	r0, r7
 800644a:	f7ff fd93 	bl	8005f74 <_Balloc>
 800644e:	4605      	mov	r5, r0
 8006450:	b948      	cbnz	r0, 8006466 <__lshift+0x3e>
 8006452:	4602      	mov	r2, r0
 8006454:	4b28      	ldr	r3, [pc, #160]	; (80064f8 <__lshift+0xd0>)
 8006456:	4829      	ldr	r0, [pc, #164]	; (80064fc <__lshift+0xd4>)
 8006458:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800645c:	f7ff f902 	bl	8005664 <__assert_func>
 8006460:	3101      	adds	r1, #1
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	e7ee      	b.n	8006444 <__lshift+0x1c>
 8006466:	2300      	movs	r3, #0
 8006468:	f100 0114 	add.w	r1, r0, #20
 800646c:	f100 0210 	add.w	r2, r0, #16
 8006470:	4618      	mov	r0, r3
 8006472:	4553      	cmp	r3, sl
 8006474:	db33      	blt.n	80064de <__lshift+0xb6>
 8006476:	6920      	ldr	r0, [r4, #16]
 8006478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800647c:	f104 0314 	add.w	r3, r4, #20
 8006480:	f019 091f 	ands.w	r9, r9, #31
 8006484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800648c:	d02b      	beq.n	80064e6 <__lshift+0xbe>
 800648e:	f1c9 0e20 	rsb	lr, r9, #32
 8006492:	468a      	mov	sl, r1
 8006494:	2200      	movs	r2, #0
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	fa00 f009 	lsl.w	r0, r0, r9
 800649c:	4310      	orrs	r0, r2
 800649e:	f84a 0b04 	str.w	r0, [sl], #4
 80064a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a6:	459c      	cmp	ip, r3
 80064a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80064ac:	d8f3      	bhi.n	8006496 <__lshift+0x6e>
 80064ae:	ebac 0304 	sub.w	r3, ip, r4
 80064b2:	3b15      	subs	r3, #21
 80064b4:	f023 0303 	bic.w	r3, r3, #3
 80064b8:	3304      	adds	r3, #4
 80064ba:	f104 0015 	add.w	r0, r4, #21
 80064be:	4584      	cmp	ip, r0
 80064c0:	bf38      	it	cc
 80064c2:	2304      	movcc	r3, #4
 80064c4:	50ca      	str	r2, [r1, r3]
 80064c6:	b10a      	cbz	r2, 80064cc <__lshift+0xa4>
 80064c8:	f108 0602 	add.w	r6, r8, #2
 80064cc:	3e01      	subs	r6, #1
 80064ce:	4638      	mov	r0, r7
 80064d0:	612e      	str	r6, [r5, #16]
 80064d2:	4621      	mov	r1, r4
 80064d4:	f7ff fd8e 	bl	8005ff4 <_Bfree>
 80064d8:	4628      	mov	r0, r5
 80064da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064de:	f842 0f04 	str.w	r0, [r2, #4]!
 80064e2:	3301      	adds	r3, #1
 80064e4:	e7c5      	b.n	8006472 <__lshift+0x4a>
 80064e6:	3904      	subs	r1, #4
 80064e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80064f0:	459c      	cmp	ip, r3
 80064f2:	d8f9      	bhi.n	80064e8 <__lshift+0xc0>
 80064f4:	e7ea      	b.n	80064cc <__lshift+0xa4>
 80064f6:	bf00      	nop
 80064f8:	080079e5 	.word	0x080079e5
 80064fc:	08007a56 	.word	0x08007a56

08006500 <__mcmp>:
 8006500:	b530      	push	{r4, r5, lr}
 8006502:	6902      	ldr	r2, [r0, #16]
 8006504:	690c      	ldr	r4, [r1, #16]
 8006506:	1b12      	subs	r2, r2, r4
 8006508:	d10e      	bne.n	8006528 <__mcmp+0x28>
 800650a:	f100 0314 	add.w	r3, r0, #20
 800650e:	3114      	adds	r1, #20
 8006510:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006514:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006518:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800651c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006520:	42a5      	cmp	r5, r4
 8006522:	d003      	beq.n	800652c <__mcmp+0x2c>
 8006524:	d305      	bcc.n	8006532 <__mcmp+0x32>
 8006526:	2201      	movs	r2, #1
 8006528:	4610      	mov	r0, r2
 800652a:	bd30      	pop	{r4, r5, pc}
 800652c:	4283      	cmp	r3, r0
 800652e:	d3f3      	bcc.n	8006518 <__mcmp+0x18>
 8006530:	e7fa      	b.n	8006528 <__mcmp+0x28>
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	e7f7      	b.n	8006528 <__mcmp+0x28>

08006538 <__mdiff>:
 8006538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	4606      	mov	r6, r0
 8006540:	4611      	mov	r1, r2
 8006542:	4620      	mov	r0, r4
 8006544:	4690      	mov	r8, r2
 8006546:	f7ff ffdb 	bl	8006500 <__mcmp>
 800654a:	1e05      	subs	r5, r0, #0
 800654c:	d110      	bne.n	8006570 <__mdiff+0x38>
 800654e:	4629      	mov	r1, r5
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff fd0f 	bl	8005f74 <_Balloc>
 8006556:	b930      	cbnz	r0, 8006566 <__mdiff+0x2e>
 8006558:	4b3a      	ldr	r3, [pc, #232]	; (8006644 <__mdiff+0x10c>)
 800655a:	4602      	mov	r2, r0
 800655c:	f240 2137 	movw	r1, #567	; 0x237
 8006560:	4839      	ldr	r0, [pc, #228]	; (8006648 <__mdiff+0x110>)
 8006562:	f7ff f87f 	bl	8005664 <__assert_func>
 8006566:	2301      	movs	r3, #1
 8006568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800656c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006570:	bfa4      	itt	ge
 8006572:	4643      	movge	r3, r8
 8006574:	46a0      	movge	r8, r4
 8006576:	4630      	mov	r0, r6
 8006578:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800657c:	bfa6      	itte	ge
 800657e:	461c      	movge	r4, r3
 8006580:	2500      	movge	r5, #0
 8006582:	2501      	movlt	r5, #1
 8006584:	f7ff fcf6 	bl	8005f74 <_Balloc>
 8006588:	b920      	cbnz	r0, 8006594 <__mdiff+0x5c>
 800658a:	4b2e      	ldr	r3, [pc, #184]	; (8006644 <__mdiff+0x10c>)
 800658c:	4602      	mov	r2, r0
 800658e:	f240 2145 	movw	r1, #581	; 0x245
 8006592:	e7e5      	b.n	8006560 <__mdiff+0x28>
 8006594:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006598:	6926      	ldr	r6, [r4, #16]
 800659a:	60c5      	str	r5, [r0, #12]
 800659c:	f104 0914 	add.w	r9, r4, #20
 80065a0:	f108 0514 	add.w	r5, r8, #20
 80065a4:	f100 0e14 	add.w	lr, r0, #20
 80065a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80065ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065b0:	f108 0210 	add.w	r2, r8, #16
 80065b4:	46f2      	mov	sl, lr
 80065b6:	2100      	movs	r1, #0
 80065b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80065bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80065c0:	fa11 f88b 	uxtah	r8, r1, fp
 80065c4:	b299      	uxth	r1, r3
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	eba8 0801 	sub.w	r8, r8, r1
 80065cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80065d4:	fa1f f888 	uxth.w	r8, r8
 80065d8:	1419      	asrs	r1, r3, #16
 80065da:	454e      	cmp	r6, r9
 80065dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80065e0:	f84a 3b04 	str.w	r3, [sl], #4
 80065e4:	d8e8      	bhi.n	80065b8 <__mdiff+0x80>
 80065e6:	1b33      	subs	r3, r6, r4
 80065e8:	3b15      	subs	r3, #21
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	3304      	adds	r3, #4
 80065f0:	3415      	adds	r4, #21
 80065f2:	42a6      	cmp	r6, r4
 80065f4:	bf38      	it	cc
 80065f6:	2304      	movcc	r3, #4
 80065f8:	441d      	add	r5, r3
 80065fa:	4473      	add	r3, lr
 80065fc:	469e      	mov	lr, r3
 80065fe:	462e      	mov	r6, r5
 8006600:	4566      	cmp	r6, ip
 8006602:	d30e      	bcc.n	8006622 <__mdiff+0xea>
 8006604:	f10c 0203 	add.w	r2, ip, #3
 8006608:	1b52      	subs	r2, r2, r5
 800660a:	f022 0203 	bic.w	r2, r2, #3
 800660e:	3d03      	subs	r5, #3
 8006610:	45ac      	cmp	ip, r5
 8006612:	bf38      	it	cc
 8006614:	2200      	movcc	r2, #0
 8006616:	4413      	add	r3, r2
 8006618:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800661c:	b17a      	cbz	r2, 800663e <__mdiff+0x106>
 800661e:	6107      	str	r7, [r0, #16]
 8006620:	e7a4      	b.n	800656c <__mdiff+0x34>
 8006622:	f856 8b04 	ldr.w	r8, [r6], #4
 8006626:	fa11 f288 	uxtah	r2, r1, r8
 800662a:	1414      	asrs	r4, r2, #16
 800662c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006630:	b292      	uxth	r2, r2
 8006632:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006636:	f84e 2b04 	str.w	r2, [lr], #4
 800663a:	1421      	asrs	r1, r4, #16
 800663c:	e7e0      	b.n	8006600 <__mdiff+0xc8>
 800663e:	3f01      	subs	r7, #1
 8006640:	e7ea      	b.n	8006618 <__mdiff+0xe0>
 8006642:	bf00      	nop
 8006644:	080079e5 	.word	0x080079e5
 8006648:	08007a56 	.word	0x08007a56

0800664c <__ulp>:
 800664c:	b082      	sub	sp, #8
 800664e:	ed8d 0b00 	vstr	d0, [sp]
 8006652:	9a01      	ldr	r2, [sp, #4]
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <__ulp+0x48>)
 8006656:	4013      	ands	r3, r2
 8006658:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800665c:	2b00      	cmp	r3, #0
 800665e:	dc08      	bgt.n	8006672 <__ulp+0x26>
 8006660:	425b      	negs	r3, r3
 8006662:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006666:	ea4f 5223 	mov.w	r2, r3, asr #20
 800666a:	da04      	bge.n	8006676 <__ulp+0x2a>
 800666c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006670:	4113      	asrs	r3, r2
 8006672:	2200      	movs	r2, #0
 8006674:	e008      	b.n	8006688 <__ulp+0x3c>
 8006676:	f1a2 0314 	sub.w	r3, r2, #20
 800667a:	2b1e      	cmp	r3, #30
 800667c:	bfda      	itte	le
 800667e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006682:	40da      	lsrle	r2, r3
 8006684:	2201      	movgt	r2, #1
 8006686:	2300      	movs	r3, #0
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	ec41 0b10 	vmov	d0, r0, r1
 8006690:	b002      	add	sp, #8
 8006692:	4770      	bx	lr
 8006694:	7ff00000 	.word	0x7ff00000

08006698 <__b2d>:
 8006698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669c:	6906      	ldr	r6, [r0, #16]
 800669e:	f100 0814 	add.w	r8, r0, #20
 80066a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80066a6:	1f37      	subs	r7, r6, #4
 80066a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7ff fd53 	bl	8006158 <__hi0bits>
 80066b2:	f1c0 0320 	rsb	r3, r0, #32
 80066b6:	280a      	cmp	r0, #10
 80066b8:	600b      	str	r3, [r1, #0]
 80066ba:	491b      	ldr	r1, [pc, #108]	; (8006728 <__b2d+0x90>)
 80066bc:	dc15      	bgt.n	80066ea <__b2d+0x52>
 80066be:	f1c0 0c0b 	rsb	ip, r0, #11
 80066c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80066c6:	45b8      	cmp	r8, r7
 80066c8:	ea43 0501 	orr.w	r5, r3, r1
 80066cc:	bf34      	ite	cc
 80066ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80066d2:	2300      	movcs	r3, #0
 80066d4:	3015      	adds	r0, #21
 80066d6:	fa02 f000 	lsl.w	r0, r2, r0
 80066da:	fa23 f30c 	lsr.w	r3, r3, ip
 80066de:	4303      	orrs	r3, r0
 80066e0:	461c      	mov	r4, r3
 80066e2:	ec45 4b10 	vmov	d0, r4, r5
 80066e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ea:	45b8      	cmp	r8, r7
 80066ec:	bf3a      	itte	cc
 80066ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80066f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80066f6:	2300      	movcs	r3, #0
 80066f8:	380b      	subs	r0, #11
 80066fa:	d012      	beq.n	8006722 <__b2d+0x8a>
 80066fc:	f1c0 0120 	rsb	r1, r0, #32
 8006700:	fa23 f401 	lsr.w	r4, r3, r1
 8006704:	4082      	lsls	r2, r0
 8006706:	4322      	orrs	r2, r4
 8006708:	4547      	cmp	r7, r8
 800670a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800670e:	bf8c      	ite	hi
 8006710:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006714:	2200      	movls	r2, #0
 8006716:	4083      	lsls	r3, r0
 8006718:	40ca      	lsrs	r2, r1
 800671a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800671e:	4313      	orrs	r3, r2
 8006720:	e7de      	b.n	80066e0 <__b2d+0x48>
 8006722:	ea42 0501 	orr.w	r5, r2, r1
 8006726:	e7db      	b.n	80066e0 <__b2d+0x48>
 8006728:	3ff00000 	.word	0x3ff00000

0800672c <__d2b>:
 800672c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006730:	460f      	mov	r7, r1
 8006732:	2101      	movs	r1, #1
 8006734:	ec59 8b10 	vmov	r8, r9, d0
 8006738:	4616      	mov	r6, r2
 800673a:	f7ff fc1b 	bl	8005f74 <_Balloc>
 800673e:	4604      	mov	r4, r0
 8006740:	b930      	cbnz	r0, 8006750 <__d2b+0x24>
 8006742:	4602      	mov	r2, r0
 8006744:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <__d2b+0xac>)
 8006746:	4825      	ldr	r0, [pc, #148]	; (80067dc <__d2b+0xb0>)
 8006748:	f240 310f 	movw	r1, #783	; 0x30f
 800674c:	f7fe ff8a 	bl	8005664 <__assert_func>
 8006750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006758:	bb2d      	cbnz	r5, 80067a6 <__d2b+0x7a>
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	f1b8 0300 	subs.w	r3, r8, #0
 8006760:	d026      	beq.n	80067b0 <__d2b+0x84>
 8006762:	4668      	mov	r0, sp
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	f7ff fd17 	bl	8006198 <__lo0bits>
 800676a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800676e:	b1e8      	cbz	r0, 80067ac <__d2b+0x80>
 8006770:	f1c0 0320 	rsb	r3, r0, #32
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	430b      	orrs	r3, r1
 800677a:	40c2      	lsrs	r2, r0
 800677c:	6163      	str	r3, [r4, #20]
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	61a3      	str	r3, [r4, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2202      	movne	r2, #2
 800678a:	2201      	moveq	r2, #1
 800678c:	6122      	str	r2, [r4, #16]
 800678e:	b1bd      	cbz	r5, 80067c0 <__d2b+0x94>
 8006790:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006794:	4405      	add	r5, r0
 8006796:	603d      	str	r5, [r7, #0]
 8006798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800679c:	6030      	str	r0, [r6, #0]
 800679e:	4620      	mov	r0, r4
 80067a0:	b003      	add	sp, #12
 80067a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067aa:	e7d6      	b.n	800675a <__d2b+0x2e>
 80067ac:	6161      	str	r1, [r4, #20]
 80067ae:	e7e7      	b.n	8006780 <__d2b+0x54>
 80067b0:	a801      	add	r0, sp, #4
 80067b2:	f7ff fcf1 	bl	8006198 <__lo0bits>
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	6163      	str	r3, [r4, #20]
 80067ba:	3020      	adds	r0, #32
 80067bc:	2201      	movs	r2, #1
 80067be:	e7e5      	b.n	800678c <__d2b+0x60>
 80067c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067c8:	6038      	str	r0, [r7, #0]
 80067ca:	6918      	ldr	r0, [r3, #16]
 80067cc:	f7ff fcc4 	bl	8006158 <__hi0bits>
 80067d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067d4:	e7e2      	b.n	800679c <__d2b+0x70>
 80067d6:	bf00      	nop
 80067d8:	080079e5 	.word	0x080079e5
 80067dc:	08007a56 	.word	0x08007a56

080067e0 <__ratio>:
 80067e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4688      	mov	r8, r1
 80067e6:	4669      	mov	r1, sp
 80067e8:	4681      	mov	r9, r0
 80067ea:	f7ff ff55 	bl	8006698 <__b2d>
 80067ee:	a901      	add	r1, sp, #4
 80067f0:	4640      	mov	r0, r8
 80067f2:	ec55 4b10 	vmov	r4, r5, d0
 80067f6:	ee10 aa10 	vmov	sl, s0
 80067fa:	f7ff ff4d 	bl	8006698 <__b2d>
 80067fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006802:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	e9dd 3100 	ldrd	r3, r1, [sp]
 800680c:	1a5b      	subs	r3, r3, r1
 800680e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006812:	ec57 6b10 	vmov	r6, r7, d0
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfd6      	itet	le
 800681a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800681e:	462a      	movgt	r2, r5
 8006820:	463a      	movle	r2, r7
 8006822:	46ab      	mov	fp, r5
 8006824:	bfd6      	itet	le
 8006826:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800682a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800682e:	ee00 3a90 	vmovle	s1, r3
 8006832:	ec4b ab17 	vmov	d7, sl, fp
 8006836:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800683a:	b003      	add	sp, #12
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006840 <__copybits>:
 8006840:	3901      	subs	r1, #1
 8006842:	b570      	push	{r4, r5, r6, lr}
 8006844:	1149      	asrs	r1, r1, #5
 8006846:	6914      	ldr	r4, [r2, #16]
 8006848:	3101      	adds	r1, #1
 800684a:	f102 0314 	add.w	r3, r2, #20
 800684e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006852:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006856:	1f05      	subs	r5, r0, #4
 8006858:	42a3      	cmp	r3, r4
 800685a:	d30c      	bcc.n	8006876 <__copybits+0x36>
 800685c:	1aa3      	subs	r3, r4, r2
 800685e:	3b11      	subs	r3, #17
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	3211      	adds	r2, #17
 8006866:	42a2      	cmp	r2, r4
 8006868:	bf88      	it	hi
 800686a:	2300      	movhi	r3, #0
 800686c:	4418      	add	r0, r3
 800686e:	2300      	movs	r3, #0
 8006870:	4288      	cmp	r0, r1
 8006872:	d305      	bcc.n	8006880 <__copybits+0x40>
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	f853 6b04 	ldr.w	r6, [r3], #4
 800687a:	f845 6f04 	str.w	r6, [r5, #4]!
 800687e:	e7eb      	b.n	8006858 <__copybits+0x18>
 8006880:	f840 3b04 	str.w	r3, [r0], #4
 8006884:	e7f4      	b.n	8006870 <__copybits+0x30>

08006886 <__any_on>:
 8006886:	f100 0214 	add.w	r2, r0, #20
 800688a:	6900      	ldr	r0, [r0, #16]
 800688c:	114b      	asrs	r3, r1, #5
 800688e:	4298      	cmp	r0, r3
 8006890:	b510      	push	{r4, lr}
 8006892:	db11      	blt.n	80068b8 <__any_on+0x32>
 8006894:	dd0a      	ble.n	80068ac <__any_on+0x26>
 8006896:	f011 011f 	ands.w	r1, r1, #31
 800689a:	d007      	beq.n	80068ac <__any_on+0x26>
 800689c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80068a0:	fa24 f001 	lsr.w	r0, r4, r1
 80068a4:	fa00 f101 	lsl.w	r1, r0, r1
 80068a8:	428c      	cmp	r4, r1
 80068aa:	d10b      	bne.n	80068c4 <__any_on+0x3e>
 80068ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d803      	bhi.n	80068bc <__any_on+0x36>
 80068b4:	2000      	movs	r0, #0
 80068b6:	bd10      	pop	{r4, pc}
 80068b8:	4603      	mov	r3, r0
 80068ba:	e7f7      	b.n	80068ac <__any_on+0x26>
 80068bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d0f5      	beq.n	80068b0 <__any_on+0x2a>
 80068c4:	2001      	movs	r0, #1
 80068c6:	e7f6      	b.n	80068b6 <__any_on+0x30>

080068c8 <__ascii_wctomb>:
 80068c8:	b149      	cbz	r1, 80068de <__ascii_wctomb+0x16>
 80068ca:	2aff      	cmp	r2, #255	; 0xff
 80068cc:	bf85      	ittet	hi
 80068ce:	238a      	movhi	r3, #138	; 0x8a
 80068d0:	6003      	strhi	r3, [r0, #0]
 80068d2:	700a      	strbls	r2, [r1, #0]
 80068d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80068d8:	bf98      	it	ls
 80068da:	2001      	movls	r0, #1
 80068dc:	4770      	bx	lr
 80068de:	4608      	mov	r0, r1
 80068e0:	4770      	bx	lr

080068e2 <__ssputs_r>:
 80068e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e6:	688e      	ldr	r6, [r1, #8]
 80068e8:	461f      	mov	r7, r3
 80068ea:	42be      	cmp	r6, r7
 80068ec:	680b      	ldr	r3, [r1, #0]
 80068ee:	4682      	mov	sl, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	4690      	mov	r8, r2
 80068f4:	d82c      	bhi.n	8006950 <__ssputs_r+0x6e>
 80068f6:	898a      	ldrh	r2, [r1, #12]
 80068f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068fc:	d026      	beq.n	800694c <__ssputs_r+0x6a>
 80068fe:	6965      	ldr	r5, [r4, #20]
 8006900:	6909      	ldr	r1, [r1, #16]
 8006902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006906:	eba3 0901 	sub.w	r9, r3, r1
 800690a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800690e:	1c7b      	adds	r3, r7, #1
 8006910:	444b      	add	r3, r9
 8006912:	106d      	asrs	r5, r5, #1
 8006914:	429d      	cmp	r5, r3
 8006916:	bf38      	it	cc
 8006918:	461d      	movcc	r5, r3
 800691a:	0553      	lsls	r3, r2, #21
 800691c:	d527      	bpl.n	800696e <__ssputs_r+0x8c>
 800691e:	4629      	mov	r1, r5
 8006920:	f7ff fa8a 	bl	8005e38 <_malloc_r>
 8006924:	4606      	mov	r6, r0
 8006926:	b360      	cbz	r0, 8006982 <__ssputs_r+0xa0>
 8006928:	6921      	ldr	r1, [r4, #16]
 800692a:	464a      	mov	r2, r9
 800692c:	f7fe fe7d 	bl	800562a <memcpy>
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	81a3      	strh	r3, [r4, #12]
 800693c:	6126      	str	r6, [r4, #16]
 800693e:	6165      	str	r5, [r4, #20]
 8006940:	444e      	add	r6, r9
 8006942:	eba5 0509 	sub.w	r5, r5, r9
 8006946:	6026      	str	r6, [r4, #0]
 8006948:	60a5      	str	r5, [r4, #8]
 800694a:	463e      	mov	r6, r7
 800694c:	42be      	cmp	r6, r7
 800694e:	d900      	bls.n	8006952 <__ssputs_r+0x70>
 8006950:	463e      	mov	r6, r7
 8006952:	6820      	ldr	r0, [r4, #0]
 8006954:	4632      	mov	r2, r6
 8006956:	4641      	mov	r1, r8
 8006958:	f000 fb6c 	bl	8007034 <memmove>
 800695c:	68a3      	ldr	r3, [r4, #8]
 800695e:	1b9b      	subs	r3, r3, r6
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4433      	add	r3, r6
 8006966:	6023      	str	r3, [r4, #0]
 8006968:	2000      	movs	r0, #0
 800696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696e:	462a      	mov	r2, r5
 8006970:	f000 fba7 	bl	80070c2 <_realloc_r>
 8006974:	4606      	mov	r6, r0
 8006976:	2800      	cmp	r0, #0
 8006978:	d1e0      	bne.n	800693c <__ssputs_r+0x5a>
 800697a:	6921      	ldr	r1, [r4, #16]
 800697c:	4650      	mov	r0, sl
 800697e:	f7fe fe8f 	bl	80056a0 <_free_r>
 8006982:	230c      	movs	r3, #12
 8006984:	f8ca 3000 	str.w	r3, [sl]
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e7e9      	b.n	800696a <__ssputs_r+0x88>
	...

08006998 <_svfiprintf_r>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	4698      	mov	r8, r3
 800699e:	898b      	ldrh	r3, [r1, #12]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	b09d      	sub	sp, #116	; 0x74
 80069a4:	4607      	mov	r7, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	d50e      	bpl.n	80069ca <_svfiprintf_r+0x32>
 80069ac:	690b      	ldr	r3, [r1, #16]
 80069ae:	b963      	cbnz	r3, 80069ca <_svfiprintf_r+0x32>
 80069b0:	2140      	movs	r1, #64	; 0x40
 80069b2:	f7ff fa41 	bl	8005e38 <_malloc_r>
 80069b6:	6028      	str	r0, [r5, #0]
 80069b8:	6128      	str	r0, [r5, #16]
 80069ba:	b920      	cbnz	r0, 80069c6 <_svfiprintf_r+0x2e>
 80069bc:	230c      	movs	r3, #12
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e0d0      	b.n	8006b68 <_svfiprintf_r+0x1d0>
 80069c6:	2340      	movs	r3, #64	; 0x40
 80069c8:	616b      	str	r3, [r5, #20]
 80069ca:	2300      	movs	r3, #0
 80069cc:	9309      	str	r3, [sp, #36]	; 0x24
 80069ce:	2320      	movs	r3, #32
 80069d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80069d8:	2330      	movs	r3, #48	; 0x30
 80069da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b80 <_svfiprintf_r+0x1e8>
 80069de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069e2:	f04f 0901 	mov.w	r9, #1
 80069e6:	4623      	mov	r3, r4
 80069e8:	469a      	mov	sl, r3
 80069ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ee:	b10a      	cbz	r2, 80069f4 <_svfiprintf_r+0x5c>
 80069f0:	2a25      	cmp	r2, #37	; 0x25
 80069f2:	d1f9      	bne.n	80069e8 <_svfiprintf_r+0x50>
 80069f4:	ebba 0b04 	subs.w	fp, sl, r4
 80069f8:	d00b      	beq.n	8006a12 <_svfiprintf_r+0x7a>
 80069fa:	465b      	mov	r3, fp
 80069fc:	4622      	mov	r2, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7ff ff6e 	bl	80068e2 <__ssputs_r>
 8006a06:	3001      	adds	r0, #1
 8006a08:	f000 80a9 	beq.w	8006b5e <_svfiprintf_r+0x1c6>
 8006a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a0e:	445a      	add	r2, fp
 8006a10:	9209      	str	r2, [sp, #36]	; 0x24
 8006a12:	f89a 3000 	ldrb.w	r3, [sl]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 80a1 	beq.w	8006b5e <_svfiprintf_r+0x1c6>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a26:	f10a 0a01 	add.w	sl, sl, #1
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	9307      	str	r3, [sp, #28]
 8006a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a32:	931a      	str	r3, [sp, #104]	; 0x68
 8006a34:	4654      	mov	r4, sl
 8006a36:	2205      	movs	r2, #5
 8006a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a3c:	4850      	ldr	r0, [pc, #320]	; (8006b80 <_svfiprintf_r+0x1e8>)
 8006a3e:	f7f9 fc17 	bl	8000270 <memchr>
 8006a42:	9a04      	ldr	r2, [sp, #16]
 8006a44:	b9d8      	cbnz	r0, 8006a7e <_svfiprintf_r+0xe6>
 8006a46:	06d0      	lsls	r0, r2, #27
 8006a48:	bf44      	itt	mi
 8006a4a:	2320      	movmi	r3, #32
 8006a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a50:	0711      	lsls	r1, r2, #28
 8006a52:	bf44      	itt	mi
 8006a54:	232b      	movmi	r3, #43	; 0x2b
 8006a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a60:	d015      	beq.n	8006a8e <_svfiprintf_r+0xf6>
 8006a62:	9a07      	ldr	r2, [sp, #28]
 8006a64:	4654      	mov	r4, sl
 8006a66:	2000      	movs	r0, #0
 8006a68:	f04f 0c0a 	mov.w	ip, #10
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a72:	3b30      	subs	r3, #48	; 0x30
 8006a74:	2b09      	cmp	r3, #9
 8006a76:	d94d      	bls.n	8006b14 <_svfiprintf_r+0x17c>
 8006a78:	b1b0      	cbz	r0, 8006aa8 <_svfiprintf_r+0x110>
 8006a7a:	9207      	str	r2, [sp, #28]
 8006a7c:	e014      	b.n	8006aa8 <_svfiprintf_r+0x110>
 8006a7e:	eba0 0308 	sub.w	r3, r0, r8
 8006a82:	fa09 f303 	lsl.w	r3, r9, r3
 8006a86:	4313      	orrs	r3, r2
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	46a2      	mov	sl, r4
 8006a8c:	e7d2      	b.n	8006a34 <_svfiprintf_r+0x9c>
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	9103      	str	r1, [sp, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfbb      	ittet	lt
 8006a9a:	425b      	neglt	r3, r3
 8006a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8006aa0:	9307      	strge	r3, [sp, #28]
 8006aa2:	9307      	strlt	r3, [sp, #28]
 8006aa4:	bfb8      	it	lt
 8006aa6:	9204      	strlt	r2, [sp, #16]
 8006aa8:	7823      	ldrb	r3, [r4, #0]
 8006aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8006aac:	d10c      	bne.n	8006ac8 <_svfiprintf_r+0x130>
 8006aae:	7863      	ldrb	r3, [r4, #1]
 8006ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ab2:	d134      	bne.n	8006b1e <_svfiprintf_r+0x186>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9203      	str	r2, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfb8      	it	lt
 8006ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ac4:	3402      	adds	r4, #2
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006b90 <_svfiprintf_r+0x1f8>
 8006acc:	7821      	ldrb	r1, [r4, #0]
 8006ace:	2203      	movs	r2, #3
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	f7f9 fbcd 	bl	8000270 <memchr>
 8006ad6:	b138      	cbz	r0, 8006ae8 <_svfiprintf_r+0x150>
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	eba0 000a 	sub.w	r0, r0, sl
 8006ade:	2240      	movs	r2, #64	; 0x40
 8006ae0:	4082      	lsls	r2, r0
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	3401      	adds	r4, #1
 8006ae6:	9304      	str	r3, [sp, #16]
 8006ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aec:	4825      	ldr	r0, [pc, #148]	; (8006b84 <_svfiprintf_r+0x1ec>)
 8006aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006af2:	2206      	movs	r2, #6
 8006af4:	f7f9 fbbc 	bl	8000270 <memchr>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d038      	beq.n	8006b6e <_svfiprintf_r+0x1d6>
 8006afc:	4b22      	ldr	r3, [pc, #136]	; (8006b88 <_svfiprintf_r+0x1f0>)
 8006afe:	bb1b      	cbnz	r3, 8006b48 <_svfiprintf_r+0x1b0>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	3307      	adds	r3, #7
 8006b04:	f023 0307 	bic.w	r3, r3, #7
 8006b08:	3308      	adds	r3, #8
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0e:	4433      	add	r3, r6
 8006b10:	9309      	str	r3, [sp, #36]	; 0x24
 8006b12:	e768      	b.n	80069e6 <_svfiprintf_r+0x4e>
 8006b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b18:	460c      	mov	r4, r1
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	e7a6      	b.n	8006a6c <_svfiprintf_r+0xd4>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	3401      	adds	r4, #1
 8006b22:	9305      	str	r3, [sp, #20]
 8006b24:	4619      	mov	r1, r3
 8006b26:	f04f 0c0a 	mov.w	ip, #10
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b30:	3a30      	subs	r2, #48	; 0x30
 8006b32:	2a09      	cmp	r2, #9
 8006b34:	d903      	bls.n	8006b3e <_svfiprintf_r+0x1a6>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0c6      	beq.n	8006ac8 <_svfiprintf_r+0x130>
 8006b3a:	9105      	str	r1, [sp, #20]
 8006b3c:	e7c4      	b.n	8006ac8 <_svfiprintf_r+0x130>
 8006b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b42:	4604      	mov	r4, r0
 8006b44:	2301      	movs	r3, #1
 8006b46:	e7f0      	b.n	8006b2a <_svfiprintf_r+0x192>
 8006b48:	ab03      	add	r3, sp, #12
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <_svfiprintf_r+0x1f4>)
 8006b50:	a904      	add	r1, sp, #16
 8006b52:	4638      	mov	r0, r7
 8006b54:	f3af 8000 	nop.w
 8006b58:	1c42      	adds	r2, r0, #1
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	d1d6      	bne.n	8006b0c <_svfiprintf_r+0x174>
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	065b      	lsls	r3, r3, #25
 8006b62:	f53f af2d 	bmi.w	80069c0 <_svfiprintf_r+0x28>
 8006b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b68:	b01d      	add	sp, #116	; 0x74
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6e:	ab03      	add	r3, sp, #12
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	462a      	mov	r2, r5
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <_svfiprintf_r+0x1f4>)
 8006b76:	a904      	add	r1, sp, #16
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f000 f879 	bl	8006c70 <_printf_i>
 8006b7e:	e7eb      	b.n	8006b58 <_svfiprintf_r+0x1c0>
 8006b80:	08007cad 	.word	0x08007cad
 8006b84:	08007cb7 	.word	0x08007cb7
 8006b88:	00000000 	.word	0x00000000
 8006b8c:	080068e3 	.word	0x080068e3
 8006b90:	08007cb3 	.word	0x08007cb3

08006b94 <_printf_common>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	4616      	mov	r6, r2
 8006b9a:	4699      	mov	r9, r3
 8006b9c:	688a      	ldr	r2, [r1, #8]
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	bfb8      	it	lt
 8006ba8:	4613      	movlt	r3, r2
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	b10a      	cbz	r2, 8006bba <_printf_common+0x26>
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	0699      	lsls	r1, r3, #26
 8006bbe:	bf42      	ittt	mi
 8006bc0:	6833      	ldrmi	r3, [r6, #0]
 8006bc2:	3302      	addmi	r3, #2
 8006bc4:	6033      	strmi	r3, [r6, #0]
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	f015 0506 	ands.w	r5, r5, #6
 8006bcc:	d106      	bne.n	8006bdc <_printf_common+0x48>
 8006bce:	f104 0a19 	add.w	sl, r4, #25
 8006bd2:	68e3      	ldr	r3, [r4, #12]
 8006bd4:	6832      	ldr	r2, [r6, #0]
 8006bd6:	1a9b      	subs	r3, r3, r2
 8006bd8:	42ab      	cmp	r3, r5
 8006bda:	dc26      	bgt.n	8006c2a <_printf_common+0x96>
 8006bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006be0:	1e13      	subs	r3, r2, #0
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	bf18      	it	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	0692      	lsls	r2, r2, #26
 8006bea:	d42b      	bmi.n	8006c44 <_printf_common+0xb0>
 8006bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c0      	blx	r8
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d01e      	beq.n	8006c38 <_printf_common+0xa4>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	6922      	ldr	r2, [r4, #16]
 8006bfe:	f003 0306 	and.w	r3, r3, #6
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	bf02      	ittt	eq
 8006c06:	68e5      	ldreq	r5, [r4, #12]
 8006c08:	6833      	ldreq	r3, [r6, #0]
 8006c0a:	1aed      	subeq	r5, r5, r3
 8006c0c:	68a3      	ldr	r3, [r4, #8]
 8006c0e:	bf0c      	ite	eq
 8006c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c14:	2500      	movne	r5, #0
 8006c16:	4293      	cmp	r3, r2
 8006c18:	bfc4      	itt	gt
 8006c1a:	1a9b      	subgt	r3, r3, r2
 8006c1c:	18ed      	addgt	r5, r5, r3
 8006c1e:	2600      	movs	r6, #0
 8006c20:	341a      	adds	r4, #26
 8006c22:	42b5      	cmp	r5, r6
 8006c24:	d11a      	bne.n	8006c5c <_printf_common+0xc8>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e008      	b.n	8006c3c <_printf_common+0xa8>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4638      	mov	r0, r7
 8006c32:	47c0      	blx	r8
 8006c34:	3001      	adds	r0, #1
 8006c36:	d103      	bne.n	8006c40 <_printf_common+0xac>
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c40:	3501      	adds	r5, #1
 8006c42:	e7c6      	b.n	8006bd2 <_printf_common+0x3e>
 8006c44:	18e1      	adds	r1, r4, r3
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	2030      	movs	r0, #48	; 0x30
 8006c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c4e:	4422      	add	r2, r4
 8006c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c58:	3302      	adds	r3, #2
 8006c5a:	e7c7      	b.n	8006bec <_printf_common+0x58>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4622      	mov	r2, r4
 8006c60:	4649      	mov	r1, r9
 8006c62:	4638      	mov	r0, r7
 8006c64:	47c0      	blx	r8
 8006c66:	3001      	adds	r0, #1
 8006c68:	d0e6      	beq.n	8006c38 <_printf_common+0xa4>
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7d9      	b.n	8006c22 <_printf_common+0x8e>
	...

08006c70 <_printf_i>:
 8006c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	7e0f      	ldrb	r7, [r1, #24]
 8006c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c78:	2f78      	cmp	r7, #120	; 0x78
 8006c7a:	4691      	mov	r9, r2
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	469a      	mov	sl, r3
 8006c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c86:	d807      	bhi.n	8006c98 <_printf_i+0x28>
 8006c88:	2f62      	cmp	r7, #98	; 0x62
 8006c8a:	d80a      	bhi.n	8006ca2 <_printf_i+0x32>
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	f000 80d4 	beq.w	8006e3a <_printf_i+0x1ca>
 8006c92:	2f58      	cmp	r7, #88	; 0x58
 8006c94:	f000 80c0 	beq.w	8006e18 <_printf_i+0x1a8>
 8006c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ca0:	e03a      	b.n	8006d18 <_printf_i+0xa8>
 8006ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ca6:	2b15      	cmp	r3, #21
 8006ca8:	d8f6      	bhi.n	8006c98 <_printf_i+0x28>
 8006caa:	a101      	add	r1, pc, #4	; (adr r1, 8006cb0 <_printf_i+0x40>)
 8006cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cb0:	08006d09 	.word	0x08006d09
 8006cb4:	08006d1d 	.word	0x08006d1d
 8006cb8:	08006c99 	.word	0x08006c99
 8006cbc:	08006c99 	.word	0x08006c99
 8006cc0:	08006c99 	.word	0x08006c99
 8006cc4:	08006c99 	.word	0x08006c99
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006c99 	.word	0x08006c99
 8006cd0:	08006c99 	.word	0x08006c99
 8006cd4:	08006c99 	.word	0x08006c99
 8006cd8:	08006c99 	.word	0x08006c99
 8006cdc:	08006e21 	.word	0x08006e21
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006ddb 	.word	0x08006ddb
 8006ce8:	08006c99 	.word	0x08006c99
 8006cec:	08006c99 	.word	0x08006c99
 8006cf0:	08006e43 	.word	0x08006e43
 8006cf4:	08006c99 	.word	0x08006c99
 8006cf8:	08006d49 	.word	0x08006d49
 8006cfc:	08006c99 	.word	0x08006c99
 8006d00:	08006c99 	.word	0x08006c99
 8006d04:	08006de3 	.word	0x08006de3
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	602a      	str	r2, [r5, #0]
 8006d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e09f      	b.n	8006e5c <_printf_i+0x1ec>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	0607      	lsls	r7, r0, #24
 8006d22:	f103 0104 	add.w	r1, r3, #4
 8006d26:	6029      	str	r1, [r5, #0]
 8006d28:	d501      	bpl.n	8006d2e <_printf_i+0xbe>
 8006d2a:	681e      	ldr	r6, [r3, #0]
 8006d2c:	e003      	b.n	8006d36 <_printf_i+0xc6>
 8006d2e:	0646      	lsls	r6, r0, #25
 8006d30:	d5fb      	bpl.n	8006d2a <_printf_i+0xba>
 8006d32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	da03      	bge.n	8006d42 <_printf_i+0xd2>
 8006d3a:	232d      	movs	r3, #45	; 0x2d
 8006d3c:	4276      	negs	r6, r6
 8006d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d42:	485a      	ldr	r0, [pc, #360]	; (8006eac <_printf_i+0x23c>)
 8006d44:	230a      	movs	r3, #10
 8006d46:	e012      	b.n	8006d6e <_printf_i+0xfe>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	6820      	ldr	r0, [r4, #0]
 8006d4c:	1d19      	adds	r1, r3, #4
 8006d4e:	6029      	str	r1, [r5, #0]
 8006d50:	0605      	lsls	r5, r0, #24
 8006d52:	d501      	bpl.n	8006d58 <_printf_i+0xe8>
 8006d54:	681e      	ldr	r6, [r3, #0]
 8006d56:	e002      	b.n	8006d5e <_printf_i+0xee>
 8006d58:	0641      	lsls	r1, r0, #25
 8006d5a:	d5fb      	bpl.n	8006d54 <_printf_i+0xe4>
 8006d5c:	881e      	ldrh	r6, [r3, #0]
 8006d5e:	4853      	ldr	r0, [pc, #332]	; (8006eac <_printf_i+0x23c>)
 8006d60:	2f6f      	cmp	r7, #111	; 0x6f
 8006d62:	bf0c      	ite	eq
 8006d64:	2308      	moveq	r3, #8
 8006d66:	230a      	movne	r3, #10
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d6e:	6865      	ldr	r5, [r4, #4]
 8006d70:	60a5      	str	r5, [r4, #8]
 8006d72:	2d00      	cmp	r5, #0
 8006d74:	bfa2      	ittt	ge
 8006d76:	6821      	ldrge	r1, [r4, #0]
 8006d78:	f021 0104 	bicge.w	r1, r1, #4
 8006d7c:	6021      	strge	r1, [r4, #0]
 8006d7e:	b90e      	cbnz	r6, 8006d84 <_printf_i+0x114>
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	d04b      	beq.n	8006e1c <_printf_i+0x1ac>
 8006d84:	4615      	mov	r5, r2
 8006d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8006d8e:	5dc7      	ldrb	r7, [r0, r7]
 8006d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d94:	4637      	mov	r7, r6
 8006d96:	42bb      	cmp	r3, r7
 8006d98:	460e      	mov	r6, r1
 8006d9a:	d9f4      	bls.n	8006d86 <_printf_i+0x116>
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d10b      	bne.n	8006db8 <_printf_i+0x148>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	07de      	lsls	r6, r3, #31
 8006da4:	d508      	bpl.n	8006db8 <_printf_i+0x148>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	6861      	ldr	r1, [r4, #4]
 8006daa:	4299      	cmp	r1, r3
 8006dac:	bfde      	ittt	le
 8006dae:	2330      	movle	r3, #48	; 0x30
 8006db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006db8:	1b52      	subs	r2, r2, r5
 8006dba:	6122      	str	r2, [r4, #16]
 8006dbc:	f8cd a000 	str.w	sl, [sp]
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	aa03      	add	r2, sp, #12
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f7ff fee4 	bl	8006b94 <_printf_common>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d14a      	bne.n	8006e66 <_printf_i+0x1f6>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	b004      	add	sp, #16
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	f043 0320 	orr.w	r3, r3, #32
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	4833      	ldr	r0, [pc, #204]	; (8006eb0 <_printf_i+0x240>)
 8006de4:	2778      	movs	r7, #120	; 0x78
 8006de6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	6829      	ldr	r1, [r5, #0]
 8006dee:	061f      	lsls	r7, r3, #24
 8006df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006df4:	d402      	bmi.n	8006dfc <_printf_i+0x18c>
 8006df6:	065f      	lsls	r7, r3, #25
 8006df8:	bf48      	it	mi
 8006dfa:	b2b6      	uxthmi	r6, r6
 8006dfc:	07df      	lsls	r7, r3, #31
 8006dfe:	bf48      	it	mi
 8006e00:	f043 0320 	orrmi.w	r3, r3, #32
 8006e04:	6029      	str	r1, [r5, #0]
 8006e06:	bf48      	it	mi
 8006e08:	6023      	strmi	r3, [r4, #0]
 8006e0a:	b91e      	cbnz	r6, 8006e14 <_printf_i+0x1a4>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	f023 0320 	bic.w	r3, r3, #32
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	2310      	movs	r3, #16
 8006e16:	e7a7      	b.n	8006d68 <_printf_i+0xf8>
 8006e18:	4824      	ldr	r0, [pc, #144]	; (8006eac <_printf_i+0x23c>)
 8006e1a:	e7e4      	b.n	8006de6 <_printf_i+0x176>
 8006e1c:	4615      	mov	r5, r2
 8006e1e:	e7bd      	b.n	8006d9c <_printf_i+0x12c>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	6826      	ldr	r6, [r4, #0]
 8006e24:	6961      	ldr	r1, [r4, #20]
 8006e26:	1d18      	adds	r0, r3, #4
 8006e28:	6028      	str	r0, [r5, #0]
 8006e2a:	0635      	lsls	r5, r6, #24
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	d501      	bpl.n	8006e34 <_printf_i+0x1c4>
 8006e30:	6019      	str	r1, [r3, #0]
 8006e32:	e002      	b.n	8006e3a <_printf_i+0x1ca>
 8006e34:	0670      	lsls	r0, r6, #25
 8006e36:	d5fb      	bpl.n	8006e30 <_printf_i+0x1c0>
 8006e38:	8019      	strh	r1, [r3, #0]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	4615      	mov	r5, r2
 8006e40:	e7bc      	b.n	8006dbc <_printf_i+0x14c>
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	1d1a      	adds	r2, r3, #4
 8006e46:	602a      	str	r2, [r5, #0]
 8006e48:	681d      	ldr	r5, [r3, #0]
 8006e4a:	6862      	ldr	r2, [r4, #4]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7f9 fa0e 	bl	8000270 <memchr>
 8006e54:	b108      	cbz	r0, 8006e5a <_printf_i+0x1ea>
 8006e56:	1b40      	subs	r0, r0, r5
 8006e58:	6060      	str	r0, [r4, #4]
 8006e5a:	6863      	ldr	r3, [r4, #4]
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e64:	e7aa      	b.n	8006dbc <_printf_i+0x14c>
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	47d0      	blx	sl
 8006e70:	3001      	adds	r0, #1
 8006e72:	d0ad      	beq.n	8006dd0 <_printf_i+0x160>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	079b      	lsls	r3, r3, #30
 8006e78:	d413      	bmi.n	8006ea2 <_printf_i+0x232>
 8006e7a:	68e0      	ldr	r0, [r4, #12]
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	4298      	cmp	r0, r3
 8006e80:	bfb8      	it	lt
 8006e82:	4618      	movlt	r0, r3
 8006e84:	e7a6      	b.n	8006dd4 <_printf_i+0x164>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d09d      	beq.n	8006dd0 <_printf_i+0x160>
 8006e94:	3501      	adds	r5, #1
 8006e96:	68e3      	ldr	r3, [r4, #12]
 8006e98:	9903      	ldr	r1, [sp, #12]
 8006e9a:	1a5b      	subs	r3, r3, r1
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	dcf2      	bgt.n	8006e86 <_printf_i+0x216>
 8006ea0:	e7eb      	b.n	8006e7a <_printf_i+0x20a>
 8006ea2:	2500      	movs	r5, #0
 8006ea4:	f104 0619 	add.w	r6, r4, #25
 8006ea8:	e7f5      	b.n	8006e96 <_printf_i+0x226>
 8006eaa:	bf00      	nop
 8006eac:	08007cbe 	.word	0x08007cbe
 8006eb0:	08007ccf 	.word	0x08007ccf

08006eb4 <__sflush_r>:
 8006eb4:	898a      	ldrh	r2, [r1, #12]
 8006eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eba:	4605      	mov	r5, r0
 8006ebc:	0710      	lsls	r0, r2, #28
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	d458      	bmi.n	8006f74 <__sflush_r+0xc0>
 8006ec2:	684b      	ldr	r3, [r1, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dc05      	bgt.n	8006ed4 <__sflush_r+0x20>
 8006ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dc02      	bgt.n	8006ed4 <__sflush_r+0x20>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	d0f9      	beq.n	8006ece <__sflush_r+0x1a>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ee0:	682f      	ldr	r7, [r5, #0]
 8006ee2:	6a21      	ldr	r1, [r4, #32]
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	d032      	beq.n	8006f4e <__sflush_r+0x9a>
 8006ee8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	075a      	lsls	r2, r3, #29
 8006eee:	d505      	bpl.n	8006efc <__sflush_r+0x48>
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	1ac0      	subs	r0, r0, r3
 8006ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ef6:	b10b      	cbz	r3, 8006efc <__sflush_r+0x48>
 8006ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006efa:	1ac0      	subs	r0, r0, r3
 8006efc:	2300      	movs	r3, #0
 8006efe:	4602      	mov	r2, r0
 8006f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f02:	6a21      	ldr	r1, [r4, #32]
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b0      	blx	r6
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	d106      	bne.n	8006f1c <__sflush_r+0x68>
 8006f0e:	6829      	ldr	r1, [r5, #0]
 8006f10:	291d      	cmp	r1, #29
 8006f12:	d82b      	bhi.n	8006f6c <__sflush_r+0xb8>
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <__sflush_r+0x108>)
 8006f16:	410a      	asrs	r2, r1
 8006f18:	07d6      	lsls	r6, r2, #31
 8006f1a:	d427      	bmi.n	8006f6c <__sflush_r+0xb8>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	6062      	str	r2, [r4, #4]
 8006f20:	04d9      	lsls	r1, r3, #19
 8006f22:	6922      	ldr	r2, [r4, #16]
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	d504      	bpl.n	8006f32 <__sflush_r+0x7e>
 8006f28:	1c42      	adds	r2, r0, #1
 8006f2a:	d101      	bne.n	8006f30 <__sflush_r+0x7c>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	b903      	cbnz	r3, 8006f32 <__sflush_r+0x7e>
 8006f30:	6560      	str	r0, [r4, #84]	; 0x54
 8006f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f34:	602f      	str	r7, [r5, #0]
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d0c9      	beq.n	8006ece <__sflush_r+0x1a>
 8006f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	d002      	beq.n	8006f48 <__sflush_r+0x94>
 8006f42:	4628      	mov	r0, r5
 8006f44:	f7fe fbac 	bl	80056a0 <_free_r>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	6360      	str	r0, [r4, #52]	; 0x34
 8006f4c:	e7c0      	b.n	8006ed0 <__sflush_r+0x1c>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b0      	blx	r6
 8006f54:	1c41      	adds	r1, r0, #1
 8006f56:	d1c8      	bne.n	8006eea <__sflush_r+0x36>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0c5      	beq.n	8006eea <__sflush_r+0x36>
 8006f5e:	2b1d      	cmp	r3, #29
 8006f60:	d001      	beq.n	8006f66 <__sflush_r+0xb2>
 8006f62:	2b16      	cmp	r3, #22
 8006f64:	d101      	bne.n	8006f6a <__sflush_r+0xb6>
 8006f66:	602f      	str	r7, [r5, #0]
 8006f68:	e7b1      	b.n	8006ece <__sflush_r+0x1a>
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	e7ad      	b.n	8006ed0 <__sflush_r+0x1c>
 8006f74:	690f      	ldr	r7, [r1, #16]
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	d0a9      	beq.n	8006ece <__sflush_r+0x1a>
 8006f7a:	0793      	lsls	r3, r2, #30
 8006f7c:	680e      	ldr	r6, [r1, #0]
 8006f7e:	bf08      	it	eq
 8006f80:	694b      	ldreq	r3, [r1, #20]
 8006f82:	600f      	str	r7, [r1, #0]
 8006f84:	bf18      	it	ne
 8006f86:	2300      	movne	r3, #0
 8006f88:	eba6 0807 	sub.w	r8, r6, r7
 8006f8c:	608b      	str	r3, [r1, #8]
 8006f8e:	f1b8 0f00 	cmp.w	r8, #0
 8006f92:	dd9c      	ble.n	8006ece <__sflush_r+0x1a>
 8006f94:	6a21      	ldr	r1, [r4, #32]
 8006f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f98:	4643      	mov	r3, r8
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b0      	blx	r6
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	dc06      	bgt.n	8006fb2 <__sflush_r+0xfe>
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb0:	e78e      	b.n	8006ed0 <__sflush_r+0x1c>
 8006fb2:	4407      	add	r7, r0
 8006fb4:	eba8 0800 	sub.w	r8, r8, r0
 8006fb8:	e7e9      	b.n	8006f8e <__sflush_r+0xda>
 8006fba:	bf00      	nop
 8006fbc:	dfbffffe 	.word	0xdfbffffe

08006fc0 <_fflush_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	690b      	ldr	r3, [r1, #16]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	b913      	cbnz	r3, 8006fd0 <_fflush_r+0x10>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	4628      	mov	r0, r5
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	b118      	cbz	r0, 8006fda <_fflush_r+0x1a>
 8006fd2:	6a03      	ldr	r3, [r0, #32]
 8006fd4:	b90b      	cbnz	r3, 8006fda <_fflush_r+0x1a>
 8006fd6:	f7fe f989 	bl	80052ec <__sinit>
 8006fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f3      	beq.n	8006fca <_fflush_r+0xa>
 8006fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fe4:	07d0      	lsls	r0, r2, #31
 8006fe6:	d404      	bmi.n	8006ff2 <_fflush_r+0x32>
 8006fe8:	0599      	lsls	r1, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_fflush_r+0x32>
 8006fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fee:	f7fe fb12 	bl	8005616 <__retarget_lock_acquire_recursive>
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f7ff ff5d 	bl	8006eb4 <__sflush_r>
 8006ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ffc:	07da      	lsls	r2, r3, #31
 8006ffe:	4605      	mov	r5, r0
 8007000:	d4e4      	bmi.n	8006fcc <_fflush_r+0xc>
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	059b      	lsls	r3, r3, #22
 8007006:	d4e1      	bmi.n	8006fcc <_fflush_r+0xc>
 8007008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800700a:	f7fe fb05 	bl	8005618 <__retarget_lock_release_recursive>
 800700e:	e7dd      	b.n	8006fcc <_fflush_r+0xc>

08007010 <fiprintf>:
 8007010:	b40e      	push	{r1, r2, r3}
 8007012:	b503      	push	{r0, r1, lr}
 8007014:	4601      	mov	r1, r0
 8007016:	ab03      	add	r3, sp, #12
 8007018:	4805      	ldr	r0, [pc, #20]	; (8007030 <fiprintf+0x20>)
 800701a:	f853 2b04 	ldr.w	r2, [r3], #4
 800701e:	6800      	ldr	r0, [r0, #0]
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	f000 f8a7 	bl	8007174 <_vfiprintf_r>
 8007026:	b002      	add	sp, #8
 8007028:	f85d eb04 	ldr.w	lr, [sp], #4
 800702c:	b003      	add	sp, #12
 800702e:	4770      	bx	lr
 8007030:	200001d0 	.word	0x200001d0

08007034 <memmove>:
 8007034:	4288      	cmp	r0, r1
 8007036:	b510      	push	{r4, lr}
 8007038:	eb01 0402 	add.w	r4, r1, r2
 800703c:	d902      	bls.n	8007044 <memmove+0x10>
 800703e:	4284      	cmp	r4, r0
 8007040:	4623      	mov	r3, r4
 8007042:	d807      	bhi.n	8007054 <memmove+0x20>
 8007044:	1e43      	subs	r3, r0, #1
 8007046:	42a1      	cmp	r1, r4
 8007048:	d008      	beq.n	800705c <memmove+0x28>
 800704a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800704e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007052:	e7f8      	b.n	8007046 <memmove+0x12>
 8007054:	4402      	add	r2, r0
 8007056:	4601      	mov	r1, r0
 8007058:	428a      	cmp	r2, r1
 800705a:	d100      	bne.n	800705e <memmove+0x2a>
 800705c:	bd10      	pop	{r4, pc}
 800705e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007066:	e7f7      	b.n	8007058 <memmove+0x24>

08007068 <_sbrk_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	; (8007084 <_sbrk_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fa fc9c 	bl	80019b0 <_sbrk>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_sbrk_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_sbrk_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000418 	.word	0x20000418

08007088 <abort>:
 8007088:	b508      	push	{r3, lr}
 800708a:	2006      	movs	r0, #6
 800708c:	f000 fa4a 	bl	8007524 <raise>
 8007090:	2001      	movs	r0, #1
 8007092:	f7fa fc15 	bl	80018c0 <_exit>

08007096 <_calloc_r>:
 8007096:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007098:	fba1 2402 	umull	r2, r4, r1, r2
 800709c:	b94c      	cbnz	r4, 80070b2 <_calloc_r+0x1c>
 800709e:	4611      	mov	r1, r2
 80070a0:	9201      	str	r2, [sp, #4]
 80070a2:	f7fe fec9 	bl	8005e38 <_malloc_r>
 80070a6:	9a01      	ldr	r2, [sp, #4]
 80070a8:	4605      	mov	r5, r0
 80070aa:	b930      	cbnz	r0, 80070ba <_calloc_r+0x24>
 80070ac:	4628      	mov	r0, r5
 80070ae:	b003      	add	sp, #12
 80070b0:	bd30      	pop	{r4, r5, pc}
 80070b2:	220c      	movs	r2, #12
 80070b4:	6002      	str	r2, [r0, #0]
 80070b6:	2500      	movs	r5, #0
 80070b8:	e7f8      	b.n	80070ac <_calloc_r+0x16>
 80070ba:	4621      	mov	r1, r4
 80070bc:	f7fe f9c3 	bl	8005446 <memset>
 80070c0:	e7f4      	b.n	80070ac <_calloc_r+0x16>

080070c2 <_realloc_r>:
 80070c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c6:	4680      	mov	r8, r0
 80070c8:	4614      	mov	r4, r2
 80070ca:	460e      	mov	r6, r1
 80070cc:	b921      	cbnz	r1, 80070d8 <_realloc_r+0x16>
 80070ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	4611      	mov	r1, r2
 80070d4:	f7fe beb0 	b.w	8005e38 <_malloc_r>
 80070d8:	b92a      	cbnz	r2, 80070e6 <_realloc_r+0x24>
 80070da:	f7fe fae1 	bl	80056a0 <_free_r>
 80070de:	4625      	mov	r5, r4
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e6:	f000 fa39 	bl	800755c <_malloc_usable_size_r>
 80070ea:	4284      	cmp	r4, r0
 80070ec:	4607      	mov	r7, r0
 80070ee:	d802      	bhi.n	80070f6 <_realloc_r+0x34>
 80070f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070f4:	d812      	bhi.n	800711c <_realloc_r+0x5a>
 80070f6:	4621      	mov	r1, r4
 80070f8:	4640      	mov	r0, r8
 80070fa:	f7fe fe9d 	bl	8005e38 <_malloc_r>
 80070fe:	4605      	mov	r5, r0
 8007100:	2800      	cmp	r0, #0
 8007102:	d0ed      	beq.n	80070e0 <_realloc_r+0x1e>
 8007104:	42bc      	cmp	r4, r7
 8007106:	4622      	mov	r2, r4
 8007108:	4631      	mov	r1, r6
 800710a:	bf28      	it	cs
 800710c:	463a      	movcs	r2, r7
 800710e:	f7fe fa8c 	bl	800562a <memcpy>
 8007112:	4631      	mov	r1, r6
 8007114:	4640      	mov	r0, r8
 8007116:	f7fe fac3 	bl	80056a0 <_free_r>
 800711a:	e7e1      	b.n	80070e0 <_realloc_r+0x1e>
 800711c:	4635      	mov	r5, r6
 800711e:	e7df      	b.n	80070e0 <_realloc_r+0x1e>

08007120 <__sfputc_r>:
 8007120:	6893      	ldr	r3, [r2, #8]
 8007122:	3b01      	subs	r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	b410      	push	{r4}
 8007128:	6093      	str	r3, [r2, #8]
 800712a:	da08      	bge.n	800713e <__sfputc_r+0x1e>
 800712c:	6994      	ldr	r4, [r2, #24]
 800712e:	42a3      	cmp	r3, r4
 8007130:	db01      	blt.n	8007136 <__sfputc_r+0x16>
 8007132:	290a      	cmp	r1, #10
 8007134:	d103      	bne.n	800713e <__sfputc_r+0x1e>
 8007136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800713a:	f000 b935 	b.w	80073a8 <__swbuf_r>
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	1c58      	adds	r0, r3, #1
 8007142:	6010      	str	r0, [r2, #0]
 8007144:	7019      	strb	r1, [r3, #0]
 8007146:	4608      	mov	r0, r1
 8007148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714c:	4770      	bx	lr

0800714e <__sfputs_r>:
 800714e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007150:	4606      	mov	r6, r0
 8007152:	460f      	mov	r7, r1
 8007154:	4614      	mov	r4, r2
 8007156:	18d5      	adds	r5, r2, r3
 8007158:	42ac      	cmp	r4, r5
 800715a:	d101      	bne.n	8007160 <__sfputs_r+0x12>
 800715c:	2000      	movs	r0, #0
 800715e:	e007      	b.n	8007170 <__sfputs_r+0x22>
 8007160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007164:	463a      	mov	r2, r7
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff ffda 	bl	8007120 <__sfputc_r>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d1f3      	bne.n	8007158 <__sfputs_r+0xa>
 8007170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007174 <_vfiprintf_r>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	460d      	mov	r5, r1
 800717a:	b09d      	sub	sp, #116	; 0x74
 800717c:	4614      	mov	r4, r2
 800717e:	4698      	mov	r8, r3
 8007180:	4606      	mov	r6, r0
 8007182:	b118      	cbz	r0, 800718c <_vfiprintf_r+0x18>
 8007184:	6a03      	ldr	r3, [r0, #32]
 8007186:	b90b      	cbnz	r3, 800718c <_vfiprintf_r+0x18>
 8007188:	f7fe f8b0 	bl	80052ec <__sinit>
 800718c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800718e:	07d9      	lsls	r1, r3, #31
 8007190:	d405      	bmi.n	800719e <_vfiprintf_r+0x2a>
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	059a      	lsls	r2, r3, #22
 8007196:	d402      	bmi.n	800719e <_vfiprintf_r+0x2a>
 8007198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800719a:	f7fe fa3c 	bl	8005616 <__retarget_lock_acquire_recursive>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	071b      	lsls	r3, r3, #28
 80071a2:	d501      	bpl.n	80071a8 <_vfiprintf_r+0x34>
 80071a4:	692b      	ldr	r3, [r5, #16]
 80071a6:	b99b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x5c>
 80071a8:	4629      	mov	r1, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f93a 	bl	8007424 <__swsetup_r>
 80071b0:	b170      	cbz	r0, 80071d0 <_vfiprintf_r+0x5c>
 80071b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071b4:	07dc      	lsls	r4, r3, #31
 80071b6:	d504      	bpl.n	80071c2 <_vfiprintf_r+0x4e>
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	b01d      	add	sp, #116	; 0x74
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	0598      	lsls	r0, r3, #22
 80071c6:	d4f7      	bmi.n	80071b8 <_vfiprintf_r+0x44>
 80071c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ca:	f7fe fa25 	bl	8005618 <__retarget_lock_release_recursive>
 80071ce:	e7f3      	b.n	80071b8 <_vfiprintf_r+0x44>
 80071d0:	2300      	movs	r3, #0
 80071d2:	9309      	str	r3, [sp, #36]	; 0x24
 80071d4:	2320      	movs	r3, #32
 80071d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071da:	f8cd 800c 	str.w	r8, [sp, #12]
 80071de:	2330      	movs	r3, #48	; 0x30
 80071e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007394 <_vfiprintf_r+0x220>
 80071e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071e8:	f04f 0901 	mov.w	r9, #1
 80071ec:	4623      	mov	r3, r4
 80071ee:	469a      	mov	sl, r3
 80071f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f4:	b10a      	cbz	r2, 80071fa <_vfiprintf_r+0x86>
 80071f6:	2a25      	cmp	r2, #37	; 0x25
 80071f8:	d1f9      	bne.n	80071ee <_vfiprintf_r+0x7a>
 80071fa:	ebba 0b04 	subs.w	fp, sl, r4
 80071fe:	d00b      	beq.n	8007218 <_vfiprintf_r+0xa4>
 8007200:	465b      	mov	r3, fp
 8007202:	4622      	mov	r2, r4
 8007204:	4629      	mov	r1, r5
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ffa1 	bl	800714e <__sfputs_r>
 800720c:	3001      	adds	r0, #1
 800720e:	f000 80a9 	beq.w	8007364 <_vfiprintf_r+0x1f0>
 8007212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007214:	445a      	add	r2, fp
 8007216:	9209      	str	r2, [sp, #36]	; 0x24
 8007218:	f89a 3000 	ldrb.w	r3, [sl]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80a1 	beq.w	8007364 <_vfiprintf_r+0x1f0>
 8007222:	2300      	movs	r3, #0
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800722c:	f10a 0a01 	add.w	sl, sl, #1
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007238:	931a      	str	r3, [sp, #104]	; 0x68
 800723a:	4654      	mov	r4, sl
 800723c:	2205      	movs	r2, #5
 800723e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007242:	4854      	ldr	r0, [pc, #336]	; (8007394 <_vfiprintf_r+0x220>)
 8007244:	f7f9 f814 	bl	8000270 <memchr>
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	b9d8      	cbnz	r0, 8007284 <_vfiprintf_r+0x110>
 800724c:	06d1      	lsls	r1, r2, #27
 800724e:	bf44      	itt	mi
 8007250:	2320      	movmi	r3, #32
 8007252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007256:	0713      	lsls	r3, r2, #28
 8007258:	bf44      	itt	mi
 800725a:	232b      	movmi	r3, #43	; 0x2b
 800725c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007260:	f89a 3000 	ldrb.w	r3, [sl]
 8007264:	2b2a      	cmp	r3, #42	; 0x2a
 8007266:	d015      	beq.n	8007294 <_vfiprintf_r+0x120>
 8007268:	9a07      	ldr	r2, [sp, #28]
 800726a:	4654      	mov	r4, sl
 800726c:	2000      	movs	r0, #0
 800726e:	f04f 0c0a 	mov.w	ip, #10
 8007272:	4621      	mov	r1, r4
 8007274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007278:	3b30      	subs	r3, #48	; 0x30
 800727a:	2b09      	cmp	r3, #9
 800727c:	d94d      	bls.n	800731a <_vfiprintf_r+0x1a6>
 800727e:	b1b0      	cbz	r0, 80072ae <_vfiprintf_r+0x13a>
 8007280:	9207      	str	r2, [sp, #28]
 8007282:	e014      	b.n	80072ae <_vfiprintf_r+0x13a>
 8007284:	eba0 0308 	sub.w	r3, r0, r8
 8007288:	fa09 f303 	lsl.w	r3, r9, r3
 800728c:	4313      	orrs	r3, r2
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	46a2      	mov	sl, r4
 8007292:	e7d2      	b.n	800723a <_vfiprintf_r+0xc6>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	1d19      	adds	r1, r3, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	9103      	str	r1, [sp, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	bfbb      	ittet	lt
 80072a0:	425b      	neglt	r3, r3
 80072a2:	f042 0202 	orrlt.w	r2, r2, #2
 80072a6:	9307      	strge	r3, [sp, #28]
 80072a8:	9307      	strlt	r3, [sp, #28]
 80072aa:	bfb8      	it	lt
 80072ac:	9204      	strlt	r2, [sp, #16]
 80072ae:	7823      	ldrb	r3, [r4, #0]
 80072b0:	2b2e      	cmp	r3, #46	; 0x2e
 80072b2:	d10c      	bne.n	80072ce <_vfiprintf_r+0x15a>
 80072b4:	7863      	ldrb	r3, [r4, #1]
 80072b6:	2b2a      	cmp	r3, #42	; 0x2a
 80072b8:	d134      	bne.n	8007324 <_vfiprintf_r+0x1b0>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	9203      	str	r2, [sp, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bfb8      	it	lt
 80072c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80072ca:	3402      	adds	r4, #2
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073a4 <_vfiprintf_r+0x230>
 80072d2:	7821      	ldrb	r1, [r4, #0]
 80072d4:	2203      	movs	r2, #3
 80072d6:	4650      	mov	r0, sl
 80072d8:	f7f8 ffca 	bl	8000270 <memchr>
 80072dc:	b138      	cbz	r0, 80072ee <_vfiprintf_r+0x17a>
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	eba0 000a 	sub.w	r0, r0, sl
 80072e4:	2240      	movs	r2, #64	; 0x40
 80072e6:	4082      	lsls	r2, r0
 80072e8:	4313      	orrs	r3, r2
 80072ea:	3401      	adds	r4, #1
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f2:	4829      	ldr	r0, [pc, #164]	; (8007398 <_vfiprintf_r+0x224>)
 80072f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072f8:	2206      	movs	r2, #6
 80072fa:	f7f8 ffb9 	bl	8000270 <memchr>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d03f      	beq.n	8007382 <_vfiprintf_r+0x20e>
 8007302:	4b26      	ldr	r3, [pc, #152]	; (800739c <_vfiprintf_r+0x228>)
 8007304:	bb1b      	cbnz	r3, 800734e <_vfiprintf_r+0x1da>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	3307      	adds	r3, #7
 800730a:	f023 0307 	bic.w	r3, r3, #7
 800730e:	3308      	adds	r3, #8
 8007310:	9303      	str	r3, [sp, #12]
 8007312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007314:	443b      	add	r3, r7
 8007316:	9309      	str	r3, [sp, #36]	; 0x24
 8007318:	e768      	b.n	80071ec <_vfiprintf_r+0x78>
 800731a:	fb0c 3202 	mla	r2, ip, r2, r3
 800731e:	460c      	mov	r4, r1
 8007320:	2001      	movs	r0, #1
 8007322:	e7a6      	b.n	8007272 <_vfiprintf_r+0xfe>
 8007324:	2300      	movs	r3, #0
 8007326:	3401      	adds	r4, #1
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	4619      	mov	r1, r3
 800732c:	f04f 0c0a 	mov.w	ip, #10
 8007330:	4620      	mov	r0, r4
 8007332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007336:	3a30      	subs	r2, #48	; 0x30
 8007338:	2a09      	cmp	r2, #9
 800733a:	d903      	bls.n	8007344 <_vfiprintf_r+0x1d0>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0c6      	beq.n	80072ce <_vfiprintf_r+0x15a>
 8007340:	9105      	str	r1, [sp, #20]
 8007342:	e7c4      	b.n	80072ce <_vfiprintf_r+0x15a>
 8007344:	fb0c 2101 	mla	r1, ip, r1, r2
 8007348:	4604      	mov	r4, r0
 800734a:	2301      	movs	r3, #1
 800734c:	e7f0      	b.n	8007330 <_vfiprintf_r+0x1bc>
 800734e:	ab03      	add	r3, sp, #12
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	462a      	mov	r2, r5
 8007354:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <_vfiprintf_r+0x22c>)
 8007356:	a904      	add	r1, sp, #16
 8007358:	4630      	mov	r0, r6
 800735a:	f3af 8000 	nop.w
 800735e:	4607      	mov	r7, r0
 8007360:	1c78      	adds	r0, r7, #1
 8007362:	d1d6      	bne.n	8007312 <_vfiprintf_r+0x19e>
 8007364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007366:	07d9      	lsls	r1, r3, #31
 8007368:	d405      	bmi.n	8007376 <_vfiprintf_r+0x202>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	059a      	lsls	r2, r3, #22
 800736e:	d402      	bmi.n	8007376 <_vfiprintf_r+0x202>
 8007370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007372:	f7fe f951 	bl	8005618 <__retarget_lock_release_recursive>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	065b      	lsls	r3, r3, #25
 800737a:	f53f af1d 	bmi.w	80071b8 <_vfiprintf_r+0x44>
 800737e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007380:	e71c      	b.n	80071bc <_vfiprintf_r+0x48>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <_vfiprintf_r+0x22c>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff fc6f 	bl	8006c70 <_printf_i>
 8007392:	e7e4      	b.n	800735e <_vfiprintf_r+0x1ea>
 8007394:	08007cad 	.word	0x08007cad
 8007398:	08007cb7 	.word	0x08007cb7
 800739c:	00000000 	.word	0x00000000
 80073a0:	0800714f 	.word	0x0800714f
 80073a4:	08007cb3 	.word	0x08007cb3

080073a8 <__swbuf_r>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	460e      	mov	r6, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	4605      	mov	r5, r0
 80073b0:	b118      	cbz	r0, 80073ba <__swbuf_r+0x12>
 80073b2:	6a03      	ldr	r3, [r0, #32]
 80073b4:	b90b      	cbnz	r3, 80073ba <__swbuf_r+0x12>
 80073b6:	f7fd ff99 	bl	80052ec <__sinit>
 80073ba:	69a3      	ldr	r3, [r4, #24]
 80073bc:	60a3      	str	r3, [r4, #8]
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	071a      	lsls	r2, r3, #28
 80073c2:	d525      	bpl.n	8007410 <__swbuf_r+0x68>
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	b31b      	cbz	r3, 8007410 <__swbuf_r+0x68>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	6922      	ldr	r2, [r4, #16]
 80073cc:	1a98      	subs	r0, r3, r2
 80073ce:	6963      	ldr	r3, [r4, #20]
 80073d0:	b2f6      	uxtb	r6, r6
 80073d2:	4283      	cmp	r3, r0
 80073d4:	4637      	mov	r7, r6
 80073d6:	dc04      	bgt.n	80073e2 <__swbuf_r+0x3a>
 80073d8:	4621      	mov	r1, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	f7ff fdf0 	bl	8006fc0 <_fflush_r>
 80073e0:	b9e0      	cbnz	r0, 800741c <__swbuf_r+0x74>
 80073e2:	68a3      	ldr	r3, [r4, #8]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	60a3      	str	r3, [r4, #8]
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	6022      	str	r2, [r4, #0]
 80073ee:	701e      	strb	r6, [r3, #0]
 80073f0:	6962      	ldr	r2, [r4, #20]
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d004      	beq.n	8007402 <__swbuf_r+0x5a>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	07db      	lsls	r3, r3, #31
 80073fc:	d506      	bpl.n	800740c <__swbuf_r+0x64>
 80073fe:	2e0a      	cmp	r6, #10
 8007400:	d104      	bne.n	800740c <__swbuf_r+0x64>
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f7ff fddb 	bl	8006fc0 <_fflush_r>
 800740a:	b938      	cbnz	r0, 800741c <__swbuf_r+0x74>
 800740c:	4638      	mov	r0, r7
 800740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f000 f806 	bl	8007424 <__swsetup_r>
 8007418:	2800      	cmp	r0, #0
 800741a:	d0d5      	beq.n	80073c8 <__swbuf_r+0x20>
 800741c:	f04f 37ff 	mov.w	r7, #4294967295
 8007420:	e7f4      	b.n	800740c <__swbuf_r+0x64>
	...

08007424 <__swsetup_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <__swsetup_r+0xac>)
 8007428:	4605      	mov	r5, r0
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	460c      	mov	r4, r1
 800742e:	b118      	cbz	r0, 8007438 <__swsetup_r+0x14>
 8007430:	6a03      	ldr	r3, [r0, #32]
 8007432:	b90b      	cbnz	r3, 8007438 <__swsetup_r+0x14>
 8007434:	f7fd ff5a 	bl	80052ec <__sinit>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800743e:	0718      	lsls	r0, r3, #28
 8007440:	d422      	bmi.n	8007488 <__swsetup_r+0x64>
 8007442:	06d9      	lsls	r1, r3, #27
 8007444:	d407      	bmi.n	8007456 <__swsetup_r+0x32>
 8007446:	2309      	movs	r3, #9
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e034      	b.n	80074c0 <__swsetup_r+0x9c>
 8007456:	0758      	lsls	r0, r3, #29
 8007458:	d512      	bpl.n	8007480 <__swsetup_r+0x5c>
 800745a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800745c:	b141      	cbz	r1, 8007470 <__swsetup_r+0x4c>
 800745e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007462:	4299      	cmp	r1, r3
 8007464:	d002      	beq.n	800746c <__swsetup_r+0x48>
 8007466:	4628      	mov	r0, r5
 8007468:	f7fe f91a 	bl	80056a0 <_free_r>
 800746c:	2300      	movs	r3, #0
 800746e:	6363      	str	r3, [r4, #52]	; 0x34
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	2300      	movs	r3, #0
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f043 0308 	orr.w	r3, r3, #8
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	b94b      	cbnz	r3, 80074a0 <__swsetup_r+0x7c>
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007496:	d003      	beq.n	80074a0 <__swsetup_r+0x7c>
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	f000 f88c 	bl	80075b8 <__smakebuf_r>
 80074a0:	89a0      	ldrh	r0, [r4, #12]
 80074a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074a6:	f010 0301 	ands.w	r3, r0, #1
 80074aa:	d00a      	beq.n	80074c2 <__swsetup_r+0x9e>
 80074ac:	2300      	movs	r3, #0
 80074ae:	60a3      	str	r3, [r4, #8]
 80074b0:	6963      	ldr	r3, [r4, #20]
 80074b2:	425b      	negs	r3, r3
 80074b4:	61a3      	str	r3, [r4, #24]
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	b943      	cbnz	r3, 80074cc <__swsetup_r+0xa8>
 80074ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074be:	d1c4      	bne.n	800744a <__swsetup_r+0x26>
 80074c0:	bd38      	pop	{r3, r4, r5, pc}
 80074c2:	0781      	lsls	r1, r0, #30
 80074c4:	bf58      	it	pl
 80074c6:	6963      	ldrpl	r3, [r4, #20]
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	e7f4      	b.n	80074b6 <__swsetup_r+0x92>
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7f7      	b.n	80074c0 <__swsetup_r+0x9c>
 80074d0:	200001d0 	.word	0x200001d0

080074d4 <_raise_r>:
 80074d4:	291f      	cmp	r1, #31
 80074d6:	b538      	push	{r3, r4, r5, lr}
 80074d8:	4604      	mov	r4, r0
 80074da:	460d      	mov	r5, r1
 80074dc:	d904      	bls.n	80074e8 <_raise_r+0x14>
 80074de:	2316      	movs	r3, #22
 80074e0:	6003      	str	r3, [r0, #0]
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80074ea:	b112      	cbz	r2, 80074f2 <_raise_r+0x1e>
 80074ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074f0:	b94b      	cbnz	r3, 8007506 <_raise_r+0x32>
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f830 	bl	8007558 <_getpid_r>
 80074f8:	462a      	mov	r2, r5
 80074fa:	4601      	mov	r1, r0
 80074fc:	4620      	mov	r0, r4
 80074fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007502:	f000 b817 	b.w	8007534 <_kill_r>
 8007506:	2b01      	cmp	r3, #1
 8007508:	d00a      	beq.n	8007520 <_raise_r+0x4c>
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	d103      	bne.n	8007516 <_raise_r+0x42>
 800750e:	2316      	movs	r3, #22
 8007510:	6003      	str	r3, [r0, #0]
 8007512:	2001      	movs	r0, #1
 8007514:	e7e7      	b.n	80074e6 <_raise_r+0x12>
 8007516:	2400      	movs	r4, #0
 8007518:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800751c:	4628      	mov	r0, r5
 800751e:	4798      	blx	r3
 8007520:	2000      	movs	r0, #0
 8007522:	e7e0      	b.n	80074e6 <_raise_r+0x12>

08007524 <raise>:
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <raise+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f7ff bfd3 	b.w	80074d4 <_raise_r>
 800752e:	bf00      	nop
 8007530:	200001d0 	.word	0x200001d0

08007534 <_kill_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	; (8007554 <_kill_r+0x20>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	4611      	mov	r1, r2
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	f7fa f9ad 	bl	80018a0 <_kill>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d102      	bne.n	8007550 <_kill_r+0x1c>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	b103      	cbz	r3, 8007550 <_kill_r+0x1c>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	20000418 	.word	0x20000418

08007558 <_getpid_r>:
 8007558:	f7fa b99a 	b.w	8001890 <_getpid>

0800755c <_malloc_usable_size_r>:
 800755c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007560:	1f18      	subs	r0, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfbc      	itt	lt
 8007566:	580b      	ldrlt	r3, [r1, r0]
 8007568:	18c0      	addlt	r0, r0, r3
 800756a:	4770      	bx	lr

0800756c <__swhatbuf_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	460c      	mov	r4, r1
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	2900      	cmp	r1, #0
 8007576:	b096      	sub	sp, #88	; 0x58
 8007578:	4615      	mov	r5, r2
 800757a:	461e      	mov	r6, r3
 800757c:	da0d      	bge.n	800759a <__swhatbuf_r+0x2e>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	bf0c      	ite	eq
 800758a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800758e:	2340      	movne	r3, #64	; 0x40
 8007590:	2000      	movs	r0, #0
 8007592:	6031      	str	r1, [r6, #0]
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	b016      	add	sp, #88	; 0x58
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	466a      	mov	r2, sp
 800759c:	f000 f848 	bl	8007630 <_fstat_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	dbec      	blt.n	800757e <__swhatbuf_r+0x12>
 80075a4:	9901      	ldr	r1, [sp, #4]
 80075a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075ae:	4259      	negs	r1, r3
 80075b0:	4159      	adcs	r1, r3
 80075b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b6:	e7eb      	b.n	8007590 <__swhatbuf_r+0x24>

080075b8 <__smakebuf_r>:
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075bc:	079d      	lsls	r5, r3, #30
 80075be:	4606      	mov	r6, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	d507      	bpl.n	80075d4 <__smakebuf_r+0x1c>
 80075c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2301      	movs	r3, #1
 80075ce:	6163      	str	r3, [r4, #20]
 80075d0:	b002      	add	sp, #8
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	ab01      	add	r3, sp, #4
 80075d6:	466a      	mov	r2, sp
 80075d8:	f7ff ffc8 	bl	800756c <__swhatbuf_r>
 80075dc:	9900      	ldr	r1, [sp, #0]
 80075de:	4605      	mov	r5, r0
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7fe fc29 	bl	8005e38 <_malloc_r>
 80075e6:	b948      	cbnz	r0, 80075fc <__smakebuf_r+0x44>
 80075e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ec:	059a      	lsls	r2, r3, #22
 80075ee:	d4ef      	bmi.n	80075d0 <__smakebuf_r+0x18>
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	f043 0302 	orr.w	r3, r3, #2
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	e7e3      	b.n	80075c4 <__smakebuf_r+0xc>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	6020      	str	r0, [r4, #0]
 8007600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	6163      	str	r3, [r4, #20]
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	6120      	str	r0, [r4, #16]
 800760e:	b15b      	cbz	r3, 8007628 <__smakebuf_r+0x70>
 8007610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f81d 	bl	8007654 <_isatty_r>
 800761a:	b128      	cbz	r0, 8007628 <__smakebuf_r+0x70>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	431d      	orrs	r5, r3
 800762c:	81a5      	strh	r5, [r4, #12]
 800762e:	e7cf      	b.n	80075d0 <__smakebuf_r+0x18>

08007630 <_fstat_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	; (8007650 <_fstat_r+0x20>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f7fa f98e 	bl	800195e <_fstat>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d102      	bne.n	800764c <_fstat_r+0x1c>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b103      	cbz	r3, 800764c <_fstat_r+0x1c>
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	20000418 	.word	0x20000418

08007654 <_isatty_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	; (8007670 <_isatty_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7fa f98d 	bl	800197e <_isatty>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_isatty_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_isatty_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20000418 	.word	0x20000418

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
